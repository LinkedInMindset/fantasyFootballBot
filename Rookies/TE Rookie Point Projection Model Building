{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyONdqb4Bz40KjYOqjxgoQSO"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## Loading Libraries"],"metadata":{"id":"mXywQ_SJifm6"}},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x4gnFvHViaxA","executionInfo":{"status":"ok","timestamp":1747244561525,"user_tz":300,"elapsed":112215,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"outputId":"3abb5eb9-e8f9-4c27-edb1-c0671e5927eb"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/gdrive\n","/content/gdrive/My Drive/Football/Draft Tool/Rookie Projection Training Data\n"]}],"source":["import pandas as pd\n","import numpy as np\n","\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.linear_model import LinearRegression\n","from sklearn.preprocessing import StandardScaler\n","\n","import xgboost as xgb\n","import lightgbm as lgb\n","\n","import torch\n","import torch.nn as nn\n","from torch.utils.data import TensorDataset, DataLoader\n","\n","import shap\n","from sklearn.metrics import r2_score\n","\n","from google.colab import drive\n","drive.mount('/content/gdrive')\n","%cd /content/gdrive/My Drive/Football/Draft Tool/Rookie Projection Training Data\n","\n","pd.set_option('display.max_columns', None, 'display.max_rows', None)\n","pd.options.mode.chained_assignment = None  # default='warn'"]},{"cell_type":"markdown","source":["## Data Cleaning Function"],"metadata":{"id":"Jc5CrExbjdF3"}},{"cell_type":"code","source":["def clean_data(df):\n","\n","  '''This function takes in a dataframe and returns a cleaned dataframe'''\n","\n","  # Convert ht (height) to inches\n","  def ht_to_inches(ht):\n","    try:\n","      feet, inches = map(int, ht.split('-'))\n","      return feet * 12 + inches\n","    except:\n","      return np.nan  # Handle cases where ht is not in the expected format\n","\n","  df['ht'] = df['ht'].apply(ht_to_inches)\n","  df = df.rename(columns={'ht': 'htInches'})\n","\n","  # Standardize PPR Points\n","  df['pprPointsPerWeek'] = df['pprPoints']/df['weeks']\n","\n","  # Convert college name to a category\n","  df['college'] = df['college'].astype('category')\n","\n","  return df"],"metadata":{"id":"mwUyBr6Hpoka","executionInfo":{"status":"ok","timestamp":1747244564891,"user_tz":300,"elapsed":2,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}}},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":["### Load and Clean Data"],"metadata":{"id":"dCtPja5zqi_Z"}},{"cell_type":"code","source":["dfTe = pd.read_csv(r'teDraftDfProd.csv')\n","\n","# Apply Cleaning Function\n","dfTe = clean_data(dfTe)"],"metadata":{"id":"nBzwp6k9iijk","executionInfo":{"status":"ok","timestamp":1747244568095,"user_tz":300,"elapsed":397,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["dfTe.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"ti53f67Vq3RE","executionInfo":{"status":"ok","timestamp":1747244568099,"user_tz":300,"elapsed":2,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"outputId":"26b8f533-f196-483d-8496-008960dfa598"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      cfb_player_id     gsis_id  season  pick team       college   age  \\\n","0    heath-miller-1  00-0023465    2005    30  PIT      Virginia  22.0   \n","1   joel-dreessen-1  00-0023630    2005   198  NYJ  Colorado St.  23.0   \n","2    vernon-davis-1  00-0024221    2006     6  SFO      Maryland  22.0   \n","3  marcedes-lewis-1  00-0024243    2006    28  JAX          UCLA  22.0   \n","4  anthony-fasano-1  00-0024268    2006    53  DAL    Notre Dame  22.0   \n","\n","   htInches     wt  passAttempts  passYards  passTDs  passAirYds  teamTotRec  \\\n","0        77  256.0           358     2970.0       20         0.0           9   \n","1        76  260.0           438     3231.0       19         0.0          45   \n","2        75  254.0           389     2190.0        8         0.0           5   \n","3        78  261.0           487     3352.0       21         0.0          31   \n","4        76  259.0           500     3639.0       23         0.0          79   \n","\n","   teamTotYds  teamTotTD  teamMaxRec  teamMaxYds  teamMaxTD             Key  \\\n","0        89.0          3           9        89.0          3  00-00234652005   \n","1       495.0          6          27       313.0          4  00-00236302005   \n","2        54.0          0           5        54.0          0  00-00242212006   \n","3       277.0          3          18       157.0          2  00-00242432006   \n","4       846.0          7          66       757.0          6  00-00242682006   \n","\n","   pprPoints  weeks  pprPointsPerWeek  \n","0      120.9     13             9.300  \n","1        9.1      4             2.275  \n","2       63.0      7             9.000  \n","3       31.6      8             3.950  \n","4       26.6      7             3.800  "],"text/html":["\n","  <div id=\"df-697a353a-8a2c-4abb-a759-7055b9fcc4d1\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>cfb_player_id</th>\n","      <th>gsis_id</th>\n","      <th>season</th>\n","      <th>pick</th>\n","      <th>team</th>\n","      <th>college</th>\n","      <th>age</th>\n","      <th>htInches</th>\n","      <th>wt</th>\n","      <th>passAttempts</th>\n","      <th>passYards</th>\n","      <th>passTDs</th>\n","      <th>passAirYds</th>\n","      <th>teamTotRec</th>\n","      <th>teamTotYds</th>\n","      <th>teamTotTD</th>\n","      <th>teamMaxRec</th>\n","      <th>teamMaxYds</th>\n","      <th>teamMaxTD</th>\n","      <th>Key</th>\n","      <th>pprPoints</th>\n","      <th>weeks</th>\n","      <th>pprPointsPerWeek</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>heath-miller-1</td>\n","      <td>00-0023465</td>\n","      <td>2005</td>\n","      <td>30</td>\n","      <td>PIT</td>\n","      <td>Virginia</td>\n","      <td>22.0</td>\n","      <td>77</td>\n","      <td>256.0</td>\n","      <td>358</td>\n","      <td>2970.0</td>\n","      <td>20</td>\n","      <td>0.0</td>\n","      <td>9</td>\n","      <td>89.0</td>\n","      <td>3</td>\n","      <td>9</td>\n","      <td>89.0</td>\n","      <td>3</td>\n","      <td>00-00234652005</td>\n","      <td>120.9</td>\n","      <td>13</td>\n","      <td>9.300</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>joel-dreessen-1</td>\n","      <td>00-0023630</td>\n","      <td>2005</td>\n","      <td>198</td>\n","      <td>NYJ</td>\n","      <td>Colorado St.</td>\n","      <td>23.0</td>\n","      <td>76</td>\n","      <td>260.0</td>\n","      <td>438</td>\n","      <td>3231.0</td>\n","      <td>19</td>\n","      <td>0.0</td>\n","      <td>45</td>\n","      <td>495.0</td>\n","      <td>6</td>\n","      <td>27</td>\n","      <td>313.0</td>\n","      <td>4</td>\n","      <td>00-00236302005</td>\n","      <td>9.1</td>\n","      <td>4</td>\n","      <td>2.275</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>vernon-davis-1</td>\n","      <td>00-0024221</td>\n","      <td>2006</td>\n","      <td>6</td>\n","      <td>SFO</td>\n","      <td>Maryland</td>\n","      <td>22.0</td>\n","      <td>75</td>\n","      <td>254.0</td>\n","      <td>389</td>\n","      <td>2190.0</td>\n","      <td>8</td>\n","      <td>0.0</td>\n","      <td>5</td>\n","      <td>54.0</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>54.0</td>\n","      <td>0</td>\n","      <td>00-00242212006</td>\n","      <td>63.0</td>\n","      <td>7</td>\n","      <td>9.000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>marcedes-lewis-1</td>\n","      <td>00-0024243</td>\n","      <td>2006</td>\n","      <td>28</td>\n","      <td>JAX</td>\n","      <td>UCLA</td>\n","      <td>22.0</td>\n","      <td>78</td>\n","      <td>261.0</td>\n","      <td>487</td>\n","      <td>3352.0</td>\n","      <td>21</td>\n","      <td>0.0</td>\n","      <td>31</td>\n","      <td>277.0</td>\n","      <td>3</td>\n","      <td>18</td>\n","      <td>157.0</td>\n","      <td>2</td>\n","      <td>00-00242432006</td>\n","      <td>31.6</td>\n","      <td>8</td>\n","      <td>3.950</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>anthony-fasano-1</td>\n","      <td>00-0024268</td>\n","      <td>2006</td>\n","      <td>53</td>\n","      <td>DAL</td>\n","      <td>Notre Dame</td>\n","      <td>22.0</td>\n","      <td>76</td>\n","      <td>259.0</td>\n","      <td>500</td>\n","      <td>3639.0</td>\n","      <td>23</td>\n","      <td>0.0</td>\n","      <td>79</td>\n","      <td>846.0</td>\n","      <td>7</td>\n","      <td>66</td>\n","      <td>757.0</td>\n","      <td>6</td>\n","      <td>00-00242682006</td>\n","      <td>26.6</td>\n","      <td>7</td>\n","      <td>3.800</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-697a353a-8a2c-4abb-a759-7055b9fcc4d1')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-697a353a-8a2c-4abb-a759-7055b9fcc4d1 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-697a353a-8a2c-4abb-a759-7055b9fcc4d1');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-3598962e-e9c9-4212-bca7-426d28b73a11\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3598962e-e9c9-4212-bca7-426d28b73a11')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-3598962e-e9c9-4212-bca7-426d28b73a11 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"dfTe"}},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","source":["### Baseline Model"],"metadata":{"id":"jvgvSdXRChno"}},{"cell_type":"code","source":["# Define features (X) and target (y)\n","features = ['pick', 'age', 'htInches', 'wt','passAttempts','passYards','passTDs','passAirYds', 'teamTotRec', 'teamTotYds', 'teamTotTD', 'teamMaxRec', 'teamMaxYds', 'teamMaxTD']\n","target = 'pprPointsPerWeek'\n","\n","X = dfTe[features]\n","y = dfTe[target]\n","\n","# Create a boolean mask to identify 2023 and 2024 data for testing\n","test_mask = dfTe['season'].isin([2022,2023])\n","\n","# Split the data into training and testing sets based on the year\n","X_train = X[~test_mask]\n","X_test = X[test_mask]\n","y_train = y[~test_mask]\n","y_test = y[test_mask]\n","\n","\n","# Scale the data\n","scaler = StandardScaler()\n","X_train_scaled = scaler.fit_transform(X_train)\n","X_test_scaled = scaler.transform(X_test)\n","\n","# Initialize and train the linear regression model\n","model = LinearRegression()\n","model.fit(X_train_scaled, y_train)\n","\n","# Make predictions on the test set\n","y_pred = model.predict(X_test_scaled)\n","\n","# Evaluate the model (example: using R-squared)\n","r2 = r2_score(y_test, y_pred)\n","rmse = np.sqrt(np.mean((y_test - y_pred)**2))\n","print(f\"R-squared: {r2}\")\n","print(f\"RMSE: {rmse}\")\n","\n","# View the Predictions compared to the true values\n","zipped_data = pd.DataFrame(list(zip(y_pred, y_test, dfTe['cfb_player_id'][test_mask])), columns = ('predicted','true','player'))\n","display(zipped_data.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":242},"id":"RowYqAILjpOY","executionInfo":{"status":"ok","timestamp":1747244568837,"user_tz":300,"elapsed":49,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"outputId":"b6677bc2-6fcd-4ab1-bbbe-ec9ec39443e3"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["R-squared: -0.03976233365467374\n","RMSE: 3.0425608069947274\n"]},{"output_type":"display_data","data":{"text/plain":["   predicted      true            player\n","0   5.167532  6.833333    trey-mcbride-1\n","1   5.461199  6.183333    jelani-woods-1\n","2   5.430490  8.610000    greg-dulcich-1\n","3   2.951917  0.900000  jeremy-ruckert-1\n","4   4.899476  6.650000      cade-otton-1"],"text/html":["\n","  <div id=\"df-d3afbabd-8a1c-4ff5-b633-c7606592eb33\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>predicted</th>\n","      <th>true</th>\n","      <th>player</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.167532</td>\n","      <td>6.833333</td>\n","      <td>trey-mcbride-1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>5.461199</td>\n","      <td>6.183333</td>\n","      <td>jelani-woods-1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>5.430490</td>\n","      <td>8.610000</td>\n","      <td>greg-dulcich-1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2.951917</td>\n","      <td>0.900000</td>\n","      <td>jeremy-ruckert-1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4.899476</td>\n","      <td>6.650000</td>\n","      <td>cade-otton-1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d3afbabd-8a1c-4ff5-b633-c7606592eb33')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d3afbabd-8a1c-4ff5-b633-c7606592eb33 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d3afbabd-8a1c-4ff5-b633-c7606592eb33');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-2a58f1b1-bbdd-4070-8c28-ae1872280599\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2a58f1b1-bbdd-4070-8c28-ae1872280599')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-2a58f1b1-bbdd-4070-8c28-ae1872280599 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display(zipped_data\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"predicted\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0480326245884781,\n        \"min\": 2.9519171595098936,\n        \"max\": 5.46119926510241,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          5.46119926510241,\n          4.899475811481992,\n          5.4304901886016825\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"true\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.9084823840316205,\n        \"min\": 0.9,\n        \"max\": 8.61,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          6.183333333333334,\n          6.6499999999999995,\n          8.61\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"player\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"jelani-woods-1\",\n          \"cade-otton-1\",\n          \"greg-dulcich-1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"markdown","source":["#### Feature Importance"],"metadata":{"id":"YJ6NRjH_E6lj"}},{"cell_type":"code","source":["# Get feature importances\n","importances = model.coef_\n","\n","# Create a DataFrame for visualization\n","feature_importances = pd.DataFrame({'feature': features, 'importance': importances})\n","feature_importances = feature_importances.sort_values('importance', ascending=False)\n","\n","# Plotting feature importances\n","plt.figure(figsize=(10, 6))\n","sns.barplot(x='importance', y='feature', data=feature_importances)\n","plt.title('Feature Importances')\n","plt.xlabel('Importance')\n","plt.ylabel('Feature')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"ADqn0JahrECX","executionInfo":{"status":"ok","timestamp":1747244573955,"user_tz":300,"elapsed":346,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"outputId":"995e50b8-11b4-403f-c60e-dbb5233073c1"},"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["## XGBoost"],"metadata":{"id":"X9qB-1gHsmZx"}},{"cell_type":"markdown","source":["#### Standard"],"metadata":{"id":"Wd1X_LIWaYo0"}},{"cell_type":"markdown","source":["Defining the Datasets"],"metadata":{"id":"hWR7l9xEL7-0"}},{"cell_type":"code","source":["# Define features (X) and target (y)\n","features = ['pick', 'age', 'htInches', 'wt','passAttempts','passYards','passTDs','passAirYds', 'teamTotRec', 'teamTotYds', 'teamTotTD', 'teamMaxRec', 'teamMaxYds', 'teamMaxTD']\n","target = 'pprPointsPerWeek'\n","\n","X = dfTe[features]\n","y = dfTe[target]\n","\n","# Create a boolean mask to identify 2023 and 2024 data for testing\n","test_mask = dfTe['season'].isin([2023])\n","\n","# Split the data into training and testing sets based on the year\n","X_train = X[~test_mask]\n","X_test = X[test_mask]\n","y_train = y[~test_mask]\n","y_test = y[test_mask]"],"metadata":{"id":"cPG0DnQwL-DF","executionInfo":{"status":"ok","timestamp":1747244805516,"user_tz":300,"elapsed":14,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}}},"execution_count":14,"outputs":[]},{"cell_type":"markdown","source":["Grid Search Parameters"],"metadata":{"id":"fVIhBNodL_hc"}},{"cell_type":"code","source":["# 3. Define hyperparameter grid\n","param_grid = {\n","    'n_estimators': [50, 100, 200],\n","    'max_depth': [2,3,4],\n","    'learning_rate': [0.01, 0.1, 0.2],\n","    'subsample': [0.8, 1.0],\n","    'colsample_bytree': [0.8, 1.0],\n","    'gamma': [0, 0.1, 0.5, 1],\n","    'reg_alpha': [0, 0.1, 0.5, 1],\n","    'reg_lambda': [0, 0.1, 0.5, 1]\n","}\n","\n","# Initialize XGBoost regressor cross validation run\n","model = xgb.XGBRegressor(\n","    objective='reg:squarederror',\n","    booster = 'gbtree'\n",")\n","\n","# 4. Grid search with cross-validation\n","grid_search = GridSearchCV(\n","    estimator=model,\n","    param_grid=param_grid,\n","    cv=5,\n","    scoring='neg_mean_squared_error',\n","    verbose=1,\n","    n_jobs=-1\n",")\n","\n","# 5. Fit the grid search\n","grid_search.fit(X_train, y_train)\n","\n","# 6. Evaluate best model\n","best_model = grid_search.best_estimator_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SmwvZ6RbMB9U","outputId":"6925c211-cd8d-4572-c804-790b2ca119c8","executionInfo":{"status":"ok","timestamp":1747170418181,"user_tz":300,"elapsed":1593718,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 5 folds for each of 6912 candidates, totalling 34560 fits\n"]}]},{"cell_type":"markdown","source":["Best Parameters are:\n","\n","* 'colsample_bytree': 1.0,\n","* 'gamma': 1,\n","* 'learning_rate': 0.01,\n","* 'max_depth': 2,\n","* 'n_estimators': 100,\n","* 'reg_alpha': 0.5,\n","* 'reg_lambda': 0.5,\n","* 'subsample': 0.8"],"metadata":{"id":"EtLI_4XBkHCm"}},{"cell_type":"markdown","source":["#### Best Model"],"metadata":{"id":"uzxHE_TF5Iy4"}},{"cell_type":"code","source":["# Define the model with the specified hyperparameters\n","best_model = xgb.XGBRegressor(\n","    colsample_bytree=1.0,\n","    gamma=1,\n","    learning_rate=0.01,\n","    max_depth=2,\n","    n_estimators=100,\n","    reg_alpha=0.5,\n","    reg_lambda=0.5,\n","    subsample=0.8,\n","    objective='reg:squarederror',  # Use this for regression tasks\n","    random_state=42\n",")\n","\n","# Fit the model\n","best_model.fit(X_train, y_train)\n","\n","# Predict on test set\n","y_pred = best_model.predict(X_test)\n","\n","# Evaluate model\n","r2_XGBoost = r2_score(y_test, y_pred)\n","rmse = np.sqrt(np.mean((y_test - y_pred)**2))\n","print(f\"r-squared: {r2_XGBoost:.2f}\")\n","print(f\"RMSE: {rmse:.2f}\")\n","\n","zipped_data = pd.DataFrame(list(zip(y_pred, y_test, dfTe['cfb_player_id'][test_mask], dfTe['season'][test_mask])), columns = ('predicted','true','player','season'))\n","display(zipped_data)\n","\n","# Create a TreeExplainer\n","explainer = shap.TreeExplainer(best_model)\n","\n","# Compute SHAP values\n","shap_values = explainer.shap_values(X_test)\n","\n","shap_values = explainer.shap_values(X_test)\n","shap.summary_plot(shap_values, X_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"plXnkSsOtDne","executionInfo":{"status":"ok","timestamp":1747244809699,"user_tz":300,"elapsed":998,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"outputId":"f1b6c7eb-a1e8-41f9-c5c4-8637a045399a"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["r-squared: 0.35\n","RMSE: 2.93\n"]},{"output_type":"display_data","data":{"text/plain":["    predicted       true                player  season\n","0    6.353461   9.393750      dalton-kincaid-1    2023\n","1    6.538379  14.076471         sam-laporta-1    2023\n","2    6.356251   5.950000       michael-mayer-1    2023\n","3    6.281628   6.836364       luke-musgrave-1    2023\n","4    4.663952   2.409091    luke-schoonmaker-1    2023\n","5    4.568053   2.900000     brenton-strange-1    2023\n","6    4.176350   1.637500  darnell-washington-1    2023\n","7    4.411262   3.050000          josh-whyle-1    2023\n","8    4.220259   3.518182        will-mallory-1    2023\n","9    4.501067   1.800000        payne-durham-1    2023\n","10   4.357992   6.375000         davis-allen-1    2023"],"text/html":["\n","  <div id=\"df-6f657157-0541-4a20-87bc-5cce424515a8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>predicted</th>\n","      <th>true</th>\n","      <th>player</th>\n","      <th>season</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>6.353461</td>\n","      <td>9.393750</td>\n","      <td>dalton-kincaid-1</td>\n","      <td>2023</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>6.538379</td>\n","      <td>14.076471</td>\n","      <td>sam-laporta-1</td>\n","      <td>2023</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>6.356251</td>\n","      <td>5.950000</td>\n","      <td>michael-mayer-1</td>\n","      <td>2023</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>6.281628</td>\n","      <td>6.836364</td>\n","      <td>luke-musgrave-1</td>\n","      <td>2023</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4.663952</td>\n","      <td>2.409091</td>\n","      <td>luke-schoonmaker-1</td>\n","      <td>2023</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>4.568053</td>\n","      <td>2.900000</td>\n","      <td>brenton-strange-1</td>\n","      <td>2023</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>4.176350</td>\n","      <td>1.637500</td>\n","      <td>darnell-washington-1</td>\n","      <td>2023</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>4.411262</td>\n","      <td>3.050000</td>\n","      <td>josh-whyle-1</td>\n","      <td>2023</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>4.220259</td>\n","      <td>3.518182</td>\n","      <td>will-mallory-1</td>\n","      <td>2023</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>4.501067</td>\n","      <td>1.800000</td>\n","      <td>payne-durham-1</td>\n","      <td>2023</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>4.357992</td>\n","      <td>6.375000</td>\n","      <td>davis-allen-1</td>\n","      <td>2023</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6f657157-0541-4a20-87bc-5cce424515a8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6f657157-0541-4a20-87bc-5cce424515a8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6f657157-0541-4a20-87bc-5cce424515a8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-7ca4eb31-f051-47e7-a079-621ee62d82f6\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7ca4eb31-f051-47e7-a079-621ee62d82f6')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-7ca4eb31-f051-47e7-a079-621ee62d82f6 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_6b31b280-9ae3-444e-ab73-0083758f74c5\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('zipped_data')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_6b31b280-9ae3-444e-ab73-0083758f74c5 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('zipped_data');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"zipped_data","summary":"{\n  \"name\": \"zipped_data\",\n  \"rows\": 11,\n  \"fields\": [\n    {\n      \"column\": \"predicted\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 11,\n        \"samples\": [\n          4.568053245544434,\n          6.353460788726807,\n          4.501067161560059\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"true\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.817473399072472,\n        \"min\": 1.6375,\n        \"max\": 14.076470588235296,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          2.9,\n          9.39375,\n          1.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"player\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 11,\n        \"samples\": [\n          \"brenton-strange-1\",\n          \"dalton-kincaid-1\",\n          \"payne-durham-1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"season\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 2023,\n        \"max\": 2023,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2023\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x710 with 2 Axes>"],"image/png":"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zp2kpKRw4MAB6tevj9FopG7duuzYsYPY2Fj+/PNP6tevn9/TlULKtYgz3SbXpmbbkng2DcK7c0VKpcVTJD0FV5KYV7cS9RPj+ZfbRmKfsP+I9YUQN77r6UmrKs60q+7Cmn4K9EVERGrUqEGtWrX497//zdGjR/O8f9XsO5CQkBAWLVrEpk2bSE9P57HHHgMy6vknTJjA1q1bsVqtdsH+3azulgeTf5AHbYZVudHwVVPbfz5DxuLwmTO3Znlt5zpudK7jdm8nKCIiUohMmTKF77//npEjR/Lee+9Ru3ZtunbtSufOnSlfvvxd96/MvgOpX78+FouFGTNmULJkScqUKWNrT0tLY9asWTg5OVGnTh3bNR4eGSUYcXFx+TJnERERkTvlSN+g27dvX37++WfOnTvHhAkT8PT0ZNiwYVSqVIknnniCCRMm3NU36CrYdyD16tXDaDRy4sQJu+x9pUqVCAgI4Pjx41SrVg1PT0/bsZo1awLw8ccfs3LlStauXcu5c+fu+9xFREREHmSBgYEMHDiQTZs2cfr0af7zn/9gMBh488037yrDr2Dfgfj4+PDwww8DZNpt53rw//f21q1b88ILL7Bv3z5Gjx7N8OHDbV+0JSIiIlIQWQzZPwq7UqVKUb16dR555BGKFCmCxWLJdV/ajUdE8lRGzf5MAHr16mXbjUdERCSvzCm/MNvjPU49d59mknesVisbNmzgu+++Y+nSpURHR+Pv70/Hjh3p0qULTz31VK761QJdEREREZF8snnzZr7//nsWLVrEpUuX8PHx4R//+AddunShRYsWODvfXbiuYF9ERERECpXCtgg3O02aNMHLy4v27dvTpUsX2rRpg6ura571r2BfRERERCSfLFy4kLZt2+Lu7n5P+lewLyIiIiKFitVxEvt06tTpnvav3XhERERERByUgn0REREREQelMh4RERERKVQsDrRA915TZl9ERERExEEpsy8iIiIihYojLdC915TZFxERERHJR/Hx8Xz88ce0bt2aOnXqsH37dgBiYmL47LPPOHr0aK77VmZfRERERAoVR/pSrbNnz9KkSRPOnDlD5cqV+eOPP0hMTASgaNGiTJs2jVOnTjFhwoRc9a9gX0REREQkn7z11lskJCSwd+9eSpQoQYkSJeyO/+Mf/2DFihW57l9lPCIiIiIi+eTHH3/ktddeo1q1ahiy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PkuLFi0wmUwcPXqU2bNnc+nSJdzcbmROT548icViISIigoiIiCz7uf4axcbGEh8fb/cJS0H193UG18uQrnN1dSUgwL4M5OY3fVk9v/47pjFyOcZH3XHvPJlEixvXcwXmMqUIKJeE6+F40sw+lIy7Rut9J1hTu5Lt2gZnLlIixUSSc0YJnrMzdOvoS8mSHpnHuB/3oTE0hsbQGBojz8bID4Vte83sGAwGihcvfstS7uTkZC5fvky5cuVy1f99+1Kt4OBg3njjjVsev14P/8svv/DOO+9QvXp1hg4dSmBgIK6urlgsFgYNGmT3bvS6W2Wjs8tSZ9XPdc888wxz5sxhxIgRXLt2jQ4dOtzy3IMHDzJw4EDKlCnDwIEDKV26NG5ubhgMBt59990sy2LS09OJjIwEMt68REVF2S08vlm5cuVo0KABAE8++SS1a9fmn//8J//+97/56KOP7M59+umnadeuXZb93PzmQCTXOj2O86Gy+MzaQtrJJAxPPoxrj7oYPF1psySSg6svs81YkuBiZ+nre4riwaGUOh/Hk484UT60JLv+SCch0cLj9TwoWcLl9uOJiIg4uIoVKzJnzhyef/75LI8vW7aM559/HrM5d988n6fBvuEWWx2VLVuWq1evUr9+/duWiaxatQo3NzemTZtm95HFyZMn83Kq2apQoQK1atVi27Zt1KpViwoVKtzy3DVr1mA2m/niiy/sPmFITk7OMqsP8OWXX3Lo0CFee+01Zs+ezbvvvsu8efNytDj30UcfJSwsjJUrV9K1a1ceffRRypQpg8FgsJVFZcfPzw8fHx/+/PPP244lkqUqQRg/6sLfP1A0dH6SGp2hSno65r/22e/VwgUXlxsZoKeK602niIjcPUfaXjO7BDRkJInvpsw6Twu0rwerfy+1adu2LVeuXGHevHlZXndzLdj1m7k5I261Wvnqq6/ycqq3NXDgQPr06cPAgQOzPe96ec/ff1Bff/11lln9X3/9lfnz59OuXTtefPFF3n//fU6fPs0nn3yS47n985//xMnJyfZNvn5+fjz55JP88ssv/O9//8t0vtVqte3JbzQaad26NcePH+eHH37I8lyReyElLo29808SOflPLh/JXI4nIiLyoIiPj+f06dOcPn0ayIiFrz+/+bF//34WLFhwV6VTeZrZr169Okajka+//pr4+Hg8PDwICgqi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\n"},"metadata":{}}]},{"cell_type":"markdown","source":["#### Quantile Regression"],"metadata":{"id":"1hmpF8T2dAU0"}},{"cell_type":"code","source":["def quantile_loss(df, test_mask):\n","\n","    \"\"\"Train a quantile regression model.\"\"\"\n","    \"\"\"https://xgboost.readthedocs.io/en/stable/python/examples/quantile_regression.html\"\"\"\n","\n","    X = dfWr[features]\n","    y = dfWr[target]\n","\n","    # Split the data into training and testing sets based on the year\n","    X_train = X[~test_mask]\n","    X_test = X[test_mask]\n","    y_train = y[~test_mask]\n","    y_test = y[test_mask]\n","\n","    # Train on 0.05 and 0.95 quantiles. The model is similar to multi-class and\n","    # multi-target models.\n","    alpha = np.array([0.05, 0.5, 0.95])\n","    evals_result: Dict[str, Dict] = {}\n","\n","    # We will be using the `hist` tree method, quantile DMatrix can be used to preserve\n","    # memory (which has nothing to do with quantile regression itself, see its document\n","    # for details).\n","    # Do not use the `exact` tree method for quantile regression, otherwise the\n","    # performance might drop.\n","    Xy = xgb.QuantileDMatrix(X_train, y_train)\n","    # use Xy as a reference\n","    Xy_test = xgb.QuantileDMatrix(X_test, y_test, ref=Xy)\n","\n","    booster = xgb.train(\n","        {\n","            # Use the quantile objective function.\n","            \"objective\": \"reg:quantileerror\",\n","            \"quantile_alpha\": alpha,\n","            # Let's try not to overfit.\n","            \"learning_rate\": 0.08,\n","            \"n_estimators\": 100,\n","            \"max_depth\": 3,\n","            \"reg_alpha\": 1,\n","            \"booster\": \"gbtree\",\n","            \"gamma\":0.1\n","        },\n","        Xy,\n","        num_boost_round=64,\n","        early_stopping_rounds=2,\n","        # The evaluation result is a weighted average across multiple quantiles.\n","        evals=[(Xy, \"Train\"), (Xy_test, \"Test\")],\n","        evals_result=evals_result,\n","    )\n","\n","    scores = booster.inplace_predict(X_test)\n","    # dim 1 is the quantiles\n","    assert scores.shape[0] == X_test.shape[0]\n","    assert scores.shape[1] == alpha.shape[0]\n","\n","    y_lower = scores[:, 0]  # alpha=0.05\n","    y_med = scores[:, 1]  # alpha=0.5, median\n","    y_upper = scores[:, 2]  # alpha=0.95\n","\n","    # Train a mse model for comparison\n","    booster = xgb.train(\n","        {\n","            # Use the quantile objective function.\n","            \"objective\": \"reg:squarederror\",\n","            \"quantile_alpha\": alpha,\n","            # Let's try not to overfit.\n","            \"learning_rate\": 0.08,\n","            \"n_estimators\": 100,\n","            \"max_depth\": 3,\n","            \"reg_alpha\": 1,\n","            \"booster\": \"gbtree\"\n","        },\n","        Xy,\n","        num_boost_round=64,\n","        early_stopping_rounds=2,\n","        evals=[(Xy, \"Train\"), (Xy_test, \"Test\")],\n","        evals_result=evals_result,\n","    )\n","\n","    return y_upper, y_med, y_lower, scores, y_test"],"metadata":{"id":"6yaGYBradAeI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Create a boolean mask to identify 2023 and 2024 data for testing\n","test_mask = dfWr['season'].isin([2023])\n","\n","upper, med, lower, standard, true = quantile_loss(dfWr, test_mask)\n","\n","zipped_data = pd.DataFrame(list(zip(upper, med, lower, true, standard,dfWr['cfb_player_id'][test_mask])), columns = ('upper','med','lower','true','standard','player'))\n","display(zipped_data.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":882},"id":"vVT-y7nteH3t","executionInfo":{"status":"ok","timestamp":1747087801993,"user_tz":300,"elapsed":1081,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"outputId":"4ca372d9-9695-4998-fba4-f4fe4eb58616"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0]\tTrain-quantile:1.30366\tTest-quantile:2.02806\n","[1]\tTrain-quantile:1.15712\tTest-quantile:1.84366\n","[2]\tTrain-quantile:1.04013\tTest-quantile:1.68878\n","[3]\tTrain-quantile:0.94809\tTest-quantile:1.58669\n","[4]\tTrain-quantile:0.88050\tTest-quantile:1.48383\n","[5]\tTrain-quantile:0.81922\tTest-quantile:1.42877\n","[6]\tTrain-quantile:0.77970\tTest-quantile:1.38425\n","[7]\tTrain-quantile:0.74352\tTest-quantile:1.36565\n","[8]\tTrain-quantile:0.71643\tTest-quantile:1.33091\n","[9]\tTrain-quantile:0.69354\tTest-quantile:1.31616\n","[10]\tTrain-quantile:0.67060\tTest-quantile:1.31174\n","[11]\tTrain-quantile:0.65430\tTest-quantile:1.24671\n","[12]\tTrain-quantile:0.63887\tTest-quantile:1.22833\n","[13]\tTrain-quantile:0.62525\tTest-quantile:1.22134\n","[14]\tTrain-quantile:0.61369\tTest-quantile:1.21583\n","[15]\tTrain-quantile:0.60372\tTest-quantile:1.20976\n","[16]\tTrain-quantile:0.59471\tTest-quantile:1.21287\n","[17]\tTrain-quantile:0.58663\tTest-quantile:1.20892\n","[18]\tTrain-quantile:0.58011\tTest-quantile:1.18901\n","[19]\tTrain-quantile:0.57372\tTest-quantile:1.19129\n","[20]\tTrain-quantile:0.56547\tTest-quantile:1.19123\n","[0]\tTrain-rmse:4.06716\tTest-rmse:4.35623\n","[1]\tTrain-rmse:3.97097\tTest-rmse:4.29212\n","[2]\tTrain-rmse:3.88649\tTest-rmse:4.27147\n","[3]\tTrain-rmse:3.81272\tTest-rmse:4.24085\n","[4]\tTrain-rmse:3.73589\tTest-rmse:4.18951\n","[5]\tTrain-rmse:3.67247\tTest-rmse:4.17845\n","[6]\tTrain-rmse:3.60967\tTest-rmse:4.14691\n","[7]\tTrain-rmse:3.55478\tTest-rmse:4.13968\n","[8]\tTrain-rmse:3.49936\tTest-rmse:4.10870\n","[9]\tTrain-rmse:3.45848\tTest-rmse:4.10342\n","[10]\tTrain-rmse:3.41396\tTest-rmse:4.09972\n","[11]\tTrain-rmse:3.37882\tTest-rmse:4.09336\n","[12]\tTrain-rmse:3.34104\tTest-rmse:4.09604\n","[13]\tTrain-rmse:3.30690\tTest-rmse:4.08069\n","[14]\tTrain-rmse:3.27626\tTest-rmse:4.08811\n","[15]\tTrain-rmse:3.23853\tTest-rmse:4.09677\n"]},{"output_type":"display_data","data":{"text/plain":["       upper       med     lower       true                          standard  \\\n","0  13.614499  9.403683  3.734893   8.811765  [3.7348926, 9.403683, 13.614499]   \n","1  12.980460  8.813925  2.886209   5.529412    [2.886209, 8.813925, 12.98046]   \n","2  12.098707  9.385679  3.635317  12.900001  [3.6353166, 9.385679, 12.098707]   \n","3  12.401984  7.868732  4.945590  13.017647   [4.94559, 7.8687325, 12.401984]   \n","4  13.117706  7.739063  4.176102   5.653333  [4.176102, 7.7390633, 13.117706]   \n","\n","                 player  \n","0  jaxon-smith-njigba-1  \n","1    quentin-johnston-1  \n","2         zay-flowers-1  \n","3      jordan-addison-1  \n","4      jonathan-mingo-1  "],"text/html":["\n","  <div id=\"df-28e4338b-b2d8-456b-8974-5eb732f98818\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>upper</th>\n","      <th>med</th>\n","      <th>lower</th>\n","      <th>true</th>\n","      <th>standard</th>\n","      <th>player</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>13.614499</td>\n","      <td>9.403683</td>\n","      <td>3.734893</td>\n","      <td>8.811765</td>\n","      <td>[3.7348926, 9.403683, 13.614499]</td>\n","      <td>jaxon-smith-njigba-1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>12.980460</td>\n","      <td>8.813925</td>\n","      <td>2.886209</td>\n","      <td>5.529412</td>\n","      <td>[2.886209, 8.813925, 12.98046]</td>\n","      <td>quentin-johnston-1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>12.098707</td>\n","      <td>9.385679</td>\n","      <td>3.635317</td>\n","      <td>12.900001</td>\n","      <td>[3.6353166, 9.385679, 12.098707]</td>\n","      <td>zay-flowers-1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>12.401984</td>\n","      <td>7.868732</td>\n","      <td>4.945590</td>\n","      <td>13.017647</td>\n","      <td>[4.94559, 7.8687325, 12.401984]</td>\n","      <td>jordan-addison-1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>13.117706</td>\n","      <td>7.739063</td>\n","      <td>4.176102</td>\n","      <td>5.653333</td>\n","      <td>[4.176102, 7.7390633, 13.117706]</td>\n","      <td>jonathan-mingo-1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-28e4338b-b2d8-456b-8974-5eb732f98818')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-28e4338b-b2d8-456b-8974-5eb732f98818 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-28e4338b-b2d8-456b-8974-5eb732f98818');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-6e09e7f0-794a-4010-9483-7febfa6e889a\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6e09e7f0-794a-4010-9483-7febfa6e889a')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-6e09e7f0-794a-4010-9483-7febfa6e889a button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display(zipped_data\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"upper\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          12.980460166931152,\n          13.117706298828125,\n          12.09870719909668\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"med\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          8.813924789428711,\n          7.739063262939453,\n          9.385679244995117\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lower\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2.886209011077881,\n          4.176102161407471,\n          3.6353166103363037\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"true\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.690043343596222,\n        \"min\": 5.529411764705882,\n        \"max\": 13.01764705882353,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          5.529411764705882,\n          5.653333333333333,\n          12.900000625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"standard\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"player\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"quentin-johnston-1\",\n          \"jonathan-mingo-1\",\n          \"zay-flowers-1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"markdown","source":["## Light GBM"],"metadata":{"id":"8-oaWSAjR_-Q"}},{"cell_type":"markdown","source":["#### Standard"],"metadata":{"id":"kjUg7z9bY3fi"}},{"cell_type":"code","source":["# Define feature columns and target\n","features = [\n","    'pick', 'age', 'htInches', 'wt',\n","    'passAttempts', 'passYards', 'passTDs', 'passAirYds',\n","    'teamTotRec', 'teamTotYds', 'teamTotTD',\n","    'teamMaxRec', 'teamMaxYds', 'teamMaxTD'\n","]\n","target = 'pprPointsPerWeek'\n","\n","# Split into dependent and independent variables\n","X = dfWr[features]\n","y = dfWr[target]\n","\n","# Create a boolean mask to identify 2023 and 2024 data for testing\n","test_mask = dfWr['season'].isin([2021,2022,2023])\n","\n","# Split the data into training and testing sets based on the year\n","X_train = X[~test_mask]\n","X_test = X[test_mask]\n","y_train = y[~test_mask]\n","y_test = y[test_mask]\n","\n","# Create LightGBM dataset\n","train_data = lgb.Dataset(X_train, label=y_train)\n","test_data = lgb.Dataset(X_test, label=y_test)\n","\n","# Set up LightGBM parameters\n","params = {\n","    'objective': 'regression',\n","    'metric': 'rmse',\n","    'boosting_type': 'gbdt',\n","    'learning_rate': 0.01,\n","    'num_leaves': 10,\n","    'verbose': -1\n","}\n","\n","# Train model\n","model = lgb.train(params, train_data, valid_sets=[test_data])\n","\n","# Predict on test set\n","y_pred = model.predict(X_test, num_iteration=model.best_iteration)\n","\n","# Evaluate\n","r2_lgb = r2_score(y_test, y_pred)\n","rmse = np.sqrt(np.mean((y_test - y_pred)**2))\n","print(f\"r-squared: {r2_lgb:.2f}\")\n","print(f\"RMSE: {rmse:.2f}\")\n","\n","zipped_data = pd.DataFrame(list(zip(y_pred, y_test, dfWr['cfb_player_id'][test_mask])), columns = ('predicted','true','player'))\n","display(zipped_data)\n","\n","# Create a TreeExplainer\n","explainer = shap.TreeExplainer(model)\n","\n","# Compute SHAP values\n","shap_values = explainer.shap_values(X_test)\n","\n","shap_values = explainer.shap_values(X_test)\n","shap.summary_plot(shap_values, X_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"r-V2XQIRR_eT","executionInfo":{"status":"ok","timestamp":1747084951036,"user_tz":300,"elapsed":3042,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"outputId":"8cc49f86-b095-43a3-eed5-9a30eed64eb4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["r-squared: 0.18\n","RMSE: 3.92\n"]},{"output_type":"display_data","data":{"text/plain":["    predicted       true                  player\n","0    9.006492  17.917647          jamarr-chase-1\n","1    7.344340   9.151111        kadarius-toney-1\n","2    8.660217   8.625000        rashod-bateman-1\n","3    8.473843   7.935714         rondale-moore-1\n","4    6.109447   3.537500       dwayne-eskridge-1\n","5    6.482084   2.733333   terrace-marshall-jr-1\n","6    5.813006   3.122222           dyami-brown-1\n","7    5.912012   2.400000         amari-rodgers-1\n","8    5.404277   5.971429          nico-collins-1\n","9    6.114776   2.783333      anthony-schwartz-1\n","10   6.029599   5.300000       dez-fitzpatrick-1\n","11   5.961304  14.206250      amon-ra-st-brown-1\n","12   5.510673   1.628571         jaelon-darden-1\n","13   5.528048   1.075000         tylan-wallace-1\n","14   5.663010   9.533333  ihmir-smith-marsette-1\n","15   5.418172   1.200000           frank-darby-1\n","16   5.044754   0.160000          racey-mcmath-1\n","17   5.276642   4.400000         seth-williams-1\n","18   5.028775   1.433333          dazz-newsome-1\n","19   5.005475   3.471429         ben-skowronek-1\n","20   7.775896  10.505882          drake-london-1\n","21   7.530907  12.688235        garrett-wilson-2\n","22   8.540427  13.213333           chris-olave-1\n","23   9.511575   2.516667      jameson-williams-1\n","24   9.185635  10.883333          jahan-dotson-1\n","25   8.109814   8.009091         treylon-burks-1\n","26   7.100071   8.600000      wandale-robinson-1\n","27   7.524263   5.525000       tyquan-thornton-1\n","28   7.523643   9.794118        george-pickens-1\n","29   8.501307   7.018750           alec-pierce-2\n","30   7.758358   3.528571            skyy-moore-1\n","31   7.020230   4.222222        velus-jones-jr-1\n","32   6.029569   1.600000         jalen-tolbert-1\n","33   7.398324   3.242857            david-bell-6\n","34   5.868744   0.580000            danny-gray-1\n","35   5.190837   1.300000         erik-ezukanma-1\n","36   5.588307   7.815385           romeo-doubs-1\n","37   5.322887   3.410000         khalil-shakir-1\n","38   5.819197   3.950000          kyle-philips-4\n","39   5.322887   6.580000          jalen-nailor-1\n","40   8.901832   8.811765    jaxon-smith-njigba-1\n","41   7.665338   5.529412      quentin-johnston-1\n","42   7.612841  12.900001           zay-flowers-1\n","43   9.451480  13.017647        jordan-addison-1\n","44   8.367276   5.653333        jonathan-mingo-1\n","45   6.770047  13.575000           jayden-reed-1\n","46   6.880518  13.281250           rashee-rice-1\n","47   7.431855   4.980000           marvin-mims-1\n","48   7.267825  16.500000        nathaniel-dell-1\n","49   7.141707   4.638462           jalin-hyatt-1\n","50   6.753291   4.018182        cedric-tillman-1\n","51   5.689497   9.241176            josh-downs-2\n","52   6.466247   8.807692        michael-wilson-3\n","53   5.905656   5.523077            tre-tucker-1\n","54   5.983860   2.692857          derius-davis-1\n","55   5.693411   4.140000         charlie-jones-7\n","56   5.512439   2.761538           tyler-scott-3\n","57   5.816484   7.984000      dontayvion-wicks-1\n","58   5.041105  17.558824            puka-nacua-1\n","59   5.762312   6.533333     parker-washington-1\n","60   5.647601   1.300000        kayshon-boutte-1\n","61   5.341116   5.629412           trey-palmer-1\n","62   5.453475   7.575000              at-perry-1\n","63   5.322887   4.033333        elijah-higgins-1\n","64   5.145878   1.990909     xavier-hutchinson-1\n","65   5.473514   7.657143       demario-douglas-1\n","66   4.965145   0.600000         antoine-green-1\n","67   5.490598   4.133334          jalen-brooks-2\n","68   4.722879   3.850000           ronnie-bell-3"],"text/html":["\n","  <div id=\"df-5eda261c-2d05-44ef-bb7a-456d91e9c733\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>predicted</th>\n","      <th>true</th>\n","      <th>player</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>9.006492</td>\n","      <td>17.917647</td>\n","      <td>jamarr-chase-1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>7.344340</td>\n","      <td>9.151111</td>\n","      <td>kadarius-toney-1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>8.660217</td>\n","      <td>8.625000</td>\n","      <td>rashod-bateman-1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>8.473843</td>\n","      <td>7.935714</td>\n","      <td>rondale-moore-1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>6.109447</td>\n","      <td>3.537500</td>\n","      <td>dwayne-eskridge-1</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>6.482084</td>\n","      <td>2.733333</td>\n","      <td>terrace-marshall-jr-1</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>5.813006</td>\n","      <td>3.122222</td>\n","      <td>dyami-brown-1</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>5.912012</td>\n","      <td>2.400000</td>\n","      <td>amari-rodgers-1</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>5.404277</td>\n","      <td>5.971429</td>\n","      <td>nico-collins-1</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>6.114776</td>\n","      <td>2.783333</td>\n","      <td>anthony-schwartz-1</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>6.029599</td>\n","      <td>5.300000</td>\n","      <td>dez-fitzpatrick-1</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>5.961304</td>\n","      <td>14.206250</td>\n","      <td>amon-ra-st-brown-1</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>5.510673</td>\n","      <td>1.628571</td>\n","      <td>jaelon-darden-1</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>5.528048</td>\n","      <td>1.075000</td>\n","      <td>tylan-wallace-1</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>5.663010</td>\n","      <td>9.533333</td>\n","      <td>ihmir-smith-marsette-1</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>5.418172</td>\n","      <td>1.200000</td>\n","      <td>frank-darby-1</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>5.044754</td>\n","      <td>0.160000</td>\n","      <td>racey-mcmath-1</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>5.276642</td>\n","      <td>4.400000</td>\n","      <td>seth-williams-1</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>5.028775</td>\n","      <td>1.433333</td>\n","      <td>dazz-newsome-1</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>5.005475</td>\n","      <td>3.471429</td>\n","      <td>ben-skowronek-1</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>7.775896</td>\n","      <td>10.505882</td>\n","      <td>drake-london-1</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>7.530907</td>\n","      <td>12.688235</td>\n","      <td>garrett-wilson-2</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>8.540427</td>\n","      <td>13.213333</td>\n","      <td>chris-olave-1</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>9.511575</td>\n","      <td>2.516667</td>\n","      <td>jameson-williams-1</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>9.185635</td>\n","      <td>10.883333</td>\n","      <td>jahan-dotson-1</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>8.109814</td>\n","      <td>8.009091</td>\n","      <td>treylon-burks-1</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>7.100071</td>\n","      <td>8.600000</td>\n","      <td>wandale-robinson-1</td>\n","    </tr>\n","    <tr>\n","      <th>27</th>\n","      <td>7.524263</td>\n","      <td>5.525000</td>\n","      <td>tyquan-thornton-1</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>7.523643</td>\n","      <td>9.794118</td>\n","      <td>george-pickens-1</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>8.501307</td>\n","      <td>7.018750</td>\n","      <td>alec-pierce-2</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>7.758358</td>\n","      <td>3.528571</td>\n","      <td>skyy-moore-1</td>\n","    </tr>\n","    <tr>\n","      <th>31</th>\n","      <td>7.020230</td>\n","      <td>4.222222</td>\n","      <td>velus-jones-jr-1</td>\n","    </tr>\n","    <tr>\n","      <th>32</th>\n","      <td>6.029569</td>\n","      <td>1.600000</td>\n","      <td>jalen-tolbert-1</td>\n","    </tr>\n","    <tr>\n","      <th>33</th>\n","      <td>7.398324</td>\n","      <td>3.242857</td>\n","      <td>david-bell-6</td>\n","    </tr>\n","    <tr>\n","      <th>34</th>\n","      <td>5.868744</td>\n","      <td>0.580000</td>\n","      <td>danny-gray-1</td>\n","    </tr>\n","    <tr>\n","      <th>35</th>\n","      <td>5.190837</td>\n","      <td>1.300000</td>\n","      <td>erik-ezukanma-1</td>\n","    </tr>\n","    <tr>\n","      <th>36</th>\n","      <td>5.588307</td>\n","      <td>7.815385</td>\n","      <td>romeo-doubs-1</td>\n","    </tr>\n","    <tr>\n","      <th>37</th>\n","      <td>5.322887</td>\n","      <td>3.410000</td>\n","      <td>khalil-shakir-1</td>\n","    </tr>\n","    <tr>\n","      <th>38</th>\n","      <td>5.819197</td>\n","      <td>3.950000</td>\n","      <td>kyle-philips-4</td>\n","    </tr>\n","    <tr>\n","      <th>39</th>\n","      <td>5.322887</td>\n","      <td>6.580000</td>\n","      <td>jalen-nailor-1</td>\n","    </tr>\n","    <tr>\n","      <th>40</th>\n","      <td>8.901832</td>\n","      <td>8.811765</td>\n","      <td>jaxon-smith-njigba-1</td>\n","    </tr>\n","    <tr>\n","      <th>41</th>\n","      <td>7.665338</td>\n","      <td>5.529412</td>\n","      <td>quentin-johnston-1</td>\n","    </tr>\n","    <tr>\n","      <th>42</th>\n","      <td>7.612841</td>\n","      <td>12.900001</td>\n","      <td>zay-flowers-1</td>\n","    </tr>\n","    <tr>\n","      <th>43</th>\n","      <td>9.451480</td>\n","      <td>13.017647</td>\n","      <td>jordan-addison-1</td>\n","    </tr>\n","    <tr>\n","      <th>44</th>\n","      <td>8.367276</td>\n","      <td>5.653333</td>\n","      <td>jonathan-mingo-1</td>\n","    </tr>\n","    <tr>\n","      <th>45</th>\n","      <td>6.770047</td>\n","      <td>13.575000</td>\n","      <td>jayden-reed-1</td>\n","    </tr>\n","    <tr>\n","      <th>46</th>\n","      <td>6.880518</td>\n","      <td>13.281250</td>\n","      <td>rashee-rice-1</td>\n","    </tr>\n","    <tr>\n","      <th>47</th>\n","      <td>7.431855</td>\n","      <td>4.980000</td>\n","      <td>marvin-mims-1</td>\n","    </tr>\n","    <tr>\n","      <th>48</th>\n","      <td>7.267825</td>\n","      <td>16.500000</td>\n","      <td>nathaniel-dell-1</td>\n","    </tr>\n","    <tr>\n","      <th>49</th>\n","      <td>7.141707</td>\n","      <td>4.638462</td>\n","      <td>jalin-hyatt-1</td>\n","    </tr>\n","    <tr>\n","      <th>50</th>\n","      <td>6.753291</td>\n","      <td>4.018182</td>\n","      <td>cedric-tillman-1</td>\n","    </tr>\n","    <tr>\n","      <th>51</th>\n","      <td>5.689497</td>\n","      <td>9.241176</td>\n","      <td>josh-downs-2</td>\n","    </tr>\n","    <tr>\n","      <th>52</th>\n","      <td>6.466247</td>\n","      <td>8.807692</td>\n","      <td>michael-wilson-3</td>\n","    </tr>\n","    <tr>\n","      <th>53</th>\n","      <td>5.905656</td>\n","      <td>5.523077</td>\n","      <td>tre-tucker-1</td>\n","    </tr>\n","    <tr>\n","      <th>54</th>\n","      <td>5.983860</td>\n","      <td>2.692857</td>\n","      <td>derius-davis-1</td>\n","    </tr>\n","    <tr>\n","      <th>55</th>\n","      <td>5.693411</td>\n","      <td>4.140000</td>\n","      <td>charlie-jones-7</td>\n","    </tr>\n","    <tr>\n","      <th>56</th>\n","      <td>5.512439</td>\n","      <td>2.761538</td>\n","      <td>tyler-scott-3</td>\n","    </tr>\n","    <tr>\n","      <th>57</th>\n","      <td>5.816484</td>\n","      <td>7.984000</td>\n","      <td>dontayvion-wicks-1</td>\n","    </tr>\n","    <tr>\n","      <th>58</th>\n","      <td>5.041105</td>\n","      <td>17.558824</td>\n","      <td>puka-nacua-1</td>\n","    </tr>\n","    <tr>\n","      <th>59</th>\n","      <td>5.762312</td>\n","      <td>6.533333</td>\n","      <td>parker-washington-1</td>\n","    </tr>\n","    <tr>\n","      <th>60</th>\n","      <td>5.647601</td>\n","      <td>1.300000</td>\n","      <td>kayshon-boutte-1</td>\n","    </tr>\n","    <tr>\n","      <th>61</th>\n","      <td>5.341116</td>\n","      <td>5.629412</td>\n","      <td>trey-palmer-1</td>\n","    </tr>\n","    <tr>\n","      <th>62</th>\n","      <td>5.453475</td>\n","      <td>7.575000</td>\n","      <td>at-perry-1</td>\n","    </tr>\n","    <tr>\n","      <th>63</th>\n","      <td>5.322887</td>\n","      <td>4.033333</td>\n","      <td>elijah-higgins-1</td>\n","    </tr>\n","    <tr>\n","      <th>64</th>\n","      <td>5.145878</td>\n","      <td>1.990909</td>\n","      <td>xavier-hutchinson-1</td>\n","    </tr>\n","    <tr>\n","      <th>65</th>\n","      <td>5.473514</td>\n","      <td>7.657143</td>\n","      <td>demario-douglas-1</td>\n","    </tr>\n","    <tr>\n","      <th>66</th>\n","      <td>4.965145</td>\n","      <td>0.600000</td>\n","      <td>antoine-green-1</td>\n","    </tr>\n","    <tr>\n","      <th>67</th>\n","      <td>5.490598</td>\n","      <td>4.133334</td>\n","      <td>jalen-brooks-2</td>\n","    </tr>\n","    <tr>\n","      <th>68</th>\n","      <td>4.722879</td>\n","      <td>3.850000</td>\n","      <td>ronnie-bell-3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5eda261c-2d05-44ef-bb7a-456d91e9c733')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5eda261c-2d05-44ef-bb7a-456d91e9c733 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5eda261c-2d05-44ef-bb7a-456d91e9c733');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-4422c51c-3146-4ffa-b676-73b5fa5460b3\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4422c51c-3146-4ffa-b676-73b5fa5460b3')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-4422c51c-3146-4ffa-b676-73b5fa5460b3 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_c644879e-bc2f-4580-98c0-bed43b301f75\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('zipped_data')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_c644879e-bc2f-4580-98c0-bed43b301f75 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('zipped_data');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"zipped_data","summary":"{\n  \"name\": \"zipped_data\",\n  \"rows\": 69,\n  \"fields\": [\n    {\n      \"column\": \"predicted\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.2955727256975895,\n        \"min\": 4.722878689677759,\n        \"max\": 9.511575082752113,\n        \"num_unique_values\": 67,\n        \"samples\": [\n          5.588306985543692,\n          5.044754063798479,\n          6.109447179103729\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"true\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.363174604210367,\n        \"min\": 0.15999999,\n        \"max\": 17.91764705882353,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          13.213333333333333,\n          17.91764705882353,\n          4.98\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"player\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 69,\n        \"samples\": [\n          \"chris-olave-1\",\n          \"jamarr-chase-1\",\n          \"marvin-mims-1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x710 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["#### Quantile Regression"],"metadata":{"id":"Q8dXPyVXY6W8"}},{"cell_type":"code","source":["# Define feature columns and target\n","features = [\n","    'pick', 'age', 'htInches', 'wt',\n","    'passAttempts', 'passYards', 'passTDs', 'passAirYds',\n","    'teamTotRec', 'teamTotYds', 'teamTotTD',\n","    'teamMaxRec', 'teamMaxYds', 'teamMaxTD'\n","]\n","target = 'pprPointsPerWeek'\n","\n","# Split into dependent and independent variables\n","X = dfWr[features]\n","y = dfWr[target]\n","\n","# Create a boolean mask to identify 2023 and 2024 data for testing\n","test_mask = dfWr['season'].isin([2021,2022,2023])\n","\n","# Split the data into training and testing sets based on the year\n","X_train = X[~test_mask]\n","X_test = X[test_mask]\n","y_train = y[~test_mask]\n","y_test = y[test_mask]\n","\n","# Create LightGBM dataset\n","train_data = lgb.Dataset(X_train, label=y_train)\n","test_data = lgb.Dataset(X_test, label=y_test)\n","\n","# Quantile levels\n","quantiles = [0.1, 0.5, 0.9]\n","models = {}\n","\n","for q in quantiles:\n","    params = {\n","        'objective': 'quantile',\n","        'alpha': q,\n","        'metric': 'quantile',\n","        'learning_rate': 0.05,\n","        'num_leaves': 31,\n","        'verbose': -1\n","    }\n","\n","    models[q] = lgb.train(\n","        params,\n","        lgb.Dataset(X_train, label=y_train),\n","        num_boost_round=100,\n","        valid_sets=[lgb.Dataset(X_test, label=y_test)]\n","    )"],"metadata":{"id":"wDtSMKvyY8-u"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["preds = {q: models[q].predict(X_test) for q in quantiles}\n","\n","pred_df = pd.DataFrame({\n","    'p10': preds[0.1],\n","    'p50': preds[0.5],\n","    'p90': preds[0.9],\n","    'true': y_test.reset_index(drop=True),\n","    'player': dfWr['cfb_player_id'][test_mask].reset_index(drop=True)\n","})\n","\n","display(pred_df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"yno4an7lZTna","executionInfo":{"status":"ok","timestamp":1747085424438,"user_tz":300,"elapsed":81,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"outputId":"b77036ac-b3cd-40fb-e327-002f58b9a04e"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["         p10        p50        p90       true                  player\n","0   5.430028  11.372669  13.344246  17.917647          jamarr-chase-1\n","1   3.282039   8.275217  11.264234   9.151111        kadarius-toney-1\n","2   2.692096   8.779327  11.871798   8.625000        rashod-bateman-1\n","3   5.304392   8.310055  11.914520   7.935714         rondale-moore-1\n","4   3.035401   6.206902   9.893139   3.537500       dwayne-eskridge-1\n","5   4.189470   5.600552   9.931711   2.733333   terrace-marshall-jr-1\n","6   2.257851   6.039941   9.604217   3.122222           dyami-brown-1\n","7   2.861846   4.873810   9.438075   2.400000         amari-rodgers-1\n","8   2.187807   3.905931   9.854877   5.971429          nico-collins-1\n","9   2.893679   4.458262  10.793064   2.783333      anthony-schwartz-1\n","10  1.975623   4.779189   9.035207   5.300000       dez-fitzpatrick-1\n","11  2.491857   5.127617  10.062276  14.206250      amon-ra-st-brown-1\n","12  1.079338   5.353181   7.890275   1.628571         jaelon-darden-1\n","13  1.260406   3.856743   8.624296   1.075000         tylan-wallace-1\n","14  2.589508   5.047272   9.259497   9.533333  ihmir-smith-marsette-1\n","15  2.640345   4.288457   7.891831   1.200000           frank-darby-1\n","16  0.615370   3.458604   8.243389   0.160000          racey-mcmath-1\n","17  0.379925   4.245337   7.800098   4.400000         seth-williams-1\n","18  2.644787   3.793316   8.610356   1.433333          dazz-newsome-1\n","19  0.449530   3.431449   9.322883   3.471429         ben-skowronek-1\n","20  3.698053   9.631727  12.700686  10.505882          drake-london-1\n","21  3.288021   7.850413  11.604483  12.688235        garrett-wilson-2\n","22  4.449275   8.745807  11.341491  13.213333           chris-olave-1\n","23  4.909830  10.634584  13.298176   2.516667      jameson-williams-1\n","24  4.483345   9.939171  12.090211  10.883333          jahan-dotson-1\n","25  4.465230   9.413033  12.092280   8.009091         treylon-burks-1\n","26  4.654057   7.421115  10.907305   8.600000      wandale-robinson-1\n","27  3.949969   8.129494  12.055235   5.525000       tyquan-thornton-1\n","28  5.328402   8.910610  11.137667   9.794118        george-pickens-1\n","29  6.317544   8.266712  11.811368   7.018750           alec-pierce-2\n","30  3.510532   7.765071  10.356941   3.528571            skyy-moore-1\n","31  3.915892   6.944527  10.200608   4.222222        velus-jones-jr-1\n","32  2.528296   6.598960   9.214330   1.600000         jalen-tolbert-1\n","33  2.761116   7.699635  10.358018   3.242857            david-bell-6\n","34  2.496738   5.630710   9.497232   0.580000            danny-gray-1\n","35  2.510120   4.557018   8.237381   1.300000         erik-ezukanma-1\n","36  1.217555   4.978848   8.729906   7.815385           romeo-doubs-1\n","37  2.395942   3.752375   8.247541   3.410000         khalil-shakir-1\n","38  1.891822   4.013473   8.850083   3.950000          kyle-philips-4\n","39  2.413001   3.639890   8.108196   6.580000          jalen-nailor-1\n","40  3.685274   8.455201  12.390324   8.811765    jaxon-smith-njigba-1\n","41  3.914713   8.040033  12.495824   5.529412      quentin-johnston-1\n","42  3.064491   9.680576  12.478832  12.900001           zay-flowers-1\n","43  4.518016   9.541958  13.051027  13.017647        jordan-addison-1\n","44  4.750751   7.351422  10.861709   5.653333        jonathan-mingo-1\n","45  4.845724   6.759847  11.200877  13.575000           jayden-reed-1\n","46  3.981476   6.496921  10.279943  13.281250           rashee-rice-1\n","47  2.270760   7.743515  10.808721   4.980000           marvin-mims-1\n","48  4.760425   6.221002  10.421777  16.500000        nathaniel-dell-1\n","49  4.087636   5.532175  10.463920   4.638462           jalin-hyatt-1\n","50  3.728145   4.949925  12.221334   4.018182        cedric-tillman-1\n","51  2.421474   6.612237  10.556190   9.241176            josh-downs-2\n","52  3.528401   5.474535   9.954686   8.807692        michael-wilson-3\n","53  2.158822   5.173244   9.520861   5.523077            tre-tucker-1\n","54  2.008189   6.377972   8.832784   2.692857          derius-davis-1\n","55  2.024923   5.391004   8.549318   4.140000         charlie-jones-7\n","56  1.678805   5.019379   8.813829   2.761538           tyler-scott-3\n","57  1.828483   4.077230   8.488729   7.984000      dontayvion-wicks-1\n","58  1.614503   3.483345   9.264655  17.558824            puka-nacua-1\n","59  1.738923   6.544678  10.314126   6.533333     parker-washington-1\n","60  1.954594   5.128981  10.656463   1.300000        kayshon-boutte-1\n","61  1.899602   5.167285   8.492929   5.629412           trey-palmer-1\n","62  1.606134   5.292381   8.174727   7.575000              at-perry-1\n","63  1.853350   3.233988   9.137728   4.033333        elijah-higgins-1\n","64  2.318427   3.993275   8.573425   1.990909     xavier-hutchinson-1\n","65  2.248329   4.293675  10.059489   7.657143       demario-douglas-1\n","66  1.876980   3.654477   8.398695   0.600000         antoine-green-1\n","67  2.357000   3.777696   8.630855   4.133334          jalen-brooks-2\n","68  1.705756   3.068061   9.068749   3.850000           ronnie-bell-3"],"text/html":["\n","  <div id=\"df-cda36a07-0361-4635-85e9-d72896850a8c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>p10</th>\n","      <th>p50</th>\n","      <th>p90</th>\n","      <th>true</th>\n","      <th>player</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.430028</td>\n","      <td>11.372669</td>\n","      <td>13.344246</td>\n","      <td>17.917647</td>\n","      <td>jamarr-chase-1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>3.282039</td>\n","      <td>8.275217</td>\n","      <td>11.264234</td>\n","      <td>9.151111</td>\n","      <td>kadarius-toney-1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2.692096</td>\n","      <td>8.779327</td>\n","      <td>11.871798</td>\n","      <td>8.625000</td>\n","      <td>rashod-bateman-1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>5.304392</td>\n","      <td>8.310055</td>\n","      <td>11.914520</td>\n","      <td>7.935714</td>\n","      <td>rondale-moore-1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3.035401</td>\n","      <td>6.206902</td>\n","      <td>9.893139</td>\n","      <td>3.537500</td>\n","      <td>dwayne-eskridge-1</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>4.189470</td>\n","      <td>5.600552</td>\n","      <td>9.931711</td>\n","      <td>2.733333</td>\n","      <td>terrace-marshall-jr-1</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>2.257851</td>\n","      <td>6.039941</td>\n","      <td>9.604217</td>\n","      <td>3.122222</td>\n","      <td>dyami-brown-1</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>2.861846</td>\n","      <td>4.873810</td>\n","      <td>9.438075</td>\n","      <td>2.400000</td>\n","      <td>amari-rodgers-1</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>2.187807</td>\n","      <td>3.905931</td>\n","      <td>9.854877</td>\n","      <td>5.971429</td>\n","      <td>nico-collins-1</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>2.893679</td>\n","      <td>4.458262</td>\n","      <td>10.793064</td>\n","      <td>2.783333</td>\n","      <td>anthony-schwartz-1</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>1.975623</td>\n","      <td>4.779189</td>\n","      <td>9.035207</td>\n","      <td>5.300000</td>\n","      <td>dez-fitzpatrick-1</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>2.491857</td>\n","      <td>5.127617</td>\n","      <td>10.062276</td>\n","      <td>14.206250</td>\n","      <td>amon-ra-st-brown-1</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>1.079338</td>\n","      <td>5.353181</td>\n","      <td>7.890275</td>\n","      <td>1.628571</td>\n","      <td>jaelon-darden-1</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>1.260406</td>\n","      <td>3.856743</td>\n","      <td>8.624296</td>\n","      <td>1.075000</td>\n","      <td>tylan-wallace-1</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>2.589508</td>\n","      <td>5.047272</td>\n","      <td>9.259497</td>\n","      <td>9.533333</td>\n","      <td>ihmir-smith-marsette-1</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>2.640345</td>\n","      <td>4.288457</td>\n","      <td>7.891831</td>\n","      <td>1.200000</td>\n","      <td>frank-darby-1</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>0.615370</td>\n","      <td>3.458604</td>\n","      <td>8.243389</td>\n","      <td>0.160000</td>\n","      <td>racey-mcmath-1</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>0.379925</td>\n","      <td>4.245337</td>\n","      <td>7.800098</td>\n","      <td>4.400000</td>\n","      <td>seth-williams-1</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>2.644787</td>\n","      <td>3.793316</td>\n","      <td>8.610356</td>\n","      <td>1.433333</td>\n","      <td>dazz-newsome-1</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>0.449530</td>\n","      <td>3.431449</td>\n","      <td>9.322883</td>\n","      <td>3.471429</td>\n","      <td>ben-skowronek-1</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>3.698053</td>\n","      <td>9.631727</td>\n","      <td>12.700686</td>\n","      <td>10.505882</td>\n","      <td>drake-london-1</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>3.288021</td>\n","      <td>7.850413</td>\n","      <td>11.604483</td>\n","      <td>12.688235</td>\n","      <td>garrett-wilson-2</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>4.449275</td>\n","      <td>8.745807</td>\n","      <td>11.341491</td>\n","      <td>13.213333</td>\n","      <td>chris-olave-1</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>4.909830</td>\n","      <td>10.634584</td>\n","      <td>13.298176</td>\n","      <td>2.516667</td>\n","      <td>jameson-williams-1</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>4.483345</td>\n","      <td>9.939171</td>\n","      <td>12.090211</td>\n","      <td>10.883333</td>\n","      <td>jahan-dotson-1</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>4.465230</td>\n","      <td>9.413033</td>\n","      <td>12.092280</td>\n","      <td>8.009091</td>\n","      <td>treylon-burks-1</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>4.654057</td>\n","      <td>7.421115</td>\n","      <td>10.907305</td>\n","      <td>8.600000</td>\n","      <td>wandale-robinson-1</td>\n","    </tr>\n","    <tr>\n","      <th>27</th>\n","      <td>3.949969</td>\n","      <td>8.129494</td>\n","      <td>12.055235</td>\n","      <td>5.525000</td>\n","      <td>tyquan-thornton-1</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>5.328402</td>\n","      <td>8.910610</td>\n","      <td>11.137667</td>\n","      <td>9.794118</td>\n","      <td>george-pickens-1</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>6.317544</td>\n","      <td>8.266712</td>\n","      <td>11.811368</td>\n","      <td>7.018750</td>\n","      <td>alec-pierce-2</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>3.510532</td>\n","      <td>7.765071</td>\n","      <td>10.356941</td>\n","      <td>3.528571</td>\n","      <td>skyy-moore-1</td>\n","    </tr>\n","    <tr>\n","      <th>31</th>\n","      <td>3.915892</td>\n","      <td>6.944527</td>\n","      <td>10.200608</td>\n","      <td>4.222222</td>\n","      <td>velus-jones-jr-1</td>\n","    </tr>\n","    <tr>\n","      <th>32</th>\n","      <td>2.528296</td>\n","      <td>6.598960</td>\n","      <td>9.214330</td>\n","      <td>1.600000</td>\n","      <td>jalen-tolbert-1</td>\n","    </tr>\n","    <tr>\n","      <th>33</th>\n","      <td>2.761116</td>\n","      <td>7.699635</td>\n","      <td>10.358018</td>\n","      <td>3.242857</td>\n","      <td>david-bell-6</td>\n","    </tr>\n","    <tr>\n","      <th>34</th>\n","      <td>2.496738</td>\n","      <td>5.630710</td>\n","      <td>9.497232</td>\n","      <td>0.580000</td>\n","      <td>danny-gray-1</td>\n","    </tr>\n","    <tr>\n","      <th>35</th>\n","      <td>2.510120</td>\n","      <td>4.557018</td>\n","      <td>8.237381</td>\n","      <td>1.300000</td>\n","      <td>erik-ezukanma-1</td>\n","    </tr>\n","    <tr>\n","      <th>36</th>\n","      <td>1.217555</td>\n","      <td>4.978848</td>\n","      <td>8.729906</td>\n","      <td>7.815385</td>\n","      <td>romeo-doubs-1</td>\n","    </tr>\n","    <tr>\n","      <th>37</th>\n","      <td>2.395942</td>\n","      <td>3.752375</td>\n","      <td>8.247541</td>\n","      <td>3.410000</td>\n","      <td>khalil-shakir-1</td>\n","    </tr>\n","    <tr>\n","      <th>38</th>\n","      <td>1.891822</td>\n","      <td>4.013473</td>\n","      <td>8.850083</td>\n","      <td>3.950000</td>\n","      <td>kyle-philips-4</td>\n","    </tr>\n","    <tr>\n","      <th>39</th>\n","      <td>2.413001</td>\n","      <td>3.639890</td>\n","      <td>8.108196</td>\n","      <td>6.580000</td>\n","      <td>jalen-nailor-1</td>\n","    </tr>\n","    <tr>\n","      <th>40</th>\n","      <td>3.685274</td>\n","      <td>8.455201</td>\n","      <td>12.390324</td>\n","      <td>8.811765</td>\n","      <td>jaxon-smith-njigba-1</td>\n","    </tr>\n","    <tr>\n","      <th>41</th>\n","      <td>3.914713</td>\n","      <td>8.040033</td>\n","      <td>12.495824</td>\n","      <td>5.529412</td>\n","      <td>quentin-johnston-1</td>\n","    </tr>\n","    <tr>\n","      <th>42</th>\n","      <td>3.064491</td>\n","      <td>9.680576</td>\n","      <td>12.478832</td>\n","      <td>12.900001</td>\n","      <td>zay-flowers-1</td>\n","    </tr>\n","    <tr>\n","      <th>43</th>\n","      <td>4.518016</td>\n","      <td>9.541958</td>\n","      <td>13.051027</td>\n","      <td>13.017647</td>\n","      <td>jordan-addison-1</td>\n","    </tr>\n","    <tr>\n","      <th>44</th>\n","      <td>4.750751</td>\n","      <td>7.351422</td>\n","      <td>10.861709</td>\n","      <td>5.653333</td>\n","      <td>jonathan-mingo-1</td>\n","    </tr>\n","    <tr>\n","      <th>45</th>\n","      <td>4.845724</td>\n","      <td>6.759847</td>\n","      <td>11.200877</td>\n","      <td>13.575000</td>\n","      <td>jayden-reed-1</td>\n","    </tr>\n","    <tr>\n","      <th>46</th>\n","      <td>3.981476</td>\n","      <td>6.496921</td>\n","      <td>10.279943</td>\n","      <td>13.281250</td>\n","      <td>rashee-rice-1</td>\n","    </tr>\n","    <tr>\n","      <th>47</th>\n","      <td>2.270760</td>\n","      <td>7.743515</td>\n","      <td>10.808721</td>\n","      <td>4.980000</td>\n","      <td>marvin-mims-1</td>\n","    </tr>\n","    <tr>\n","      <th>48</th>\n","      <td>4.760425</td>\n","      <td>6.221002</td>\n","      <td>10.421777</td>\n","      <td>16.500000</td>\n","      <td>nathaniel-dell-1</td>\n","    </tr>\n","    <tr>\n","      <th>49</th>\n","      <td>4.087636</td>\n","      <td>5.532175</td>\n","      <td>10.463920</td>\n","      <td>4.638462</td>\n","      <td>jalin-hyatt-1</td>\n","    </tr>\n","    <tr>\n","      <th>50</th>\n","      <td>3.728145</td>\n","      <td>4.949925</td>\n","      <td>12.221334</td>\n","      <td>4.018182</td>\n","      <td>cedric-tillman-1</td>\n","    </tr>\n","    <tr>\n","      <th>51</th>\n","      <td>2.421474</td>\n","      <td>6.612237</td>\n","      <td>10.556190</td>\n","      <td>9.241176</td>\n","      <td>josh-downs-2</td>\n","    </tr>\n","    <tr>\n","      <th>52</th>\n","      <td>3.528401</td>\n","      <td>5.474535</td>\n","      <td>9.954686</td>\n","      <td>8.807692</td>\n","      <td>michael-wilson-3</td>\n","    </tr>\n","    <tr>\n","      <th>53</th>\n","      <td>2.158822</td>\n","      <td>5.173244</td>\n","      <td>9.520861</td>\n","      <td>5.523077</td>\n","      <td>tre-tucker-1</td>\n","    </tr>\n","    <tr>\n","      <th>54</th>\n","      <td>2.008189</td>\n","      <td>6.377972</td>\n","      <td>8.832784</td>\n","      <td>2.692857</td>\n","      <td>derius-davis-1</td>\n","    </tr>\n","    <tr>\n","      <th>55</th>\n","      <td>2.024923</td>\n","      <td>5.391004</td>\n","      <td>8.549318</td>\n","      <td>4.140000</td>\n","      <td>charlie-jones-7</td>\n","    </tr>\n","    <tr>\n","      <th>56</th>\n","      <td>1.678805</td>\n","      <td>5.019379</td>\n","      <td>8.813829</td>\n","      <td>2.761538</td>\n","      <td>tyler-scott-3</td>\n","    </tr>\n","    <tr>\n","      <th>57</th>\n","      <td>1.828483</td>\n","      <td>4.077230</td>\n","      <td>8.488729</td>\n","      <td>7.984000</td>\n","      <td>dontayvion-wicks-1</td>\n","    </tr>\n","    <tr>\n","      <th>58</th>\n","      <td>1.614503</td>\n","      <td>3.483345</td>\n","      <td>9.264655</td>\n","      <td>17.558824</td>\n","      <td>puka-nacua-1</td>\n","    </tr>\n","    <tr>\n","      <th>59</th>\n","      <td>1.738923</td>\n","      <td>6.544678</td>\n","      <td>10.314126</td>\n","      <td>6.533333</td>\n","      <td>parker-washington-1</td>\n","    </tr>\n","    <tr>\n","      <th>60</th>\n","      <td>1.954594</td>\n","      <td>5.128981</td>\n","      <td>10.656463</td>\n","      <td>1.300000</td>\n","      <td>kayshon-boutte-1</td>\n","    </tr>\n","    <tr>\n","      <th>61</th>\n","      <td>1.899602</td>\n","      <td>5.167285</td>\n","      <td>8.492929</td>\n","      <td>5.629412</td>\n","      <td>trey-palmer-1</td>\n","    </tr>\n","    <tr>\n","      <th>62</th>\n","      <td>1.606134</td>\n","      <td>5.292381</td>\n","      <td>8.174727</td>\n","      <td>7.575000</td>\n","      <td>at-perry-1</td>\n","    </tr>\n","    <tr>\n","      <th>63</th>\n","      <td>1.853350</td>\n","      <td>3.233988</td>\n","      <td>9.137728</td>\n","      <td>4.033333</td>\n","      <td>elijah-higgins-1</td>\n","    </tr>\n","    <tr>\n","      <th>64</th>\n","      <td>2.318427</td>\n","      <td>3.993275</td>\n","      <td>8.573425</td>\n","      <td>1.990909</td>\n","      <td>xavier-hutchinson-1</td>\n","    </tr>\n","    <tr>\n","      <th>65</th>\n","      <td>2.248329</td>\n","      <td>4.293675</td>\n","      <td>10.059489</td>\n","      <td>7.657143</td>\n","      <td>demario-douglas-1</td>\n","    </tr>\n","    <tr>\n","      <th>66</th>\n","      <td>1.876980</td>\n","      <td>3.654477</td>\n","      <td>8.398695</td>\n","      <td>0.600000</td>\n","      <td>antoine-green-1</td>\n","    </tr>\n","    <tr>\n","      <th>67</th>\n","      <td>2.357000</td>\n","      <td>3.777696</td>\n","      <td>8.630855</td>\n","      <td>4.133334</td>\n","      <td>jalen-brooks-2</td>\n","    </tr>\n","    <tr>\n","      <th>68</th>\n","      <td>1.705756</td>\n","      <td>3.068061</td>\n","      <td>9.068749</td>\n","      <td>3.850000</td>\n","      <td>ronnie-bell-3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cda36a07-0361-4635-85e9-d72896850a8c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-cda36a07-0361-4635-85e9-d72896850a8c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-cda36a07-0361-4635-85e9-d72896850a8c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-bf4cb0a1-5eed-4fa2-bf87-3207dab9ad93\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bf4cb0a1-5eed-4fa2-bf87-3207dab9ad93')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-bf4cb0a1-5eed-4fa2-bf87-3207dab9ad93 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_45d848f8-6044-4c7e-beeb-dc1b6f73e342\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('pred_df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_45d848f8-6044-4c7e-beeb-dc1b6f73e342 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('pred_df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"pred_df","summary":"{\n  \"name\": \"pred_df\",\n  \"rows\": 69,\n  \"fields\": [\n    {\n      \"column\": \"p10\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.3010491694220643,\n        \"min\": 0.3799254121498407,\n        \"max\": 6.317543822966323,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          4.449274795177744,\n          5.4300283400972855,\n          2.2707597620459405\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"p50\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.088335879711298,\n        \"min\": 3.0680606073076513,\n        \"max\": 11.372669394995283,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          8.745806610665733,\n          11.372669394995283,\n          7.74351517950617\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"p90\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.5131813432055277,\n        \"min\": 7.800097869850141,\n        \"max\": 13.344245742087388,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          11.341491390686498,\n          13.344245742087388,\n          10.808721442165123\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"true\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.363174604210367,\n        \"min\": 0.15999999,\n        \"max\": 17.91764705882353,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          13.213333333333333,\n          17.91764705882353,\n          4.98\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"player\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 69,\n        \"samples\": [\n          \"chris-olave-1\",\n          \"jamarr-chase-1\",\n          \"marvin-mims-1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"markdown","source":["## NN\n","\n","Insufficient training samples"],"metadata":{"id":"upW7-2-PByNL"}},{"cell_type":"code","source":["# Model Class\n","class RegressionNN(nn.Module):\n","    def __init__(self, input_size):\n","        super(RegressionNN, self).__init__()\n","        self.model = nn.Sequential(\n","            nn.Linear(input_size, 64),\n","            nn.ReLU(),\n","            nn.Linear(64, 32),\n","            nn.ReLU(),\n","            nn.Linear(32, 1)  # Output is a single value for regression\n","        )\n","\n","    def forward(self, x):\n","        return self.model(x)\n"],"metadata":{"id":"GCWBjaXjCDQb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Define features (X) and target (y)\n","features = ['pick', 'age', 'htInches', 'wt','passAttempts','passYards','passTDs','passAirYds', 'teamTotRec', 'teamTotYds', 'teamTotTD', 'teamMaxRec', 'teamMaxYds', 'teamMaxTD']\n","target = 'pprPointsPerWeek'\n","\n","X = dfWr[features].astype(np.float32)\n","y = dfWr[target].astype(np.float32)\n","\n","# Create a boolean mask to identify 2023 and 2024 data for testing\n","test_mask = dfWr['season'].isin([2023])\n","\n","# Split the data into training and testing sets based on the year\n","X_train = X[~test_mask]\n","X_test = X[test_mask]\n","y_train = y[~test_mask]\n","y_test = y[test_mask]\n","\n","# Create dataset and data loader\n","datasetTrain = TensorDataset(torch.tensor(X_train.to_numpy()), torch.tensor(y_train.to_numpy()))\n","train_loader = DataLoader(datasetTrain, batch_size=16, shuffle=True)\n","\n","# Define test dataset\n","datasetTest = TensorDataset(torch.tensor(X_test.to_numpy()), torch.tensor(y_test.to_numpy()))\n","\n","# Example usage\n","model = RegressionNN(input_size=len(features))  # replace with your number of features\n","loss_fn = nn.MSELoss()\n","optimizer = torch.optim.Adam(model.parameters(), lr=0.001)"],"metadata":{"id":"8cqz4bsOB3m7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["epochs = 200\n","\n","for epoch in range(epochs):\n","    model.train()\n","    running_loss = 0.0\n","\n","    for batch_X, batch_y in train_loader:\n","        optimizer.zero_grad()\n","        preds = model(batch_X)\n","        loss = loss_fn(preds, batch_y)\n","        loss.backward()\n","        optimizer.step()\n","        running_loss += loss.item() * batch_X.size(0)  # sum loss over batch\n","\n","    avg_loss = running_loss / len(train_loader.dataset)\n","    if epoch % 10 == 0:\n","      print(f\"Epoch {epoch+1}/{epochs}, Loss: {avg_loss:.4f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0B8Ufz9YCujf","executionInfo":{"status":"ok","timestamp":1747164126817,"user_tz":300,"elapsed":6716,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"outputId":"d20fdbb4-3933-4df4-e194-6fd47c02b21d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/torch/nn/modules/loss.py:610: UserWarning: Using a target size (torch.Size([16])) that is different to the input size (torch.Size([16, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.11/dist-packages/torch/nn/modules/loss.py:610: UserWarning: Using a target size (torch.Size([9])) that is different to the input size (torch.Size([9, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/200, Loss: 490.5517\n","Epoch 11/200, Loss: 29.8065\n","Epoch 21/200, Loss: 24.8347\n","Epoch 31/200, Loss: 21.6153\n","Epoch 41/200, Loss: 22.8715\n","Epoch 51/200, Loss: 21.3265\n","Epoch 61/200, Loss: 20.8700\n","Epoch 71/200, Loss: 20.8574\n","Epoch 81/200, Loss: 23.4128\n","Epoch 91/200, Loss: 21.2750\n","Epoch 101/200, Loss: 23.2826\n","Epoch 111/200, Loss: 19.9988\n","Epoch 121/200, Loss: 22.5453\n","Epoch 131/200, Loss: 20.2497\n","Epoch 141/200, Loss: 21.0077\n","Epoch 151/200, Loss: 18.9107\n","Epoch 161/200, Loss: 19.5268\n","Epoch 171/200, Loss: 19.3686\n","Epoch 181/200, Loss: 21.1999\n","Epoch 191/200, Loss: 18.3097\n"]}]},{"cell_type":"code","source":["# prompt: compute predictions on the model using the test dataset\n","\n","import pandas as pd\n","import numpy as np\n","# Make predictions on the test set\n","model.eval()  # Set the model to evaluation mode\n","with torch.no_grad():\n","    test_preds = model(torch.tensor(X_test.to_numpy()))\n","    test_preds = test_preds.numpy().flatten()\n","\n","# Evaluate the model (example: using R-squared)\n","r2_nn = r2_score(y_test, test_preds)\n","rmse = np.sqrt(np.mean((y_test - test_preds)**2))\n","print(f\"R-squared (NN): {r2_nn}\")\n","print(f\"RMSE (NN): {rmse}\")\n","\n","zipped_data_nn = pd.DataFrame(list(zip(test_preds, y_test, dfWr['cfb_player_id'][test_mask])), columns = ('predicted','true','player'))\n","display(zipped_data_nn)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":994},"id":"99v6OM_QE1y2","executionInfo":{"status":"ok","timestamp":1747164129396,"user_tz":300,"elapsed":27,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"outputId":"1c7d9950-5091-4396-b1bf-351ebe362830"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["R-squared (NN): -0.16822731494903564\n","RMSE (NN): 4.773319721221924\n"]},{"output_type":"display_data","data":{"text/plain":["    predicted       true                player\n","0    5.392859   8.811765  jaxon-smith-njigba-1\n","1    7.136298   5.529412    quentin-johnston-1\n","2    5.478370  12.900001         zay-flowers-1\n","3    5.812568  13.017647      jordan-addison-1\n","4    1.858840   5.653333      jonathan-mingo-1\n","5    5.968459  13.575000         jayden-reed-1\n","6    5.849586  13.281250         rashee-rice-1\n","7    6.236945   4.980000         marvin-mims-1\n","8    5.607574  16.500000      nathaniel-dell-1\n","9    5.070472   4.638462         jalin-hyatt-1\n","10   5.979896   4.018182      cedric-tillman-1\n","11   4.570052   9.241177          josh-downs-2\n","12   5.577132   8.807693      michael-wilson-3\n","13   6.247687   5.523077          tre-tucker-1\n","14   6.559730   2.692857        derius-davis-1\n","15   7.615394   4.140000       charlie-jones-7\n","16   5.094314   2.761539         tyler-scott-3\n","17   6.156226   7.984000    dontayvion-wicks-1\n","18   5.926490  17.558823          puka-nacua-1\n","19   5.268241   6.533333   parker-washington-1\n","20   5.455680   1.300000      kayshon-boutte-1\n","21   5.778907   5.629412         trey-palmer-1\n","22   5.986014   7.575000            at-perry-1\n","23   6.727347   4.033333      elijah-higgins-1\n","24   5.891150   1.990909   xavier-hutchinson-1\n","25   5.381446   7.657143     demario-douglas-1\n","26   5.996207   0.600000       antoine-green-1\n","27   5.473639   4.133334        jalen-brooks-2\n","28   5.813125   3.850000         ronnie-bell-3"],"text/html":["\n","  <div id=\"df-8225993d-678e-4bc0-be75-0ba543eb6ef6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>predicted</th>\n","      <th>true</th>\n","      <th>player</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.392859</td>\n","      <td>8.811765</td>\n","      <td>jaxon-smith-njigba-1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>7.136298</td>\n","      <td>5.529412</td>\n","      <td>quentin-johnston-1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>5.478370</td>\n","      <td>12.900001</td>\n","      <td>zay-flowers-1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>5.812568</td>\n","      <td>13.017647</td>\n","      <td>jordan-addison-1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1.858840</td>\n","      <td>5.653333</td>\n","      <td>jonathan-mingo-1</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>5.968459</td>\n","      <td>13.575000</td>\n","      <td>jayden-reed-1</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>5.849586</td>\n","      <td>13.281250</td>\n","      <td>rashee-rice-1</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>6.236945</td>\n","      <td>4.980000</td>\n","      <td>marvin-mims-1</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>5.607574</td>\n","      <td>16.500000</td>\n","      <td>nathaniel-dell-1</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>5.070472</td>\n","      <td>4.638462</td>\n","      <td>jalin-hyatt-1</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>5.979896</td>\n","      <td>4.018182</td>\n","      <td>cedric-tillman-1</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>4.570052</td>\n","      <td>9.241177</td>\n","      <td>josh-downs-2</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>5.577132</td>\n","      <td>8.807693</td>\n","      <td>michael-wilson-3</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>6.247687</td>\n","      <td>5.523077</td>\n","      <td>tre-tucker-1</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>6.559730</td>\n","      <td>2.692857</td>\n","      <td>derius-davis-1</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>7.615394</td>\n","      <td>4.140000</td>\n","      <td>charlie-jones-7</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>5.094314</td>\n","      <td>2.761539</td>\n","      <td>tyler-scott-3</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>6.156226</td>\n","      <td>7.984000</td>\n","      <td>dontayvion-wicks-1</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>5.926490</td>\n","      <td>17.558823</td>\n","      <td>puka-nacua-1</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>5.268241</td>\n","      <td>6.533333</td>\n","      <td>parker-washington-1</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>5.455680</td>\n","      <td>1.300000</td>\n","      <td>kayshon-boutte-1</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>5.778907</td>\n","      <td>5.629412</td>\n","      <td>trey-palmer-1</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>5.986014</td>\n","      <td>7.575000</td>\n","      <td>at-perry-1</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>6.727347</td>\n","      <td>4.033333</td>\n","      <td>elijah-higgins-1</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>5.891150</td>\n","      <td>1.990909</td>\n","      <td>xavier-hutchinson-1</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>5.381446</td>\n","      <td>7.657143</td>\n","      <td>demario-douglas-1</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>5.996207</td>\n","      <td>0.600000</td>\n","      <td>antoine-green-1</td>\n","    </tr>\n","    <tr>\n","      <th>27</th>\n","      <td>5.473639</td>\n","      <td>4.133334</td>\n","      <td>jalen-brooks-2</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>5.813125</td>\n","      <td>3.850000</td>\n","      <td>ronnie-bell-3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8225993d-678e-4bc0-be75-0ba543eb6ef6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8225993d-678e-4bc0-be75-0ba543eb6ef6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8225993d-678e-4bc0-be75-0ba543eb6ef6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-4710a471-61df-4342-b159-9da4b086d232\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4710a471-61df-4342-b159-9da4b086d232')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-4710a471-61df-4342-b159-9da4b086d232 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_5f44aeb6-8a1d-406b-a1b5-057167781a4c\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('zipped_data_nn')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_5f44aeb6-8a1d-406b-a1b5-057167781a4c button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('zipped_data_nn');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"zipped_data_nn","summary":"{\n  \"name\": \"zipped_data_nn\",\n  \"rows\": 29,\n  \"fields\": [\n    {\n      \"column\": \"predicted\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 29,\n        \"samples\": [\n          5.473639488220215,\n          5.094313621520996,\n          5.577132225036621\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"true\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.494452724086624,\n        \"min\": 0.6000000238418579,\n        \"max\": 17.558822631835938,\n        \"num_unique_values\": 29,\n        \"samples\": [\n          4.133333683013916,\n          2.761538505554199,\n          8.807692527770996\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"player\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 29,\n        \"samples\": [\n          \"jalen-brooks-2\",\n          \"tyler-scott-3\",\n          \"michael-wilson-3\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"markdown","source":["## RB Dataframe"],"metadata":{"id":"sAnqSfh9CkG8"}},{"cell_type":"code","source":["dfRb = pd.read_csv(r'rbDraftDfProd.csv')\n","\n","# Apply Cleaning Function\n","dfRb = clean_data(dfRb)"],"metadata":{"id":"pb_qP4kmCm6V"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Define features (X) and target (y)\n","features = ['pick', 'age', 'htInches', 'wt','passAttempts','passYards','passTDs','passAirYds', 'teamTotRec', 'teamTotRecYds', 'teamTotRecTD', 'teamMaxRec', 'teamMaxRecYds', 'teamMaxRecTD','teamTotCar','teamTotRushYds','teamTotRushTD','teamMaxCar','teamMaxRushYds','teamMaxRushTD']\n","target = 'pprPointsPerWeek'\n","\n","X = dfRb[features]\n","y = dfRb[target]\n","\n","# Create a boolean mask to identify 2023 and 2024 data for testing\n","test_mask = dfRb['season'].isin([2020,2021,2022,2023])\n","\n","# Split the data into training and testing sets based on the year\n","X_train = X[~test_mask]\n","X_test = X[test_mask]\n","y_train = y[~test_mask]\n","y_test = y[test_mask]\n","\n","\n","# Scale the data\n","scaler = StandardScaler()\n","X_train_scaled = scaler.fit_transform(X_train)\n","X_test_scaled = scaler.transform(X_test)\n","\n","# Initialize and train the linear regression model\n","model = LinearRegression()\n","model.fit(X_train_scaled, y_train)\n","\n","# Make predictions on the test set\n","y_pred = model.predict(X_test_scaled)\n","\n","# Evaluate the model (example: using R-squared)\n","r2 = r2_score(y_test, y_pred)\n","print(f\"R-squared: {r2}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"elYrbEPFCtsq","executionInfo":{"status":"ok","timestamp":1747013423770,"user_tz":300,"elapsed":16,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"outputId":"673508b2-cb11-4f5a-d144-9571865cf467"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["R-squared: 0.2833430922649598\n"]}]},{"cell_type":"code","source":["# prompt: zip y_pred and y_test and the corresponding cfb_player_id together\n","\n","# Assuming y_pred, y_test, and cfb_player_id are already defined as in the previous code.\n","# If cfb_player_id is not available in the current dataframe or as a separate variable,\n","# you'll need to provide it.  For example:\n","# cfb_player_id = dfWr['cfb_player_id'][test_mask]  # Replace 'cfb_player_id' with the correct column name\n","\n","\n","zipped_data = pd.DataFrame(list(zip(y_pred, y_test, dfRb['cfb_player_id'][test_mask],dfRb['season'][test_mask])), columns = ('predicted','true','player','season'))\n","display(zipped_data)\n","\n","#Example usage\n","#for pred, actual, player_id in zipped_data:\n","#    print(f\"Player ID: {player_id}, Predicted: {pred}, Actual: {actual}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"6stS5ETJC_Mn","executionInfo":{"status":"ok","timestamp":1747013424285,"user_tz":300,"elapsed":46,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"outputId":"1a9c386e-dec3-49f4-e50e-07d0f38461b6"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["    predicted       true                   player  season\n","0   11.569997  13.538462  clyde-edwards-helaire-1    2020\n","1   10.626041  14.600000           dandre-swift-1    2020\n","2    8.364744  16.853333        jonathan-taylor-1    2020\n","3   11.490189   9.254545              cam-akers-1    2020\n","4    5.268764  11.233333             jk-dobbins-1    2020\n","5    6.926367   4.477778              aj-dillon-1    2020\n","6    9.287615  14.442857         antonio-gibson-2    2020\n","7    7.448175   3.883333         keshawn-vaughn-1    2020\n","8    7.926946   7.815385              zack-moss-1    2020\n","9    4.518009   4.025000        darrynton-evans-1    2020\n","10   4.078613   6.246154          joshua-kelley-1    2020\n","11   8.143193   5.833333         lamical-perine-1    2020\n","12   5.904579   2.063636      anthony-mcfarland-2    2020\n","13   4.927639   7.112500          deejay-dallas-1    2020\n","14   2.637402   3.087500          malcolm-perry-1    2020\n","15   8.934583  12.052941       javonte-williams-1    2021\n","16   8.675606   5.660000            trey-sermon-1    2021\n","17   7.003450  11.028571         michael-carter-5    2021\n","18   7.102082   9.575000    rhamondre-stevenson-1    2021\n","19   8.395019   8.600000          chuba-hubbard-1    2021\n","20   4.406042  15.000000        elijah-mitchell-2    2021\n","21   4.983325   1.000000        gary-brightwell-1    2021\n","22   3.667432   5.533333            chris-evans-2    2021\n","23  -1.669625   4.590909        demetric-felton-1    2021\n","24   3.806015   5.635714         khalil-herbert-1    2021\n","25   5.636789   0.250000              jake-funk-1    2021\n","26  -1.535322   0.975000             kylin-hill-1    2021\n","27   1.250280   6.425000       jermar-jefferson-1    2021\n","28   8.760562  16.442857            breece-hall-1    2022\n","29   9.002116  13.500000     kenneth-walker-iii-1    2022\n","30   8.116016   6.606250             james-cook-2    2022\n","31   7.740084   8.818750          rachaad-white-1    2022\n","32   9.861979   1.980000     tyrion-davis-price-1    2022\n","33   7.553333   9.391667      brian-robinson-jr-1    2022\n","34   8.341795  12.800000          dameon-pierce-1    2022\n","35   7.267710   0.636364            zamir-white-1    2022\n","36   4.212579   1.680000         isaiah-spiller-1    2022\n","37   5.446242   3.714286         hassan-haskins-1    2022\n","38   4.570389   9.962500         tyler-allgeier-1    2022\n","39   4.663886   2.040000           snoop-conner-1    2022\n","40   3.902719   0.600000            jerome-ford-1    2022\n","41   6.241191   3.812500         kyren-williams-1    2022\n","42   4.087312   2.000000            ty-chandler-1    2022\n","43   2.449954   2.240000           kevin-harris-5    2022\n","44   6.844215   9.400000            tyler-badie-1    2022\n","45   3.429230   1.810000        keaontay-ingram-1    2022\n","46   3.935250   1.171429          trestan-ebner-1    2022\n","47   3.575646   7.941176          isaih-pacheco-1    2022\n","48   8.092370  14.488235         bijan-robinson-1    2023\n","49  13.203473  16.140000           jahmyr-gibbs-1    2023\n","50   9.299668   6.631250        zach-charbonnet-1    2023\n","51   6.141666   6.185714          kendre-miller-1    2023\n","52   7.303736   9.047059           tyjae-spears-1    2023\n","53   8.979726  17.336364           devon-achane-1    2023\n","54   8.788962   1.907692            tank-bigsby-1    2023\n","55   5.241849   6.806667        roschon-johnson-1    2023\n","56   7.237338   3.050000      israel-abanikanda-1    2023\n","57   6.020411   5.350000            chase-brown-3    2023\n","58   3.158431   2.600000              eric-gray-2    2023\n","59   6.042997   1.700000              evan-hull-2    2023\n","60   1.364301   2.500000           deuce-vaughn-1    2023\n","61   6.508706   0.475000             zach-evans-1    2023"],"text/html":["\n","  <div id=\"df-979d483f-be7b-4e53-910f-1e4d1096df35\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>predicted</th>\n","      <th>true</th>\n","      <th>player</th>\n","      <th>season</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>11.569997</td>\n","      <td>13.538462</td>\n","      <td>clyde-edwards-helaire-1</td>\n","      <td>2020</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>10.626041</td>\n","      <td>14.600000</td>\n","      <td>dandre-swift-1</td>\n","      <td>2020</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>8.364744</td>\n","      <td>16.853333</td>\n","      <td>jonathan-taylor-1</td>\n","      <td>2020</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>11.490189</td>\n","      <td>9.254545</td>\n","      <td>cam-akers-1</td>\n","      <td>2020</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5.268764</td>\n","      <td>11.233333</td>\n","      <td>jk-dobbins-1</td>\n","      <td>2020</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>6.926367</td>\n","      <td>4.477778</td>\n","      <td>aj-dillon-1</td>\n","      <td>2020</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>9.287615</td>\n","      <td>14.442857</td>\n","      <td>antonio-gibson-2</td>\n","      <td>2020</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>7.448175</td>\n","      <td>3.883333</td>\n","      <td>keshawn-vaughn-1</td>\n","      <td>2020</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>7.926946</td>\n","      <td>7.815385</td>\n","      <td>zack-moss-1</td>\n","      <td>2020</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>4.518009</td>\n","      <td>4.025000</td>\n","      <td>darrynton-evans-1</td>\n","      <td>2020</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>4.078613</td>\n","      <td>6.246154</td>\n","      <td>joshua-kelley-1</td>\n","      <td>2020</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>8.143193</td>\n","      <td>5.833333</td>\n","      <td>lamical-perine-1</td>\n","      <td>2020</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>5.904579</td>\n","      <td>2.063636</td>\n","      <td>anthony-mcfarland-2</td>\n","      <td>2020</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>4.927639</td>\n","      <td>7.112500</td>\n","      <td>deejay-dallas-1</td>\n","      <td>2020</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>2.637402</td>\n","      <td>3.087500</td>\n","      <td>malcolm-perry-1</td>\n","      <td>2020</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>8.934583</td>\n","      <td>12.052941</td>\n","      <td>javonte-williams-1</td>\n","      <td>2021</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>8.675606</td>\n","      <td>5.660000</td>\n","      <td>trey-sermon-1</td>\n","      <td>2021</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>7.003450</td>\n","      <td>11.028571</td>\n","      <td>michael-carter-5</td>\n","      <td>2021</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>7.102082</td>\n","      <td>9.575000</td>\n","      <td>rhamondre-stevenson-1</td>\n","      <td>2021</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>8.395019</td>\n","      <td>8.600000</td>\n","      <td>chuba-hubbard-1</td>\n","      <td>2021</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>4.406042</td>\n","      <td>15.000000</td>\n","      <td>elijah-mitchell-2</td>\n","      <td>2021</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>4.983325</td>\n","      <td>1.000000</td>\n","      <td>gary-brightwell-1</td>\n","      <td>2021</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>3.667432</td>\n","      <td>5.533333</td>\n","      <td>chris-evans-2</td>\n","      <td>2021</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>-1.669625</td>\n","      <td>4.590909</td>\n","      <td>demetric-felton-1</td>\n","      <td>2021</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>3.806015</td>\n","      <td>5.635714</td>\n","      <td>khalil-herbert-1</td>\n","      <td>2021</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>5.636789</td>\n","      <td>0.250000</td>\n","      <td>jake-funk-1</td>\n","      <td>2021</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>-1.535322</td>\n","      <td>0.975000</td>\n","      <td>kylin-hill-1</td>\n","      <td>2021</td>\n","    </tr>\n","    <tr>\n","      <th>27</th>\n","      <td>1.250280</td>\n","      <td>6.425000</td>\n","      <td>jermar-jefferson-1</td>\n","      <td>2021</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>8.760562</td>\n","      <td>16.442857</td>\n","      <td>breece-hall-1</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>9.002116</td>\n","      <td>13.500000</td>\n","      <td>kenneth-walker-iii-1</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>8.116016</td>\n","      <td>6.606250</td>\n","      <td>james-cook-2</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>31</th>\n","      <td>7.740084</td>\n","      <td>8.818750</td>\n","      <td>rachaad-white-1</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>32</th>\n","      <td>9.861979</td>\n","      <td>1.980000</td>\n","      <td>tyrion-davis-price-1</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>33</th>\n","      <td>7.553333</td>\n","      <td>9.391667</td>\n","      <td>brian-robinson-jr-1</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>34</th>\n","      <td>8.341795</td>\n","      <td>12.800000</td>\n","      <td>dameon-pierce-1</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>35</th>\n","      <td>7.267710</td>\n","      <td>0.636364</td>\n","      <td>zamir-white-1</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>36</th>\n","      <td>4.212579</td>\n","      <td>1.680000</td>\n","      <td>isaiah-spiller-1</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>37</th>\n","      <td>5.446242</td>\n","      <td>3.714286</td>\n","      <td>hassan-haskins-1</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>38</th>\n","      <td>4.570389</td>\n","      <td>9.962500</td>\n","      <td>tyler-allgeier-1</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>39</th>\n","      <td>4.663886</td>\n","      <td>2.040000</td>\n","      <td>snoop-conner-1</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>40</th>\n","      <td>3.902719</td>\n","      <td>0.600000</td>\n","      <td>jerome-ford-1</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>41</th>\n","      <td>6.241191</td>\n","      <td>3.812500</td>\n","      <td>kyren-williams-1</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>42</th>\n","      <td>4.087312</td>\n","      <td>2.000000</td>\n","      <td>ty-chandler-1</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>43</th>\n","      <td>2.449954</td>\n","      <td>2.240000</td>\n","      <td>kevin-harris-5</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>44</th>\n","      <td>6.844215</td>\n","      <td>9.400000</td>\n","      <td>tyler-badie-1</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>45</th>\n","      <td>3.429230</td>\n","      <td>1.810000</td>\n","      <td>keaontay-ingram-1</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>46</th>\n","      <td>3.935250</td>\n","      <td>1.171429</td>\n","      <td>trestan-ebner-1</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>47</th>\n","      <td>3.575646</td>\n","      <td>7.941176</td>\n","      <td>isaih-pacheco-1</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>48</th>\n","      <td>8.092370</td>\n","      <td>14.488235</td>\n","      <td>bijan-robinson-1</td>\n","      <td>2023</td>\n","    </tr>\n","    <tr>\n","      <th>49</th>\n","      <td>13.203473</td>\n","      <td>16.140000</td>\n","      <td>jahmyr-gibbs-1</td>\n","      <td>2023</td>\n","    </tr>\n","    <tr>\n","      <th>50</th>\n","      <td>9.299668</td>\n","      <td>6.631250</td>\n","      <td>zach-charbonnet-1</td>\n","      <td>2023</td>\n","    </tr>\n","    <tr>\n","      <th>51</th>\n","      <td>6.141666</td>\n","      <td>6.185714</td>\n","      <td>kendre-miller-1</td>\n","      <td>2023</td>\n","    </tr>\n","    <tr>\n","      <th>52</th>\n","      <td>7.303736</td>\n","      <td>9.047059</td>\n","      <td>tyjae-spears-1</td>\n","      <td>2023</td>\n","    </tr>\n","    <tr>\n","      <th>53</th>\n","      <td>8.979726</td>\n","      <td>17.336364</td>\n","      <td>devon-achane-1</td>\n","      <td>2023</td>\n","    </tr>\n","    <tr>\n","      <th>54</th>\n","      <td>8.788962</td>\n","      <td>1.907692</td>\n","      <td>tank-bigsby-1</td>\n","      <td>2023</td>\n","    </tr>\n","    <tr>\n","      <th>55</th>\n","      <td>5.241849</td>\n","      <td>6.806667</td>\n","      <td>roschon-johnson-1</td>\n","      <td>2023</td>\n","    </tr>\n","    <tr>\n","      <th>56</th>\n","      <td>7.237338</td>\n","      <td>3.050000</td>\n","      <td>israel-abanikanda-1</td>\n","      <td>2023</td>\n","    </tr>\n","    <tr>\n","      <th>57</th>\n","      <td>6.020411</td>\n","      <td>5.350000</td>\n","      <td>chase-brown-3</td>\n","      <td>2023</td>\n","    </tr>\n","    <tr>\n","      <th>58</th>\n","      <td>3.158431</td>\n","      <td>2.600000</td>\n","      <td>eric-gray-2</td>\n","      <td>2023</td>\n","    </tr>\n","    <tr>\n","      <th>59</th>\n","      <td>6.042997</td>\n","      <td>1.700000</td>\n","      <td>evan-hull-2</td>\n","      <td>2023</td>\n","    </tr>\n","    <tr>\n","      <th>60</th>\n","      <td>1.364301</td>\n","      <td>2.500000</td>\n","      <td>deuce-vaughn-1</td>\n","      <td>2023</td>\n","    </tr>\n","    <tr>\n","      <th>61</th>\n","      <td>6.508706</td>\n","      <td>0.475000</td>\n","      <td>zach-evans-1</td>\n","      <td>2023</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-979d483f-be7b-4e53-910f-1e4d1096df35')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-979d483f-be7b-4e53-910f-1e4d1096df35 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-979d483f-be7b-4e53-910f-1e4d1096df35');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-9d12fdc2-1fb5-43a7-bcc1-1660cc2a3b5e\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9d12fdc2-1fb5-43a7-bcc1-1660cc2a3b5e')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-9d12fdc2-1fb5-43a7-bcc1-1660cc2a3b5e button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_4c835664-77b8-430b-81c2-8dc8b7a07c06\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('zipped_data')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_4c835664-77b8-430b-81c2-8dc8b7a07c06 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('zipped_data');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"zipped_data","summary":"{\n  \"name\": \"zipped_data\",\n  \"rows\": 62,\n  \"fields\": [\n    {\n      \"column\": \"predicted\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.899397221597588,\n        \"min\": -1.6696251345697366,\n        \"max\": 13.203473424675227,\n        \"num_unique_values\": 62,\n        \"samples\": [\n          9.299667809948325,\n          7.23733760268617,\n          11.56999718628633\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"true\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.909387348364598,\n        \"min\": 0.25,\n        \"max\": 17.336363636363636,\n        \"num_unique_values\": 62,\n        \"samples\": [\n          6.63125,\n          3.050000166666667,\n          13.538461538461538\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"player\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 62,\n        \"samples\": [\n          \"zach-charbonnet-1\",\n          \"israel-abanikanda-1\",\n          \"clyde-edwards-helaire-1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"season\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2020,\n        \"max\": 2023,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2021,\n          2023,\n          2020\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"code","source":["# prompt: perform feature importance evaluation on model\n","\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","# Get feature importances\n","importances = model.coef_\n","\n","# Create a DataFrame for visualization\n","feature_importances = pd.DataFrame({'feature': features, 'importance': importances})\n","feature_importances = feature_importances.sort_values('importance', ascending=False)\n","\n","# Plotting feature importances\n","plt.figure(figsize=(10, 6))\n","sns.barplot(x='importance', y='feature', data=feature_importances)\n","plt.title('Feature Importances')\n","plt.xlabel('Importance')\n","plt.ylabel('Feature')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"MGjXMyVvDSuK","executionInfo":{"status":"ok","timestamp":1747013438170,"user_tz":300,"elapsed":366,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"outputId":"7858cfcd-94b3-40fe-c5a2-66e7d25adfbb"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":[],"metadata":{"id":"XzZHvY_DsiMp"}},{"cell_type":"code","source":[],"metadata":{"id":"iASzpLPGHYjQ"},"execution_count":null,"outputs":[]}]}