{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMLgGDR2IBIv7pDUjYx/MoQ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["### Install Packages"],"metadata":{"id":"d4ewVA8yFUoJ"}},{"cell_type":"code","source":["!pip install --force-reinstall nfl_data_py"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"Ro0BLbujFSAi","executionInfo":{"status":"ok","timestamp":1746985730831,"user_tz":300,"elapsed":19133,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"outputId":"6c347d9e-069a-490a-f43f-f7981931f9d7"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting nfl_data_py\n","  Using cached nfl_data_py-0.3.3-py3-none-any.whl.metadata (12 kB)\n","Collecting numpy<2.0,>=1.0 (from nfl_data_py)\n","  Using cached numpy-1.26.4-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (61 kB)\n","Collecting pandas<2.0,>=1.0 (from nfl_data_py)\n","  Using cached pandas-1.5.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\n","Collecting appdirs>1 (from nfl_data_py)\n","  Using cached appdirs-1.4.4-py2.py3-none-any.whl.metadata (9.0 kB)\n","Collecting fastparquet>0.5 (from nfl_data_py)\n","  Using cached fastparquet-2024.11.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.2 kB)\n","Collecting cramjam>=2.3 (from fastparquet>0.5->nfl_data_py)\n","  Using cached cramjam-2.10.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (5.0 kB)\n","Collecting fsspec (from fastparquet>0.5->nfl_data_py)\n","  Using cached fsspec-2025.3.2-py3-none-any.whl.metadata (11 kB)\n","Collecting packaging (from fastparquet>0.5->nfl_data_py)\n","  Using cached packaging-25.0-py3-none-any.whl.metadata (3.3 kB)\n","Collecting python-dateutil>=2.8.1 (from pandas<2.0,>=1.0->nfl_data_py)\n","  Using cached python_dateutil-2.9.0.post0-py2.py3-none-any.whl.metadata (8.4 kB)\n","Collecting pytz>=2020.1 (from pandas<2.0,>=1.0->nfl_data_py)\n","  Using cached pytz-2025.2-py2.py3-none-any.whl.metadata (22 kB)\n","Collecting six>=1.5 (from python-dateutil>=2.8.1->pandas<2.0,>=1.0->nfl_data_py)\n","  Using cached six-1.17.0-py2.py3-none-any.whl.metadata (1.7 kB)\n","Using cached nfl_data_py-0.3.3-py3-none-any.whl (13 kB)\n","Using cached appdirs-1.4.4-py2.py3-none-any.whl (9.6 kB)\n","Using cached fastparquet-2024.11.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.8 MB)\n","Using cached numpy-1.26.4-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (18.3 MB)\n","Using cached pandas-1.5.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (12.0 MB)\n","Using cached cramjam-2.10.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.0 MB)\n","Using cached python_dateutil-2.9.0.post0-py2.py3-none-any.whl (229 kB)\n","Using cached pytz-2025.2-py2.py3-none-any.whl (509 kB)\n","Using cached fsspec-2025.3.2-py3-none-any.whl (194 kB)\n","Using cached packaging-25.0-py3-none-any.whl (66 kB)\n","Using cached six-1.17.0-py2.py3-none-any.whl (11 kB)\n","Installing collected packages: pytz, appdirs, six, packaging, numpy, fsspec, cramjam, python-dateutil, pandas, fastparquet, nfl_data_py\n","  Attempting uninstall: pytz\n","    Found existing installation: pytz 2025.2\n","    Uninstalling pytz-2025.2:\n","      Successfully uninstalled pytz-2025.2\n","  Attempting uninstall: appdirs\n","    Found existing installation: appdirs 1.4.4\n","    Uninstalling appdirs-1.4.4:\n","      Successfully uninstalled appdirs-1.4.4\n","  Attempting uninstall: six\n","    Found existing installation: six 1.17.0\n","    Uninstalling six-1.17.0:\n","      Successfully uninstalled six-1.17.0\n","  Attempting uninstall: packaging\n","    Found existing installation: packaging 25.0\n","    Uninstalling packaging-25.0:\n","      Successfully uninstalled packaging-25.0\n","  Attempting uninstall: numpy\n","    Found existing installation: numpy 1.26.4\n","    Uninstalling numpy-1.26.4:\n","      Successfully uninstalled numpy-1.26.4\n","  Attempting uninstall: fsspec\n","    Found existing installation: fsspec 2025.3.2\n","    Uninstalling fsspec-2025.3.2:\n","      Successfully uninstalled fsspec-2025.3.2\n","  Attempting uninstall: cramjam\n","    Found existing installation: cramjam 2.10.0\n","    Uninstalling cramjam-2.10.0:\n","      Successfully uninstalled cramjam-2.10.0\n","  Attempting uninstall: python-dateutil\n","    Found existing installation: python-dateutil 2.9.0.post0\n","    Uninstalling python-dateutil-2.9.0.post0:\n","      Successfully uninstalled python-dateutil-2.9.0.post0\n","  Attempting uninstall: pandas\n","    Found existing installation: pandas 1.5.3\n","    Uninstalling pandas-1.5.3:\n","      Successfully uninstalled pandas-1.5.3\n","  Attempting uninstall: fastparquet\n","    Found existing installation: fastparquet 2024.11.0\n","    Uninstalling fastparquet-2024.11.0:\n","      Successfully uninstalled fastparquet-2024.11.0\n","  Attempting uninstall: nfl_data_py\n","    Found existing installation: nfl_data_py 0.3.3\n","    Uninstalling nfl_data_py-0.3.3:\n","      Successfully uninstalled nfl_data_py-0.3.3\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","google-colab 1.0.0 requires pandas==2.2.2, but you have pandas 1.5.3 which is incompatible.\n","thinc 8.3.6 requires numpy<3.0.0,>=2.0.0, but you have numpy 1.26.4 which is incompatible.\n","dask-expr 1.1.21 requires pandas>=2, but you have pandas 1.5.3 which is incompatible.\n","plotnine 0.14.5 requires pandas>=2.2.0, but you have pandas 1.5.3 which is incompatible.\n","langchain-core 0.3.56 requires packaging<25,>=23.2, but you have packaging 25.0 which is incompatible.\n","dask-cudf-cu12 25.2.2 requires pandas<2.2.4dev0,>=2.0, but you have pandas 1.5.3 which is incompatible.\n","xarray 2025.3.1 requires pandas>=2.1, but you have pandas 1.5.3 which is incompatible.\n","torch 2.6.0+cu124 requires nvidia-cublas-cu12==12.4.5.8; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cublas-cu12 12.5.3.2 which is incompatible.\n","torch 2.6.0+cu124 requires nvidia-cuda-cupti-cu12==12.4.127; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cuda-cupti-cu12 12.5.82 which is incompatible.\n","torch 2.6.0+cu124 requires nvidia-cuda-nvrtc-cu12==12.4.127; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cuda-nvrtc-cu12 12.5.82 which is incompatible.\n","torch 2.6.0+cu124 requires nvidia-cuda-runtime-cu12==12.4.127; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cuda-runtime-cu12 12.5.82 which is incompatible.\n","torch 2.6.0+cu124 requires nvidia-cudnn-cu12==9.1.0.70; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cudnn-cu12 9.3.0.75 which is incompatible.\n","torch 2.6.0+cu124 requires nvidia-cufft-cu12==11.2.1.3; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cufft-cu12 11.2.3.61 which is incompatible.\n","torch 2.6.0+cu124 requires nvidia-curand-cu12==10.3.5.147; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-curand-cu12 10.3.6.82 which is incompatible.\n","torch 2.6.0+cu124 requires nvidia-cusolver-cu12==11.6.1.9; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cusolver-cu12 11.6.3.83 which is incompatible.\n","torch 2.6.0+cu124 requires nvidia-cusparse-cu12==12.3.1.170; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cusparse-cu12 12.5.1.3 which is incompatible.\n","torch 2.6.0+cu124 requires nvidia-nvjitlink-cu12==12.4.127; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-nvjitlink-cu12 12.5.82 which is incompatible.\n","cudf-cu12 25.2.1 requires pandas<2.2.4dev0,>=2.0, but you have pandas 1.5.3 which is incompatible.\n","mizani 0.13.3 requires pandas>=2.2.0, but you have pandas 1.5.3 which is incompatible.\u001b[0m\u001b[31m\n","\u001b[0mSuccessfully installed appdirs-1.4.4 cramjam-2.10.0 fastparquet-2024.11.0 fsspec-2025.3.2 nfl_data_py-0.3.3 numpy-1.26.4 packaging-25.0 pandas-1.5.3 python-dateutil-2.9.0.post0 pytz-2025.2 six-1.17.0\n"]},{"output_type":"display_data","data":{"application/vnd.colab-display-data+json":{"pip_warning":{"packages":["dateutil","pytz","six"]},"id":"2b640d787a654546aadef7e5ebb5c309"}},"metadata":{}}]},{"cell_type":"markdown","source":[],"metadata":{"id":"syLD3tL0zW2j"}},{"cell_type":"markdown","source":["### Read in Libraries"],"metadata":{"id":"AARTXtTMFYyr"}},{"cell_type":"code","execution_count":15,"metadata":{"id":"xiyUl5S7E5Gx","executionInfo":{"status":"ok","timestamp":1746986041383,"user_tz":300,"elapsed":18110,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"ef8c5ac9-aea2-49eb-de66-9256149dde07"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/gdrive\n","/content/gdrive/My Drive/Football/Draft Tool/Rookie Projection Training Data\n"]}],"source":["import nfl_data_py as nfl\n","\n","import pandas as pd\n","import numpy as np\n","\n","import requests\n","\n","from google.colab import drive\n","drive.mount('/content/gdrive')\n","%cd /content/gdrive/My Drive/Football/Draft Tool/Rookie Projection Training Data\n","\n","pd.set_option('display.max_columns', None, 'display.max_rows', None)\n","pd.options.mode.chained_assignment = None  # default='warn'"]},{"cell_type":"markdown","source":["## Team Mappings"],"metadata":{"id":"GZA2DR9zVPKM"}},{"cell_type":"code","source":["team_map = {\n","    'IND': 'IND',\n","    'TB': 'TAM',\n","    'TAM': 'TAM',\n","    'CLE': 'CLE',\n","    'CLV': 'CLE',\n","    'DET': 'DET',\n","    'NO': 'NOR',\n","    'NOR': 'NOR',\n","    'DAL': 'DAL',\n","    'BAL': 'BAL',\n","    'BLT': 'BAL',\n","    'STL': 'LAR',\n","    'SL': 'LAR',\n","    'LA': 'LAR',\n","    'LAR': 'LAR',\n","    'CHI': 'CHI',\n","    'PHI': 'PHI',\n","    'GB': 'GNB',\n","    'GNB': 'GNB',\n","    'BUF': 'BUF',\n","    'PIT': 'PIT',\n","    'KC': 'KAN',\n","    'KAN': 'KAN',\n","    'OAK': 'LVR',\n","    'LV': 'LVR',\n","    'LVR': 'LVR',\n","    'WAS': 'WAS',\n","    'ATL': 'ATL',\n","    'NE': 'NWE',\n","    'NWE': 'NWE',\n","    'MIA': 'MIA',\n","    'MIN': 'MIN',\n","    'NYJ': 'NYJ',\n","    'CIN': 'CIN',\n","    'DEN': 'DEN',\n","    'NYG': 'NYG',\n","    'SEA': 'SEA',\n","    'JAX': 'JAX',\n","    'CAR': 'CAR',\n","    'SF': 'SFO',\n","    'SFO': 'SFO',\n","    'SD': 'LAC',\n","    'SDG': 'LAC',\n","    'LAC': 'LAC',\n","    'ARI': 'ARI',\n","    'ARZ': 'ARI',\n","    'TEN': 'TEN',\n","    'HST': 'HOU',\n","    'HOU': 'HOU',\n","}"],"metadata":{"id":"CfLBmV4MVQcN","executionInfo":{"status":"ok","timestamp":1746994502619,"user_tz":300,"elapsed":3,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}}},"execution_count":165,"outputs":[]},{"cell_type":"markdown","source":["## Define Timeframe"],"metadata":{"id":"JCaxLiVifaKT"}},{"cell_type":"code","source":["# Get years\n","years = np.arange(2004, 2024).tolist()\n","yearsDraft = np.arange(2005, 2024).tolist()"],"metadata":{"id":"0z25ComrfbiV","executionInfo":{"status":"ok","timestamp":1746999916649,"user_tz":300,"elapsed":6,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}}},"execution_count":239,"outputs":[]},{"cell_type":"markdown","source":["## Draft and Combine Player Data"],"metadata":{"id":"Gx7aWnlLQOBp"}},{"cell_type":"code","source":["# Load all draft pick data for QB, WR, RB, and TE\n","draft_df = nfl.import_draft_picks(yearsDraft)[['season','pick','team','gsis_id','cfb_player_id','position','college','age']]\n","\n","draft_df = draft_df.loc[draft_df.position.isin(['QB','WR','RB','TE']),:]\n","\n","# Load NFL Combine data\n","combine_df = nfl.import_combine_data(yearsDraft)[['cfb_id','ht','wt']]\n","combine_df = combine_df.loc[~combine_df.cfb_id.isnull(),:]\n","\n","# Merge the two dataframes\n","draftee_df = pd.merge(draft_df, combine_df, left_on='cfb_player_id', right_on='cfb_id', how='left')\n","draftee_df.drop(columns = ['cfb_id'], inplace = True)\n","draftee_df.dropna(inplace = True)\n","\n","# Map the team value in draftee_df to the corresponding value in team_mapping\n","draftee_df['team'] = draftee_df['team'].map(team_map)"],"metadata":{"id":"Lebb51U5FPgU","executionInfo":{"status":"ok","timestamp":1746999918046,"user_tz":300,"elapsed":898,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}}},"execution_count":240,"outputs":[]},{"cell_type":"markdown","source":["## Drafting Team Data\n","\n","Data created in these cells will act as a projected depth chart for the upcoming rookie."],"metadata":{"id":"6z5s7N4ecT59"}},{"cell_type":"code","source":["# Import rosters and apply filters\n","rosters = nfl.import_seasonal_rosters(years)\n","rosters = rosters.loc[rosters.position.isin(['QB','WR','RB','TE']),:]\n","rosters = rosters[['season','team','position','player_name','player_id']]\n","rosters['team'] = rosters['team'].map(team_map)"],"metadata":{"id":"YYfmojIgnLK1","executionInfo":{"status":"ok","timestamp":1746999926889,"user_tz":300,"elapsed":8841,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}}},"execution_count":241,"outputs":[]},{"cell_type":"markdown","source":["### Position Competition Stats"],"metadata":{"id":"fVFxAHwfvwaT"}},{"cell_type":"code","source":["# Import seasonal stats for each position group\n","stats = nfl.import_seasonal_data(years)\n","\n","# Only Regular Season\n","stats = stats.loc[stats.season_type == 'REG',:]\n","\n","# Create dataframe groupings\n","stats_RB = stats[['player_id','season','carries','rushing_yards','rushing_tds','receptions','targets','receiving_yards','receiving_tds','games']]\n","stats_WR_TE = stats[['player_id','season','receptions','targets','receiving_yards','receiving_tds','games']]\n","stats_QB = stats[['player_id','season','passing_yards','passing_tds','rushing_yards','games']]"],"metadata":{"id":"PFiDsX6gvvFN","executionInfo":{"status":"ok","timestamp":1746999935440,"user_tz":300,"elapsed":8543,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}}},"execution_count":242,"outputs":[]},{"cell_type":"code","source":["# Join it to the corresponding roster + season\n","stats_RB['season'] = stats_RB['season'].astype(int) + 1\n","rbStats = pd.merge(rosters, stats_RB, left_on=['player_id','season'], right_on=['player_id','season'], how='inner')\n","rbStats = rbStats.loc[rbStats.position == 'RB',:]\n","\n","stats_WR_TE['season'] = stats_WR_TE['season'].astype(int) + 1\n","wrStats = pd.merge(rosters, stats_WR_TE, left_on=['player_id','season'], right_on=['player_id','season'], how='inner')\n","wrStats = wrStats.loc[wrStats.position == 'WR',:]\n","\n","teStats = pd.merge(rosters, stats_WR_TE, left_on=['player_id','season'], right_on=['player_id','season'], how='inner')\n","teStats = teStats.loc[teStats.position == 'TE',:]\n","\n","stats_QB['season'] = stats_QB['season'].astype(int) + 1\n","qbStats = pd.merge(rosters, stats_QB, left_on=['player_id','season'], right_on=['player_id','season'], how='inner')\n","qbStats = qbStats.loc[qbStats.position == 'QB',:]"],"metadata":{"id":"0QjwgU_Uz1fL","executionInfo":{"status":"ok","timestamp":1746999935553,"user_tz":300,"elapsed":103,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}}},"execution_count":243,"outputs":[]},{"cell_type":"code","source":["# First, sort by desired columns in descending order\n","wrStats_sorted = wrStats.sort_values(\n","    by=['season', 'team', 'receiving_yards', 'receptions', 'targets', 'receiving_tds'],\n","    ascending=[True, True, False, False, False, False]\n",")\n","\n","# Then group by season and team, and take top 3 from each group\n","top_3_wr_per_team_season = wrStats_sorted.groupby(['season', 'team']).head(3)\n","\n","# Reset index\n","top_3_wr_per_team_season = top_3_wr_per_team_season.reset_index(drop=True)\n","\n","# Select only Relevant fields\n","top_3_wr_per_team_season = top_3_wr_per_team_season[['season','team','receptions','receiving_yards','receiving_tds']]\n","\n","# First, sort by desired columns in descending order\n","teStats_sorted = teStats.sort_values(\n","    by=['season', 'team', 'receiving_yards', 'receptions', 'targets', 'receiving_tds'],\n","    ascending=[True, True, False, False, False, False]\n",")\n","\n","# Then group by season and team, and take top 3 from each group\n","top_2_te_per_team_season = teStats_sorted.groupby(['season', 'team']).head(2)\n","\n","# Reset index\n","top_2_te_per_team_season = top_2_te_per_team_season.reset_index(drop=True)\n","\n","# Select only relevant fields\n","top_2_te_per_team_season = top_2_te_per_team_season[['season','team','receptions','receiving_yards','receiving_tds']]\n","\n","# First, sort by desired columns in descending order\n","rbStats_sorted = rbStats.sort_values(\n","    by=['season', 'team', 'receiving_yards', 'receptions', 'targets', 'receiving_tds'],\n","    ascending=[True, True, False, False, False, False]\n",")\n","\n","# Then group by season and team, and take top 3 from each group\n","top_3_rb_per_team_season = rbStats_sorted.groupby(['season', 'team']).head(3)\n","\n","# Reset index\n","top_3_rb_per_team_season = top_3_rb_per_team_season.reset_index(drop=True)\n","\n","#select only relevant fields\n","top_3_rb_per_team_season = top_3_rb_per_team_season[['season','team','rushing_yards','rushing_tds','carries','receptions','receiving_yards','receiving_tds']]"],"metadata":{"id":"ovWuB8Q04RbB","executionInfo":{"status":"ok","timestamp":1746999935582,"user_tz":300,"elapsed":21,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}}},"execution_count":244,"outputs":[]},{"cell_type":"markdown","source":["### Team Pass Tendencies"],"metadata":{"id":"Lg059JQ561vo"}},{"cell_type":"code","source":["# Import passing data for the 2010 season using nfl_data_py\n","passAttempts = nfl.import_seasonal_data(years)\n","\n","# Filter to include only regular season games\n","passAttempts = passAttempts.loc[passAttempts.season_type == 'REG', :]\n","\n","# Aggregate player-level passing statistics for each season\n","passAgg = passAttempts.groupby(['player_id', 'season'], as_index=False).agg(\n","    passAttempts=('attempts', 'sum'),         # Total pass attempts\n","    passYards=('passing_yards', 'sum'),       # Total passing yards\n","    passTDs=('passing_tds', 'sum'),           # Total passing touchdowns\n","    passAirYds=('passing_air_yards', 'sum')   # Total air yards\n",")\n","\n","# Merge aggregated passing data with roster info to get team affiliation\n","passAgg = pd.merge(rosters, passAgg,\n","                   left_on=['player_id', 'season'],\n","                   right_on=['player_id', 'season'],\n","                   how='inner')\n","\n","# Shift season value by +1 to attribute player stats to the following year's team\n","passAgg['season'] = passAgg['season'].astype(int) + 1\n","\n","# Aggregate team-level passing stats for each season\n","passAgg = passAgg.groupby(['season', 'team'], as_index=False).agg(\n","    passAttempts=('passAttempts', 'sum'),     # Total team pass attempts\n","    passYards=('passYards', 'sum'),           # Total team passing yards\n","    passTDs=('passTDs', 'sum'),               # Total team passing touchdowns\n","    passAirYds=('passAirYds', 'sum')          # Total team air yards\n",")"],"metadata":{"id":"FFclmJjp68it","executionInfo":{"status":"ok","timestamp":1746999943656,"user_tz":300,"elapsed":8066,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}}},"execution_count":245,"outputs":[]},{"cell_type":"markdown","source":["## Rookie Predictor Datasets"],"metadata":{"id":"r2Tf2ak9Iar9"}},{"cell_type":"markdown","source":["### WR Draft Dataset"],"metadata":{"id":"m6fcp4oL7-Gx"}},{"cell_type":"code","source":["# Join the draftee dataset to the dataset of their upcoming teammates previous season stats\n","wrDraftDf = pd.merge(draftee_df.loc[draftee_df.position == 'WR',:], top_3_wr_per_team_season, left_on=['team','season'], right_on=['team','season'], how='inner')\n","\n","# Join the draftee + competition dataset to the pass tendency dataset\n","wrDraftDf = pd.merge(wrDraftDf, passAgg, left_on=['team','season'], right_on=['team','season'], how='inner')\n","\n","# Create a quality check dataframe to make sure all draft players are included\n","wrDraftDfQc = pd.merge(draftee_df.loc[draftee_df.position == 'WR',:], top_3_wr_per_team_season, left_on=['team','season'], right_on=['team','season'], how='left')\n","\n","# Aggregate their teammates stats to get an understanding of the level of competition in their team\n","wrDraftDfProd = wrDraftDf.groupby(['cfb_player_id','gsis_id','season','pick','team','college','age','ht','wt','passAttempts','passYards','passTDs','passAirYds'], as_index= False).agg(\n","\n","        teamTotRec=('receptions','sum'),\n","        teamTotYds=('receiving_yards','sum'),\n","        teamTotTD=('receiving_tds','sum'),\n","        teamMaxRec=('receptions','max'),\n","        teamMaxYds=('receiving_yards','max'),\n","        teamMaxTD=('receiving_tds','max')\n","\n",").sort_values(by = ['season','pick'])\n","\n","# Conduct Quality Check\n","if len(wrDraftDfQc) != len(wrDraftDf):\n","  print('lost some rows')\n","  display(pd.concat([wrDraftDfQc,wrDraftDf]).drop_duplicates(keep=False))\n","\n","# Create Joining Key\n","wrDraftDfProd['Key'] = wrDraftDfProd['gsis_id'].astype(str) + wrDraftDfProd['season'].astype(str)"],"metadata":{"id":"Edaxf1mh7raE","executionInfo":{"status":"ok","timestamp":1746999943696,"user_tz":300,"elapsed":37,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}}},"execution_count":246,"outputs":[]},{"cell_type":"markdown","source":["### TE Draft Dataset"],"metadata":{"id":"A2gi0uuwFMXZ"}},{"cell_type":"code","source":["# Join the draftee dataset to the dataset of their upcoming teammates previous season stats\n","teDraftDf = pd.merge(draftee_df.loc[draftee_df.position == 'TE',:], top_2_te_per_team_season, left_on=['team','season'], right_on=['team','season'], how='inner')\n","\n","# Join the draftee + competition dataset to the pass tendency dataset\n","teDraftDf = pd.merge(teDraftDf, passAgg, left_on=['team','season'], right_on=['team','season'], how='inner')\n","\n","# Create a quality check dataframe to make sure all draft players are included\n","teDraftDfQc = pd.merge(draftee_df.loc[draftee_df.position == 'TE',:], top_2_te_per_team_season, left_on=['team','season'], right_on=['team','season'], how='left')\n","\n","# Aggregate their teammates stats to get an understanding of the level of competition in their team\n","teDraftDfProd = teDraftDf.groupby(['cfb_player_id','gsis_id','season','pick','team','college','age','ht','wt','passAttempts','passYards','passTDs','passAirYds'], as_index= False).agg(\n","        teamTotRec=('receptions','sum'),\n","        teamTotYds=('receiving_yards','sum'),\n","        teamTotTD=('receiving_tds','sum'),\n","        teamMaxRec=('receptions','max'),\n","        teamMaxYds=('receiving_yards','max'),\n","        teamMaxTD=('receiving_tds','max')\n",").sort_values(by = ['season','pick'])\n","\n","# Conduct Quality Check\n","if len(teDraftDfQc) != len(teDraftDf):\n","  print('lost some rows')\n","\n","# Create Joining Key\n","teDraftDfProd['Key'] = teDraftDfProd['gsis_id'].astype(str) + teDraftDfProd['season'].astype(str)"],"metadata":{"id":"xEW5Ra3YFLqL","executionInfo":{"status":"ok","timestamp":1746999943761,"user_tz":300,"elapsed":54,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}}},"execution_count":247,"outputs":[]},{"cell_type":"markdown","source":["### RB Draft Dataset"],"metadata":{"id":"iUOGl9AGFT5k"}},{"cell_type":"code","source":["# Join the draftee dataset to the dataset of their upcoming teammates previous season stats\n","rbDraftDf = pd.merge(draftee_df.loc[draftee_df.position == 'RB',:], top_3_rb_per_team_season, left_on=['team','season'], right_on=['team','season'], how='inner')\n","\n","# Join the draftee + competition dataset to the pass tendency dataset\n","rbDraftDf = pd.merge(rbDraftDf, passAgg, left_on=['team','season'], right_on=['team','season'], how='inner')\n","\n","# Create a quality check dataframe to make sure all draft players are included\n","rbDraftDfQc = pd.merge(draftee_df.loc[draftee_df.position == 'RB',:], top_3_rb_per_team_season, left_on=['team','season'], right_on=['team','season'], how='left')\n","\n","# Aggregate their teammates stats to get an understanding of the level of competition in their team\n","rbDraftDfProd = rbDraftDf.groupby(['cfb_player_id','gsis_id','season','pick','team','college','age','ht','wt','passAttempts','passYards','passTDs','passAirYds'], as_index= False).agg(\n","        teamTotRec=('receptions','sum'),\n","        teamTotRecYds=('receiving_yards','sum'),\n","        teamTotRecTD=('receiving_tds','sum'),\n","        teamMaxRec=('receptions','max'),\n","        teamMaxRecYds=('receiving_yards','max'),\n","        teamMaxRecTD=('receiving_tds','max'),\n","        teamTotCar=('carries','sum'),\n","        teamTotRushYds=('rushing_yards','sum'),\n","        teamTotRushTD=('rushing_tds','sum'),\n","        teamMaxCar=('receptions','max'),\n","        teamMaxRushYds=('receiving_yards','max'),\n","        teamMaxRushTD=('receiving_tds','max')\n",").sort_values(by = ['season','pick'])\n","\n","# Conduct Quality Check\n","if len(rbDraftDfQc) != len(rbDraftDf):\n","  print('lost some rows')\n","\n","# Create Joining Key\n","rbDraftDfProd['Key'] = rbDraftDfProd['gsis_id'].astype(str) + rbDraftDfProd['season'].astype(str)"],"metadata":{"id":"ePcG8gYnFTyl","executionInfo":{"status":"ok","timestamp":1746999943803,"user_tz":300,"elapsed":41,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}}},"execution_count":248,"outputs":[]},{"cell_type":"markdown","source":["## Rookie Target Field"],"metadata":{"id":"bW9UlS5DNKaO"}},{"cell_type":"code","source":["# Load weekly stats for the season\n","weekly_stats = nfl.import_weekly_data(years)\n","weekly_stats = weekly_stats.loc[weekly_stats.season_type == 'REG',:]\n","\n","seasonalPprPoints = weekly_stats.groupby(['player_id','season'], as_index = False).agg({'fantasy_points_ppr': 'sum','week':pd.Series.nunique})\n","\n","# Create Joining Key\n","seasonalPprPoints['Key'] = seasonalPprPoints['player_id'].astype(str) + seasonalPprPoints['season'].astype(str)\n","seasonalPprPoints.drop(columns = ['player_id','season'], inplace = True)\n","seasonalPprPoints.rename(columns = {'fantasy_points_ppr':'pprPoints','week':'weeks'}, inplace = True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TKDxffIENTgt","executionInfo":{"status":"ok","timestamp":1746999952580,"user_tz":300,"elapsed":8776,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"outputId":"7612a6a2-5ea3-47e9-fea7-6df1e4cc1c14"},"execution_count":249,"outputs":[{"output_type":"stream","name":"stdout","text":["Downcasting floats.\n"]}]},{"cell_type":"markdown","source":["### RB Dataframe"],"metadata":{"id":"0Bq8ctIkd3Na"}},{"cell_type":"code","source":["rbDraftDfProd = rbDraftDfProd.merge(seasonalPprPoints, on='Key', how='inner')\n","rbDraftDfProd.to_csv('rbDraftDfProd.csv',index = False)"],"metadata":{"id":"epMCIkOnSaun","executionInfo":{"status":"ok","timestamp":1746999952612,"user_tz":300,"elapsed":33,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}}},"execution_count":250,"outputs":[]},{"cell_type":"code","source":["rbDraftDfProd.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":313},"id":"Q_eoaan1_fJa","executionInfo":{"status":"ok","timestamp":1746999952687,"user_tz":300,"elapsed":74,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"outputId":"b354acd9-f269-4120-d02a-0e290c30e5a9"},"execution_count":251,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      cfb_player_id     gsis_id  season  pick team     college   age    ht  \\\n","0    ronnie-brown-1  00-0023437    2005     2  MIA      Auburn  23.0   6-0   \n","1   cedric-benson-1  00-0023439    2005     4  CHI       Texas  22.0  5-10   \n","2      frank-gore-1  00-0023500    2005    65  SFO  Miami (FL)  22.0   5-9   \n","3  darren-sproles-1  00-0023564    2005   130  LAC  Kansas St.  22.0   5-6   \n","4     reggie-bush-1  00-0024217    2006     2  NOR         USC  21.0  5-11   \n","\n","      wt  passAttempts  passYards  passTDs  passAirYds  teamTotRec  \\\n","0  233.0           586     3391.0       19         0.0          15   \n","1  222.0           470     2641.0        9         0.0         114   \n","2  217.0           561     3455.0       16         0.0          51   \n","3  187.0           449     3506.0       29         0.0          57   \n","4  201.0           553     3604.0       15         0.0          52   \n","\n","   teamTotRecYds  teamTotRecTD  teamMaxRec  teamMaxRecYds  teamMaxRecTD  \\\n","0           92.0             0          13           75.0             0   \n","1          884.0             0          56          427.0             0   \n","2          366.0             0          35          212.0             0   \n","3          449.0             1          53          441.0             1   \n","4          398.0             0          35          281.0             0   \n","\n","   teamTotCar  teamTotRushYds  teamTotRushTD  teamMaxCar  teamMaxRushYds  \\\n","0         175           787.0              6          13            75.0   \n","1         486          1915.0             14          56           427.0   \n","2         340          1184.0              9          35           212.0   \n","3         359          1439.0             17          53           441.0   \n","4         188           698.0              3          35           281.0   \n","\n","   teamMaxRushTD             Key   pprPoints  weeks  \n","0              0  00-00234372005  167.900009     15  \n","1              0  00-00234392005   26.500000      9  \n","2              0  00-00235002005  102.900002     14  \n","3              1  00-00235642005    9.000000      7  \n","4              0  00-00242172006  267.600006     16  "],"text/html":["\n","  <div id=\"df-51e8abf0-2b41-4c7d-ae22-effe6bf4b11b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>cfb_player_id</th>\n","      <th>gsis_id</th>\n","      <th>season</th>\n","      <th>pick</th>\n","      <th>team</th>\n","      <th>college</th>\n","      <th>age</th>\n","      <th>ht</th>\n","      <th>wt</th>\n","      <th>passAttempts</th>\n","      <th>passYards</th>\n","      <th>passTDs</th>\n","      <th>passAirYds</th>\n","      <th>teamTotRec</th>\n","      <th>teamTotRecYds</th>\n","      <th>teamTotRecTD</th>\n","      <th>teamMaxRec</th>\n","      <th>teamMaxRecYds</th>\n","      <th>teamMaxRecTD</th>\n","      <th>teamTotCar</th>\n","      <th>teamTotRushYds</th>\n","      <th>teamTotRushTD</th>\n","      <th>teamMaxCar</th>\n","      <th>teamMaxRushYds</th>\n","      <th>teamMaxRushTD</th>\n","      <th>Key</th>\n","      <th>pprPoints</th>\n","      <th>weeks</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ronnie-brown-1</td>\n","      <td>00-0023437</td>\n","      <td>2005</td>\n","      <td>2</td>\n","      <td>MIA</td>\n","      <td>Auburn</td>\n","      <td>23.0</td>\n","      <td>6-0</td>\n","      <td>233.0</td>\n","      <td>586</td>\n","      <td>3391.0</td>\n","      <td>19</td>\n","      <td>0.0</td>\n","      <td>15</td>\n","      <td>92.0</td>\n","      <td>0</td>\n","      <td>13</td>\n","      <td>75.0</td>\n","      <td>0</td>\n","      <td>175</td>\n","      <td>787.0</td>\n","      <td>6</td>\n","      <td>13</td>\n","      <td>75.0</td>\n","      <td>0</td>\n","      <td>00-00234372005</td>\n","      <td>167.900009</td>\n","      <td>15</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>cedric-benson-1</td>\n","      <td>00-0023439</td>\n","      <td>2005</td>\n","      <td>4</td>\n","      <td>CHI</td>\n","      <td>Texas</td>\n","      <td>22.0</td>\n","      <td>5-10</td>\n","      <td>222.0</td>\n","      <td>470</td>\n","      <td>2641.0</td>\n","      <td>9</td>\n","      <td>0.0</td>\n","      <td>114</td>\n","      <td>884.0</td>\n","      <td>0</td>\n","      <td>56</td>\n","      <td>427.0</td>\n","      <td>0</td>\n","      <td>486</td>\n","      <td>1915.0</td>\n","      <td>14</td>\n","      <td>56</td>\n","      <td>427.0</td>\n","      <td>0</td>\n","      <td>00-00234392005</td>\n","      <td>26.500000</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>frank-gore-1</td>\n","      <td>00-0023500</td>\n","      <td>2005</td>\n","      <td>65</td>\n","      <td>SFO</td>\n","      <td>Miami (FL)</td>\n","      <td>22.0</td>\n","      <td>5-9</td>\n","      <td>217.0</td>\n","      <td>561</td>\n","      <td>3455.0</td>\n","      <td>16</td>\n","      <td>0.0</td>\n","      <td>51</td>\n","      <td>366.0</td>\n","      <td>0</td>\n","      <td>35</td>\n","      <td>212.0</td>\n","      <td>0</td>\n","      <td>340</td>\n","      <td>1184.0</td>\n","      <td>9</td>\n","      <td>35</td>\n","      <td>212.0</td>\n","      <td>0</td>\n","      <td>00-00235002005</td>\n","      <td>102.900002</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>darren-sproles-1</td>\n","      <td>00-0023564</td>\n","      <td>2005</td>\n","      <td>130</td>\n","      <td>LAC</td>\n","      <td>Kansas St.</td>\n","      <td>22.0</td>\n","      <td>5-6</td>\n","      <td>187.0</td>\n","      <td>449</td>\n","      <td>3506.0</td>\n","      <td>29</td>\n","      <td>0.0</td>\n","      <td>57</td>\n","      <td>449.0</td>\n","      <td>1</td>\n","      <td>53</td>\n","      <td>441.0</td>\n","      <td>1</td>\n","      <td>359</td>\n","      <td>1439.0</td>\n","      <td>17</td>\n","      <td>53</td>\n","      <td>441.0</td>\n","      <td>1</td>\n","      <td>00-00235642005</td>\n","      <td>9.000000</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>reggie-bush-1</td>\n","      <td>00-0024217</td>\n","      <td>2006</td>\n","      <td>2</td>\n","      <td>NOR</td>\n","      <td>USC</td>\n","      <td>21.0</td>\n","      <td>5-11</td>\n","      <td>201.0</td>\n","      <td>553</td>\n","      <td>3604.0</td>\n","      <td>15</td>\n","      <td>0.0</td>\n","      <td>52</td>\n","      <td>398.0</td>\n","      <td>0</td>\n","      <td>35</td>\n","      <td>281.0</td>\n","      <td>0</td>\n","      <td>188</td>\n","      <td>698.0</td>\n","      <td>3</td>\n","      <td>35</td>\n","      <td>281.0</td>\n","      <td>0</td>\n","      <td>00-00242172006</td>\n","      <td>267.600006</td>\n","      <td>16</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-51e8abf0-2b41-4c7d-ae22-effe6bf4b11b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-51e8abf0-2b41-4c7d-ae22-effe6bf4b11b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-51e8abf0-2b41-4c7d-ae22-effe6bf4b11b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-859db968-aa2f-4f74-981c-355e5b2b7fa4\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-859db968-aa2f-4f74-981c-355e5b2b7fa4')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-859db968-aa2f-4f74-981c-355e5b2b7fa4 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"rbDraftDfProd"}},"metadata":{},"execution_count":251}]},{"cell_type":"markdown","source":["### WR Dataframe"],"metadata":{"id":"wiMdZ5Pnd-6W"}},{"cell_type":"code","source":["wrDraftDfProd = wrDraftDfProd.merge(seasonalPprPoints, on='Key', how='inner')\n","wrDraftDfProd.to_csv('wrDraftDfProd.csv',index = False)"],"metadata":{"id":"WrRc2w08d9qg","executionInfo":{"status":"ok","timestamp":1746999952720,"user_tz":300,"elapsed":39,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}}},"execution_count":252,"outputs":[]},{"cell_type":"markdown","source":["### TE Dataframe"],"metadata":{"id":"6q0PnhUceFNP"}},{"cell_type":"code","source":["teDraftDfProd = teDraftDfProd.merge(seasonalPprPoints, on='Key', how='inner')\n","teDraftDfProd.to_csv('teDraftDfProd.csv',index = False)"],"metadata":{"id":"n7EFLtqzeFso","executionInfo":{"status":"ok","timestamp":1746999952729,"user_tz":300,"elapsed":10,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}}},"execution_count":253,"outputs":[]},{"cell_type":"markdown","source":["## Live Roster"],"metadata":{"id":"nPyPwQ3HxYDV"}},{"cell_type":"code","source":["# Example: Get roster for the Kansas City Chiefs from ESPN\n","team_id = 11  # ESPN team ID for the Chiefs\n","url = f\"https://site.api.espn.com/apis/site/v2/sports/football/nfl/teams/{team_id}/roster\"\n","\n","response = requests.get(url)\n","data = response.json()\n","\n","# Convert player info to a DataFrame\n","players = pd.json_normalize(data['athletes'][0]['items'])\n","print(players[['displayName', 'position.name', 'jersey']])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Lh1cpi1ScTbe","executionInfo":{"status":"ok","timestamp":1746999874748,"user_tz":300,"elapsed":152,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"outputId":"e226ec18-2bc3-421b-8a0f-19181cf580b3"},"execution_count":238,"outputs":[{"output_type":"stream","name":"stdout","text":["               displayName     position.name jersey\n","0             Salvon Ahmed      Running Back     36\n","1                Ajou Ajou     Wide Receiver    NaN\n","2              Mo Alie-Cox         Tight End     81\n","3               Jason Bean       Quarterback      8\n","4       Ulysses Bentley IV      Running Back    NaN\n","5          Tanor Bortolini             Guard     60\n","6               Josh Downs     Wide Receiver      1\n","7             Ashton Dulin     Wide Receiver     16\n","8         Marshall Foerner  Offensive Tackle    NaN\n","9           Blake Freeland  Offensive Tackle     73\n","10           Wesley French            Center     62\n","11              DJ Giddens      Running Back    NaN\n","12          Matt Goncalves  Offensive Tackle     71\n","13           Tyler Goodson      Running Back     31\n","14           Anthony Gould     Wide Receiver      6\n","15          Khalil Herbert      Running Back    NaN\n","16            Daniel Jones       Quarterback    NaN\n","17           Tyler Kahmann     Wide Receiver    NaN\n","18           Riley Leonard       Quarterback    NaN\n","19            Will Mallory         Tight End     86\n","20         Maximilian Mang         Tight End    NaN\n","21             Sean McKeon         Tight End     49\n","22         Adonai Mitchell     Wide Receiver     10\n","23         D.J. Montgomery     Wide Receiver      2\n","24          Quenton Nelson             Guard     56\n","25           Drew Ogletree         Tight End     85\n","26  Albert Okwuegbunam Jr.         Tight End     84\n","27            Coleman Owen     Wide Receiver    NaN\n","28           Landon Parker     Wide Receiver    NaN\n","29             Alec Pierce     Wide Receiver     14\n","30            Danny Pinter            Center     63\n","31     Michael Pittman Jr.     Wide Receiver     11\n","32        Bernhard Raimann  Offensive Tackle     79\n","33      Anthony Richardson       Quarterback      5\n","34              Josh Sills             Guard     66\n","35            Braden Smith  Offensive Tackle     72\n","36           Blayne Taylor     Wide Receiver    NaN\n","37         Jonathan Taylor      Running Back     28\n","38             Luke Tenuta  Offensive Tackle     76\n","39            Jalen Travis  Offensive Tackle    NaN\n","40        Laquon Treadwell     Wide Receiver     17\n","41           Dalton Tucker             Guard     68\n","42            Tyler Warren         Tight End    NaN\n","43             Jack Wilson  Offensive Tackle    NaN\n","44            Jelani Woods         Tight End     80\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"V1H7oVXXlYyL"},"execution_count":null,"outputs":[]}]}