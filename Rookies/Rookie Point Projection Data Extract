{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMr2bn5WVXrc3MogpWZPF4X"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["### Install Packages"],"metadata":{"id":"d4ewVA8yFUoJ"}},{"cell_type":"code","source":["!pip install --force-reinstall nfl_data_py"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"Ro0BLbujFSAi","executionInfo":{"status":"ok","timestamp":1747752179595,"user_tz":300,"elapsed":40948,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"outputId":"354547e8-414a-49a4-8abf-2b54267e72f2"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting nfl_data_py\n","  Downloading nfl_data_py-0.3.3-py3-none-any.whl.metadata (12 kB)\n","Collecting numpy<2.0,>=1.0 (from nfl_data_py)\n","  Downloading numpy-1.26.4-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (61 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m61.0/61.0 kB\u001b[0m \u001b[31m1.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting pandas<2.0,>=1.0 (from nfl_data_py)\n","  Downloading pandas-1.5.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\n","Collecting appdirs>1 (from nfl_data_py)\n","  Downloading appdirs-1.4.4-py2.py3-none-any.whl.metadata (9.0 kB)\n","Collecting fastparquet>0.5 (from nfl_data_py)\n","  Downloading fastparquet-2024.11.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.2 kB)\n","Collecting cramjam>=2.3 (from fastparquet>0.5->nfl_data_py)\n","  Downloading cramjam-2.10.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (5.0 kB)\n","Collecting fsspec (from fastparquet>0.5->nfl_data_py)\n","  Downloading fsspec-2025.3.2-py3-none-any.whl.metadata (11 kB)\n","Collecting packaging (from fastparquet>0.5->nfl_data_py)\n","  Downloading packaging-25.0-py3-none-any.whl.metadata (3.3 kB)\n","Collecting python-dateutil>=2.8.1 (from pandas<2.0,>=1.0->nfl_data_py)\n","  Downloading python_dateutil-2.9.0.post0-py2.py3-none-any.whl.metadata (8.4 kB)\n","Collecting pytz>=2020.1 (from pandas<2.0,>=1.0->nfl_data_py)\n","  Downloading pytz-2025.2-py2.py3-none-any.whl.metadata (22 kB)\n","Collecting six>=1.5 (from python-dateutil>=2.8.1->pandas<2.0,>=1.0->nfl_data_py)\n","  Downloading six-1.17.0-py2.py3-none-any.whl.metadata (1.7 kB)\n","Downloading nfl_data_py-0.3.3-py3-none-any.whl (13 kB)\n","Downloading appdirs-1.4.4-py2.py3-none-any.whl (9.6 kB)\n","Downloading fastparquet-2024.11.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.8 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.8/1.8 MB\u001b[0m \u001b[31m36.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading numpy-1.26.4-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (18.3 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m18.3/18.3 MB\u001b[0m \u001b[31m29.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading pandas-1.5.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (12.0 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m12.0/12.0 MB\u001b[0m \u001b[31m27.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading cramjam-2.10.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.0 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.0/2.0 MB\u001b[0m \u001b[31m29.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading python_dateutil-2.9.0.post0-py2.py3-none-any.whl (229 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m229.9/229.9 kB\u001b[0m \u001b[31m9.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading pytz-2025.2-py2.py3-none-any.whl (509 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m509.2/509.2 kB\u001b[0m \u001b[31m20.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading fsspec-2025.3.2-py3-none-any.whl (194 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m194.4/194.4 kB\u001b[0m \u001b[31m7.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading packaging-25.0-py3-none-any.whl (66 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m66.5/66.5 kB\u001b[0m \u001b[31m2.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading six-1.17.0-py2.py3-none-any.whl (11 kB)\n","Installing collected packages: pytz, appdirs, six, packaging, numpy, fsspec, cramjam, python-dateutil, pandas, fastparquet, nfl_data_py\n","  Attempting uninstall: pytz\n","    Found existing installation: pytz 2025.2\n","    Uninstalling pytz-2025.2:\n","      Successfully uninstalled pytz-2025.2\n","  Attempting uninstall: six\n","    Found existing installation: six 1.17.0\n","    Uninstalling six-1.17.0:\n","      Successfully uninstalled six-1.17.0\n","  Attempting uninstall: packaging\n","    Found existing installation: packaging 24.2\n","    Uninstalling packaging-24.2:\n","      Successfully uninstalled packaging-24.2\n","  Attempting uninstall: numpy\n","    Found existing installation: numpy 2.0.2\n","    Uninstalling numpy-2.0.2:\n","      Successfully uninstalled numpy-2.0.2\n","  Attempting uninstall: fsspec\n","    Found existing installation: fsspec 2025.3.2\n","    Uninstalling fsspec-2025.3.2:\n","      Successfully uninstalled fsspec-2025.3.2\n","  Attempting uninstall: cramjam\n","    Found existing installation: cramjam 2.10.0\n","    Uninstalling cramjam-2.10.0:\n","      Successfully uninstalled cramjam-2.10.0\n","  Attempting uninstall: python-dateutil\n","    Found existing installation: python-dateutil 2.9.0.post0\n","    Uninstalling python-dateutil-2.9.0.post0:\n","      Successfully uninstalled python-dateutil-2.9.0.post0\n","  Attempting uninstall: pandas\n","    Found existing installation: pandas 2.2.2\n","    Uninstalling pandas-2.2.2:\n","      Successfully uninstalled pandas-2.2.2\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","google-colab 1.0.0 requires pandas==2.2.2, but you have pandas 1.5.3 which is incompatible.\n","mizani 0.13.5 requires pandas>=2.2.0, but you have pandas 1.5.3 which is incompatible.\n","xarray 2025.3.1 requires pandas>=2.1, but you have pandas 1.5.3 which is incompatible.\n","torch 2.6.0+cu124 requires nvidia-cublas-cu12==12.4.5.8; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cublas-cu12 12.5.3.2 which is incompatible.\n","torch 2.6.0+cu124 requires nvidia-cuda-cupti-cu12==12.4.127; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cuda-cupti-cu12 12.5.82 which is incompatible.\n","torch 2.6.0+cu124 requires nvidia-cuda-nvrtc-cu12==12.4.127; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cuda-nvrtc-cu12 12.5.82 which is incompatible.\n","torch 2.6.0+cu124 requires nvidia-cuda-runtime-cu12==12.4.127; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cuda-runtime-cu12 12.5.82 which is incompatible.\n","torch 2.6.0+cu124 requires nvidia-cudnn-cu12==9.1.0.70; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cudnn-cu12 9.3.0.75 which is incompatible.\n","torch 2.6.0+cu124 requires nvidia-cufft-cu12==11.2.1.3; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cufft-cu12 11.2.3.61 which is incompatible.\n","torch 2.6.0+cu124 requires nvidia-curand-cu12==10.3.5.147; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-curand-cu12 10.3.6.82 which is incompatible.\n","torch 2.6.0+cu124 requires nvidia-cusolver-cu12==11.6.1.9; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cusolver-cu12 11.6.3.83 which is incompatible.\n","torch 2.6.0+cu124 requires nvidia-cusparse-cu12==12.3.1.170; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cusparse-cu12 12.5.1.3 which is incompatible.\n","torch 2.6.0+cu124 requires nvidia-nvjitlink-cu12==12.4.127; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-nvjitlink-cu12 12.5.82 which is incompatible.\n","dask-expr 1.1.21 requires pandas>=2, but you have pandas 1.5.3 which is incompatible.\n","cudf-cu12 25.2.1 requires pandas<2.2.4dev0,>=2.0, but you have pandas 1.5.3 which is incompatible.\n","dask-cudf-cu12 25.2.2 requires pandas<2.2.4dev0,>=2.0, but you have pandas 1.5.3 which is incompatible.\n","thinc 8.3.6 requires numpy<3.0.0,>=2.0.0, but you have numpy 1.26.4 which is incompatible.\n","plotnine 0.14.5 requires pandas>=2.2.0, but you have pandas 1.5.3 which is incompatible.\n","langchain-core 0.3.59 requires packaging<25,>=23.2, but you have packaging 25.0 which is incompatible.\u001b[0m\u001b[31m\n","\u001b[0mSuccessfully installed appdirs-1.4.4 cramjam-2.10.0 fastparquet-2024.11.0 fsspec-2025.3.2 nfl_data_py-0.3.3 numpy-1.26.4 packaging-25.0 pandas-1.5.3 python-dateutil-2.9.0.post0 pytz-2025.2 six-1.17.0\n"]},{"output_type":"display_data","data":{"application/vnd.colab-display-data+json":{"pip_warning":{"packages":["dateutil","six"]},"id":"5667cb8765364ad5831f1e585b615b09"}},"metadata":{}}]},{"cell_type":"markdown","source":["### Read in Libraries"],"metadata":{"id":"AARTXtTMFYyr"}},{"cell_type":"code","execution_count":2,"metadata":{"id":"xiyUl5S7E5Gx","executionInfo":{"status":"ok","timestamp":1747752444649,"user_tz":300,"elapsed":534,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"1853a9df-454b-447c-c744-5351479731d8"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n","/content/gdrive/My Drive/Football/Draft Tool/Rookie Projection Training Data\n"]}],"source":["import nfl_data_py as nfl\n","\n","import pandas as pd\n","import numpy as np\n","from collections import defaultdict\n","\n","import requests\n","\n","from google.colab import drive\n","drive.mount('/content/gdrive')\n","%cd /content/gdrive/My Drive/Football/Draft Tool/Rookie Projection Training Data\n","\n","pd.set_option('display.max_columns', None, 'display.max_rows', None)\n","pd.options.mode.chained_assignment = None  # default='warn'"]},{"cell_type":"markdown","source":["## Team Mappings"],"metadata":{"id":"GZA2DR9zVPKM"}},{"cell_type":"code","source":["team_map = {\n","    'IND': 'IND',\n","    'TB': 'TAM',\n","    'TAM': 'TAM',\n","    'CLE': 'CLE',\n","    'CLV': 'CLE',\n","    'DET': 'DET',\n","    'NO': 'NOR',\n","    'NOR': 'NOR',\n","    'DAL': 'DAL',\n","    'BAL': 'BAL',\n","    'BLT': 'BAL',\n","    'STL': 'LAR',\n","    'SL': 'LAR',\n","    'LA': 'LAR',\n","    'LAR': 'LAR',\n","    'CHI': 'CHI',\n","    'PHI': 'PHI',\n","    'GB': 'GNB',\n","    'GNB': 'GNB',\n","    'BUF': 'BUF',\n","    'PIT': 'PIT',\n","    'KC': 'KAN',\n","    'KAN': 'KAN',\n","    'OAK': 'LVR',\n","    'LV': 'LVR',\n","    'LVR': 'LVR',\n","    'WAS': 'WAS',\n","    'ATL': 'ATL',\n","    'NE': 'NWE',\n","    'NWE': 'NWE',\n","    'MIA': 'MIA',\n","    'MIN': 'MIN',\n","    'NYJ': 'NYJ',\n","    'CIN': 'CIN',\n","    'DEN': 'DEN',\n","    'NYG': 'NYG',\n","    'SEA': 'SEA',\n","    'JAX': 'JAX',\n","    'CAR': 'CAR',\n","    'SF': 'SFO',\n","    'SFO': 'SFO',\n","    'SD': 'LAC',\n","    'SDG': 'LAC',\n","    'LAC': 'LAC',\n","    'ARI': 'ARI',\n","    'ARZ': 'ARI',\n","    'TEN': 'TEN',\n","    'HST': 'HOU',\n","    'HOU': 'HOU',\n","}"],"metadata":{"id":"CfLBmV4MVQcN","executionInfo":{"status":"ok","timestamp":1747759875903,"user_tz":300,"elapsed":3,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}}},"execution_count":39,"outputs":[]},{"cell_type":"markdown","source":["## Define Timeframe"],"metadata":{"id":"JCaxLiVifaKT"}},{"cell_type":"code","source":["# Get years\n","years = np.arange(2002, 2024).tolist()\n","yearsDraft = np.arange(2003, 2024).tolist()"],"metadata":{"id":"0z25ComrfbiV","executionInfo":{"status":"ok","timestamp":1747769702356,"user_tz":300,"elapsed":8,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}}},"execution_count":203,"outputs":[]},{"cell_type":"markdown","source":["## Draft and Combine Player Data"],"metadata":{"id":"Gx7aWnlLQOBp"}},{"cell_type":"code","source":["# Load all draft pick data for QB, WR, RB, and TE\n","draft_df = nfl.import_draft_picks(yearsDraft)[['season','pick','team','gsis_id','cfb_player_id','position','college','age']]\n","\n","# Filtering out players with missing gsis_ids\n","missingIds = draft_df.loc[draft_df.gsis_id.isna() & draft_df.position.isin(['QB','RB','WR','TE']),:]\n","completeIds = draft_df.loc[~draft_df.gsis_id.isna() & draft_df.position.isin(['QB','RB','WR','TE']),:]\n","missingIds['First Name'] = missingIds['cfb_player_id'].str.split('-').str[0].str.upper()\n","missingIds['Last Name'] = missingIds['cfb_player_id'].str.split('-').str[1].str.upper()\n","missingIds['team'] = missingIds['team'].map(team_map)\n","missingIds.drop(columns = ['gsis_id'], inplace = True)\n","\n","# Pull in Roster Data\n","rosters = nfl.import_seasonal_rosters(yearsDraft)[['first_name','last_name','position','team','season','player_id','rookie_year']]\n","rosters['First Name'] = rosters['first_name'].str.upper()\n","rosters['Last Name'] = rosters['last_name'].str.upper()\n","rosters.rename(columns = {'player_id':'gsis_id'}, inplace = True)\n","rosters['team'] = rosters['team'].map(team_map)\n","\n","# Join Roster to missingIds fields to get the appropriate gsis_id\n","missingIds = pd.merge(missingIds, rosters, left_on = ['Last Name','position','season','season','team'], right_on = ['Last Name','position','rookie_year','season','team'], how = 'inner')\n","missingIds = missingIds[['season','pick','team','gsis_id','cfb_player_id','position','college','age']]\n","\n","draft_df = pd.concat([completeIds, missingIds]).sort_values(by = ['season','pick']).reset_index(drop = True)"],"metadata":{"id":"S914TbBfuEcx","executionInfo":{"status":"ok","timestamp":1747769714609,"user_tz":300,"elapsed":11034,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}}},"execution_count":204,"outputs":[]},{"cell_type":"code","source":["# Load NFL Combine data\n","combine_df = nfl.import_combine_data(yearsDraft)[['cfb_id','ht','wt']]\n","combine_df = combine_df.loc[~combine_df.cfb_id.isnull(),:]\n","\n","# Merge the two dataframes\n","draftee_df = pd.merge(draft_df, combine_df, left_on='cfb_player_id', right_on='cfb_id', how='left')\n","draftee_df.drop(columns = ['cfb_id'], inplace = True)\n","draftee_df.dropna(inplace = True)\n","\n","# Map the team value in draftee_df to the corresponding value in team_mapping\n","draftee_df['team'] = draftee_df['team'].map(team_map)"],"metadata":{"id":"Lebb51U5FPgU","executionInfo":{"status":"ok","timestamp":1747769782330,"user_tz":300,"elapsed":712,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}}},"execution_count":207,"outputs":[]},{"cell_type":"code","source":["draftee_df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"wK34cQUFMoZK","executionInfo":{"status":"ok","timestamp":1747769792913,"user_tz":300,"elapsed":58,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"outputId":"db75cf06-fa2e-4944-b773-2f94735cfaa8"},"execution_count":208,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   season  pick team     gsis_id     cfb_player_id position       college  \\\n","0    2003     1  CIN  00-0021429   carson-palmer-1       QB           USC   \n","1    2003     2  DET  00-0022072  charles-rogers-1       WR  Michigan St.   \n","2    2003     3  HOU  00-0022044   andre-johnson-1       WR    Miami (FL)   \n","3    2003     7  JAX  00-0022177  byron-leftwich-1       QB      Marshall   \n","4    2003    17  ARI  00-0022156  bryant-johnson-1       WR      Penn St.   \n","\n","    age   ht     wt  \n","0  23.0  6-5  232.0  \n","1  22.0  6-2  202.0  \n","2  22.0  6-2  230.0  \n","3  23.0  6-5  241.0  \n","4  22.0  6-2  214.0  "],"text/html":["\n","  <div id=\"df-aa1c5226-7a25-45b8-a52a-1bc1c35d7a52\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>season</th>\n","      <th>pick</th>\n","      <th>team</th>\n","      <th>gsis_id</th>\n","      <th>cfb_player_id</th>\n","      <th>position</th>\n","      <th>college</th>\n","      <th>age</th>\n","      <th>ht</th>\n","      <th>wt</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2003</td>\n","      <td>1</td>\n","      <td>CIN</td>\n","      <td>00-0021429</td>\n","      <td>carson-palmer-1</td>\n","      <td>QB</td>\n","      <td>USC</td>\n","      <td>23.0</td>\n","      <td>6-5</td>\n","      <td>232.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2003</td>\n","      <td>2</td>\n","      <td>DET</td>\n","      <td>00-0022072</td>\n","      <td>charles-rogers-1</td>\n","      <td>WR</td>\n","      <td>Michigan St.</td>\n","      <td>22.0</td>\n","      <td>6-2</td>\n","      <td>202.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2003</td>\n","      <td>3</td>\n","      <td>HOU</td>\n","      <td>00-0022044</td>\n","      <td>andre-johnson-1</td>\n","      <td>WR</td>\n","      <td>Miami (FL)</td>\n","      <td>22.0</td>\n","      <td>6-2</td>\n","      <td>230.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2003</td>\n","      <td>7</td>\n","      <td>JAX</td>\n","      <td>00-0022177</td>\n","      <td>byron-leftwich-1</td>\n","      <td>QB</td>\n","      <td>Marshall</td>\n","      <td>23.0</td>\n","      <td>6-5</td>\n","      <td>241.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2003</td>\n","      <td>17</td>\n","      <td>ARI</td>\n","      <td>00-0022156</td>\n","      <td>bryant-johnson-1</td>\n","      <td>WR</td>\n","      <td>Penn St.</td>\n","      <td>22.0</td>\n","      <td>6-2</td>\n","      <td>214.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-aa1c5226-7a25-45b8-a52a-1bc1c35d7a52')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-aa1c5226-7a25-45b8-a52a-1bc1c35d7a52 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-aa1c5226-7a25-45b8-a52a-1bc1c35d7a52');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-d803ddf8-c28c-4cd0-a71a-6b8e74c145f0\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d803ddf8-c28c-4cd0-a71a-6b8e74c145f0')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-d803ddf8-c28c-4cd0-a71a-6b8e74c145f0 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"draftee_df","summary":"{\n  \"name\": \"draftee_df\",\n  \"rows\": 1250,\n  \"fields\": [\n    {\n      \"column\": \"season\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 21,\n        \"samples\": [\n          2003,\n          2020,\n          2018\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pick\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 256,\n        \"samples\": [\n          163,\n          22,\n          164\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"team\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 32,\n        \"samples\": [\n          \"PIT\",\n          \"DAL\",\n          \"MIA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gsis_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1250,\n        \"samples\": [\n          \"00-0032148\",\n          \"00-0036657\",\n          \"00-0027702\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cfb_player_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1250,\n        \"samples\": [\n          \"garrett-grayson-1\",\n          \"seth-williams-1\",\n          \"mike-williams-4\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"position\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"WR\",\n          \"TE\",\n          \"QB\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"college\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 125,\n        \"samples\": [\n          \"Louisville\",\n          \"Wisconsin\",\n          \"Notre Dame\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9600710542159484,\n        \"min\": 20.0,\n        \"max\": 28.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          22.0,\n          20.0,\n          23.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ht\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 16,\n        \"samples\": [\n          \"6-5\",\n          \"6-2\",\n          \"5-11\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22.351513189793188,\n        \"min\": 155.0,\n        \"max\": 275.0,\n        \"num_unique_values\": 107,\n        \"samples\": [\n          192.0,\n          205.0,\n          214.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":208}]},{"cell_type":"markdown","source":["## Drafting Team Data\n","\n","Data created in these cells will act as a projected depth chart for the upcoming rookie."],"metadata":{"id":"6z5s7N4ecT59"}},{"cell_type":"code","source":["# Import rosters and apply filters\n","rosters = nfl.import_seasonal_rosters(years)\n","rosters = rosters.loc[rosters.position.isin(['QB','WR','RB','TE']),:]\n","rosters = rosters[['season','team','position','player_name','player_id']]\n","rosters['team'] = rosters['team'].map(team_map)"],"metadata":{"id":"YYfmojIgnLK1"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Position Competition Stats"],"metadata":{"id":"fVFxAHwfvwaT"}},{"cell_type":"code","source":["# Import seasonal stats for each position group\n","stats = nfl.import_seasonal_data(years)\n","\n","# Only Regular Season\n","stats = stats.loc[stats.season_type == 'REG',:]\n","\n","# Create dataframe groupings\n","stats_RB = stats[['player_id','season','carries','rushing_yards','rushing_tds','receiving_yards','receiving_tds','games']] # Excluding targets, receptions\n","stats_WR_TE = stats[['player_id','season','receiving_yards','receiving_tds','games']] # Excluding targets, receptions\n","stats_QB = stats[['player_id','season','passing_yards','passing_tds','rushing_yards','games']]"],"metadata":{"id":"PFiDsX6gvvFN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Join it to the corresponding roster + season\n","stats_RB['season'] = stats_RB['season'].astype(int) + 1\n","rbStats = pd.merge(rosters, stats_RB, left_on=['player_id','season'], right_on=['player_id','season'], how='inner')\n","rbStats = rbStats.loc[rbStats.position == 'RB',:]\n","\n","stats_WR_TE['season'] = stats_WR_TE['season'].astype(int) + 1\n","wrStats = pd.merge(rosters, stats_WR_TE, left_on=['player_id','season'], right_on=['player_id','season'], how='inner')\n","wrStats = wrStats.loc[wrStats.position == 'WR',:]\n","\n","teStats = pd.merge(rosters, stats_WR_TE, left_on=['player_id','season'], right_on=['player_id','season'], how='inner')\n","teStats = teStats.loc[teStats.position == 'TE',:]\n","\n","stats_QB['season'] = stats_QB['season'].astype(int) + 1\n","qbStats = pd.merge(rosters, stats_QB, left_on=['player_id','season'], right_on=['player_id','season'], how='inner')\n","qbStats = qbStats.loc[qbStats.position == 'QB',:]"],"metadata":{"id":"0QjwgU_Uz1fL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# First, sort by desired columns in descending order\n","wrStats_sorted = wrStats.sort_values(\n","    by=['season', 'team', 'receiving_yards', 'receiving_tds'],\n","    ascending=[True, True, False, False]\n",")\n","\n","# Then group by season and team, and take top 3 from each group\n","top_3_wr_per_team_season = wrStats_sorted.groupby(['season', 'team']).head(3)\n","\n","# Reset index\n","top_3_wr_per_team_season = top_3_wr_per_team_season.reset_index(drop=True)\n","\n","# Select only Relevant fields\n","top_3_wr_per_team_season = top_3_wr_per_team_season[['season','team','receiving_yards','receiving_tds']]\n","\n","# First, sort by desired columns in descending order\n","teStats_sorted = teStats.sort_values(\n","    by=['season', 'team', 'receiving_yards', 'receiving_tds'],\n","    ascending=[True, True, False, False]\n",")\n","\n","# Then group by season and team, and take top 3 from each group\n","top_2_te_per_team_season = teStats_sorted.groupby(['season', 'team']).head(2)\n","\n","# Reset index\n","top_2_te_per_team_season = top_2_te_per_team_season.reset_index(drop=True)\n","\n","# Select only relevant fields\n","top_2_te_per_team_season = top_2_te_per_team_season[['season','team','receiving_yards','receiving_tds']]\n","\n","# First, sort by desired columns in descending order\n","rbStats_sorted = rbStats.sort_values(\n","    by=['season', 'team', 'receiving_yards', 'receiving_tds'],\n","    ascending=[True, True, False, False]\n",")\n","\n","# Then group by season and team, and take top 3 from each group\n","top_3_rb_per_team_season = rbStats_sorted.groupby(['season', 'team']).head(3)\n","\n","# Reset index\n","top_3_rb_per_team_season = top_3_rb_per_team_season.reset_index(drop=True)\n","\n","#select only relevant fields\n","top_3_rb_per_team_season = top_3_rb_per_team_season[['season','team','rushing_yards','rushing_tds','carries','receiving_yards','receiving_tds']]"],"metadata":{"id":"ovWuB8Q04RbB"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Team Pass Tendencies"],"metadata":{"id":"Lg059JQ561vo"}},{"cell_type":"code","source":["# Import passing data for the 2010 season using nfl_data_py\n","passAttempts = nfl.import_seasonal_data(years)\n","\n","# Filter to include only regular season games\n","passAttempts = passAttempts.loc[passAttempts.season_type == 'REG', :]\n","\n","# Aggregate player-level passing statistics for each season\n","passAgg = passAttempts.groupby(['player_id', 'season'], as_index=False).agg(\n","    passAttempts=('attempts', 'sum'),         # Total pass attempts\n","    passYards=('passing_yards', 'sum'),       # Total passing yards\n","    passTDs=('passing_tds', 'sum'),           # Total passing touchdowns\n","    passAirYds=('passing_air_yards', 'sum')   # Total air yards\n",")\n","\n","# Merge aggregated passing data with roster info to get team affiliation\n","passAgg = pd.merge(rosters, passAgg,\n","                   left_on=['player_id', 'season'],\n","                   right_on=['player_id', 'season'],\n","                   how='inner')\n","\n","# Shift season value by +1 to attribute player stats to the following year's team\n","passAgg['season'] = passAgg['season'].astype(int) + 1\n","\n","# Aggregate team-level passing stats for each season\n","passAgg = passAgg.groupby(['season', 'team'], as_index=False).agg(\n","    passAttempts=('passAttempts', 'sum'),     # Total team pass attempts\n","    passYards=('passYards', 'sum'),           # Total team passing yards\n","    passTDs=('passTDs', 'sum'),               # Total team passing touchdowns\n","    passAirYds=('passAirYds', 'sum')          # Total team air yards\n",")"],"metadata":{"id":"FFclmJjp68it"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Draft Team Performance"],"metadata":{"id":"vM25X91laaIX"}},{"cell_type":"markdown","source":["#### Scoring Metrics"],"metadata":{"id":"LvHdfcDZslfS"}},{"cell_type":"code","source":["# Data pull\n","df = nfl.import_schedules(years)[['game_id','season','game_type','week','away_team','home_team','result','total','result','home_score','away_score']]\n","df = df.loc[df.game_type == 'REG',:]\n","\n","# Assuming your DataFrame `df` has these columns:\n","# ['game_id', 'season', 'game_type', 'week', 'away_team', 'home_team',\n","#  'result', 'total', 'home_score', 'away_score']\n","\n","# Optional: Filter for regular season games\n","# df = df[df['game_type'] == 'REG']\n","\n","# Dictionary to collect stats per (season, team)\n","team_stats = {}\n","\n","# Process each game row\n","for _, row in df.iterrows():\n","    season = row['season']\n","    home = row['home_team']\n","    away = row['away_team']\n","    result = row['result'][0]\n","    total = row['total']\n","    home_score = row['home_score']\n","    away_score = row['away_score']\n","\n","    for team, score in [(home, home_score), (away, away_score)]:\n","        key = (season, team)\n","        if key not in team_stats:\n","            team_stats[key] = {\n","                'season': season,\n","                'team': team,\n","                'games_played': 0,\n","                'total_points_sum': 0,\n","                'points_scored_sum': 0\n","            }\n","\n","        team_stats[key]['games_played'] += 1\n","        team_stats[key]['total_points_sum'] += total\n","        team_stats[key]['points_scored_sum'] += score\n","\n","\n","# Convert to DataFrame\n","winDetails = pd.DataFrame(team_stats.values())\n","\n","# Calculate averages\n","winDetails['average_total_score'] = winDetails['total_points_sum'] / winDetails['games_played']\n","winDetails['average_points_scored'] = winDetails['points_scored_sum'] / winDetails['games_played']\n","\n","# Final column order\n","winDetails = winDetails[['season', 'team', 'average_total_score', 'average_points_scored']]\n","\n","# Optional: sort by season then team\n","winDetails = winDetails.sort_values(by=['team', 'season'])\n","\n","#\n","# Display\n","display(winDetails.head(100))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"o1ZYOJFSe4Vv","executionInfo":{"status":"ok","timestamp":1747759909008,"user_tz":300,"elapsed":1690,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"outputId":"2410a219-4d8b-4e07-f8e8-48c825ac888e"},"execution_count":44,"outputs":[{"output_type":"display_data","data":{"text/plain":["     season team  average_total_score  average_points_scored\n","19     2004  ARI            37.875000              17.750000\n","55     2005  ARI            43.625000              19.437500\n","84     2006  ARI            43.937500              19.625000\n","127    2007  ARI            50.187500              25.250000\n","153    2008  ARI            53.312500              26.687500\n","180    2009  ARI            43.750000              23.437500\n","217    2010  ARI            45.187500              18.062500\n","242    2011  ARI            41.250000              19.500000\n","276    2012  ARI            37.937500              15.625000\n","313    2013  ARI            43.937500              23.687500\n","350    2014  ARI            38.062500              19.375000\n","368    2015  ARI            50.125000              30.562500\n","410    2016  ARI            48.750000              26.125000\n","427    2017  ARI            41.000000              18.437500\n","468    2018  ARI            40.625000              14.062500\n","500    2019  ARI            50.187500              22.562500\n","537    2020  ARI            48.562500              25.625000\n","561    2021  ARI            47.941176              26.411765\n","596    2022  ARI            46.411765              20.000000\n","625    2023  ARI            46.176471              19.411765\n","27     2004  ATL            42.312500              21.250000\n","62     2005  ATL            43.250000              21.937500\n","67     2006  ATL            38.750000              18.250000\n","109    2007  ATL            42.062500              16.187500\n","130    2008  ATL            44.750000              24.437500\n","162    2009  ATL            43.000000              22.687500\n","207    2010  ATL            43.875000              25.875000\n","229    2011  ATL            47.000000              25.125000\n","267    2012  ATL            44.875000              26.187500\n","305    2013  ATL            49.750000              22.062500\n","322    2014  ATL            49.875000              23.812500\n","380    2015  ATL            42.750000              21.187500\n","386    2016  ATL            59.125000              33.750000\n","421    2017  ATL            41.750000              22.062500\n","449    2018  ATL            52.312500              25.875000\n","491    2019  ATL            48.750000              23.812500\n","514    2020  ATL            50.625000              24.750000\n","546    2021  ATL            45.411765              18.411765\n","578    2022  ATL            44.176471              21.470588\n","610    2023  ATL            40.823529              18.882353\n","9      2004  BAL            36.562500              19.812500\n","60     2005  BAL            35.250000              16.562500\n","81     2006  BAL            34.625000              22.062500\n","125    2007  BAL            41.187500              17.187500\n","132    2008  BAL            39.312500              24.062500\n","164    2009  BAL            40.750000              24.437500\n","221    2010  BAL            39.187500              22.312500\n","226    2011  BAL            40.250000              23.625000\n","284    2012  BAL            46.375000              24.875000\n","289    2013  BAL            42.000000              20.000000\n","324    2014  BAL            44.437500              25.562500\n","373    2015  BAL            45.562500              20.500000\n","388    2016  BAL            41.500000              21.437500\n","423    2017  BAL            43.625000              24.687500\n","450    2018  BAL            42.250000              24.312500\n","489    2019  BAL            50.812500              33.187500\n","516    2020  BAL            48.187500              29.250000\n","575    2021  BAL            45.823529              22.764706\n","593    2022  BAL            39.117647              20.588235\n","612    2023  BAL            44.882353              28.411765\n","4      2004  BUF            42.437500              24.687500\n","34     2005  BUF            39.875000              16.937500\n","77     2006  BUF            38.187500              18.750000\n","98     2007  BUF            37.875000              15.750000\n","134    2008  BUF            42.375000              21.000000\n","189    2009  BUF            36.500000              16.125000\n","194    2010  BUF            44.250000              17.687500\n","237    2011  BUF            50.375000              23.250000\n","273    2012  BUF            48.687500              21.500000\n","290    2013  BUF            45.437500              21.187500\n","327    2014  BUF            39.500000              21.437500\n","354    2015  BUF            46.125000              23.687500\n","389    2016  BUF            48.562500              24.937500\n","418    2017  BUF            41.312500              18.875000\n","451    2018  BUF            40.187500              16.812500\n","493    2019  BUF            35.812500              19.625000\n","518    2020  BUF            54.750000              31.312500\n","548    2021  BUF            45.411765              28.411765\n","577    2022  BUF            46.312500              28.437500\n","639    2023  BUF            44.823529              26.529412\n","30     2004  CAR            43.375000              22.187500\n","36     2005  CAR            40.625000              24.437500\n","66     2006  CAR            35.937500              16.875000\n","113    2007  CAR            38.375000              16.687500\n","151    2008  CAR            46.437500              25.875000\n","166    2009  CAR            38.937500              19.687500\n","205    2010  CAR            37.750000              12.250000\n","243    2011  CAR            52.187500              25.375000\n","281    2012  CAR            45.000000              22.312500\n","292    2013  CAR            37.937500              22.875000\n","345    2014  CAR            44.562500              21.187500\n","361    2015  CAR            50.500000              31.250000\n","385    2016  CAR            48.187500              23.062500\n","439    2017  CAR            43.125000              22.687500\n","470    2018  CAR            47.375000              23.500000\n","482    2019  CAR            50.625000              21.250000\n","520    2020  CAR            47.000000              21.875000\n","550    2021  CAR            41.647059              17.882353\n","580    2022  CAR            42.411765              20.411765\n","611    2023  CAR            38.352941              13.882353"],"text/html":["\n","  <div id=\"df-c14a32e8-702a-474a-a30b-eaa8bd184ba8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>season</th>\n","      <th>team</th>\n","      <th>average_total_score</th>\n","      <th>average_points_scored</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>19</th>\n","      <td>2004</td>\n","      <td>ARI</td>\n","      <td>37.875000</td>\n","      <td>17.750000</td>\n","    </tr>\n","    <tr>\n","      <th>55</th>\n","      <td>2005</td>\n","      <td>ARI</td>\n","      <td>43.625000</td>\n","      <td>19.437500</td>\n","    </tr>\n","    <tr>\n","      <th>84</th>\n","      <td>2006</td>\n","      <td>ARI</td>\n","      <td>43.937500</td>\n","      <td>19.625000</td>\n","    </tr>\n","    <tr>\n","      <th>127</th>\n","      <td>2007</td>\n","      <td>ARI</td>\n","      <td>50.187500</td>\n","      <td>25.250000</td>\n","    </tr>\n","    <tr>\n","      <th>153</th>\n","      <td>2008</td>\n","      <td>ARI</td>\n","      <td>53.312500</td>\n","      <td>26.687500</td>\n","    </tr>\n","    <tr>\n","      <th>180</th>\n","      <td>2009</td>\n","      <td>ARI</td>\n","      <td>43.750000</td>\n","      <td>23.437500</td>\n","    </tr>\n","    <tr>\n","      <th>217</th>\n","      <td>2010</td>\n","      <td>ARI</td>\n","      <td>45.187500</td>\n","      <td>18.062500</td>\n","    </tr>\n","    <tr>\n","      <th>242</th>\n","      <td>2011</td>\n","      <td>ARI</td>\n","      <td>41.250000</td>\n","      <td>19.500000</td>\n","    </tr>\n","    <tr>\n","      <th>276</th>\n","      <td>2012</td>\n","      <td>ARI</td>\n","      <td>37.937500</td>\n","      <td>15.625000</td>\n","    </tr>\n","    <tr>\n","      <th>313</th>\n","      <td>2013</td>\n","      <td>ARI</td>\n","      <td>43.937500</td>\n","      <td>23.687500</td>\n","    </tr>\n","    <tr>\n","      <th>350</th>\n","      <td>2014</td>\n","      <td>ARI</td>\n","      <td>38.062500</td>\n","      <td>19.375000</td>\n","    </tr>\n","    <tr>\n","      <th>368</th>\n","      <td>2015</td>\n","      <td>ARI</td>\n","      <td>50.125000</td>\n","      <td>30.562500</td>\n","    </tr>\n","    <tr>\n","      <th>410</th>\n","      <td>2016</td>\n","      <td>ARI</td>\n","      <td>48.750000</td>\n","      <td>26.125000</td>\n","    </tr>\n","    <tr>\n","      <th>427</th>\n","      <td>2017</td>\n","      <td>ARI</td>\n","      <td>41.000000</td>\n","      <td>18.437500</td>\n","    </tr>\n","    <tr>\n","      <th>468</th>\n","      <td>2018</td>\n","      <td>ARI</td>\n","      <td>40.625000</td>\n","      <td>14.062500</td>\n","    </tr>\n","    <tr>\n","      <th>500</th>\n","      <td>2019</td>\n","      <td>ARI</td>\n","      <td>50.187500</td>\n","      <td>22.562500</td>\n","    </tr>\n","    <tr>\n","      <th>537</th>\n","      <td>2020</td>\n","      <td>ARI</td>\n","      <td>48.562500</td>\n","      <td>25.625000</td>\n","    </tr>\n","    <tr>\n","      <th>561</th>\n","      <td>2021</td>\n","      <td>ARI</td>\n","      <td>47.941176</td>\n","      <td>26.411765</td>\n","    </tr>\n","    <tr>\n","      <th>596</th>\n","      <td>2022</td>\n","      <td>ARI</td>\n","      <td>46.411765</td>\n","      <td>20.000000</td>\n","    </tr>\n","    <tr>\n","      <th>625</th>\n","      <td>2023</td>\n","      <td>ARI</td>\n","      <td>46.176471</td>\n","      <td>19.411765</td>\n","    </tr>\n","    <tr>\n","      <th>27</th>\n","      <td>2004</td>\n","      <td>ATL</td>\n","      <td>42.312500</td>\n","      <td>21.250000</td>\n","    </tr>\n","    <tr>\n","      <th>62</th>\n","      <td>2005</td>\n","      <td>ATL</td>\n","      <td>43.250000</td>\n","      <td>21.937500</td>\n","    </tr>\n","    <tr>\n","      <th>67</th>\n","      <td>2006</td>\n","      <td>ATL</td>\n","      <td>38.750000</td>\n","      <td>18.250000</td>\n","    </tr>\n","    <tr>\n","      <th>109</th>\n","      <td>2007</td>\n","      <td>ATL</td>\n","      <td>42.062500</td>\n","      <td>16.187500</td>\n","    </tr>\n","    <tr>\n","      <th>130</th>\n","      <td>2008</td>\n","      <td>ATL</td>\n","      <td>44.750000</td>\n","      <td>24.437500</td>\n","    </tr>\n","    <tr>\n","      <th>162</th>\n","      <td>2009</td>\n","      <td>ATL</td>\n","      <td>43.000000</td>\n","      <td>22.687500</td>\n","    </tr>\n","    <tr>\n","      <th>207</th>\n","      <td>2010</td>\n","      <td>ATL</td>\n","      <td>43.875000</td>\n","      <td>25.875000</td>\n","    </tr>\n","    <tr>\n","      <th>229</th>\n","      <td>2011</td>\n","      <td>ATL</td>\n","      <td>47.000000</td>\n","      <td>25.125000</td>\n","    </tr>\n","    <tr>\n","      <th>267</th>\n","      <td>2012</td>\n","      <td>ATL</td>\n","      <td>44.875000</td>\n","      <td>26.187500</td>\n","    </tr>\n","    <tr>\n","      <th>305</th>\n","      <td>2013</td>\n","      <td>ATL</td>\n","      <td>49.750000</td>\n","      <td>22.062500</td>\n","    </tr>\n","    <tr>\n","      <th>322</th>\n","      <td>2014</td>\n","      <td>ATL</td>\n","      <td>49.875000</td>\n","      <td>23.812500</td>\n","    </tr>\n","    <tr>\n","      <th>380</th>\n","      <td>2015</td>\n","      <td>ATL</td>\n","      <td>42.750000</td>\n","      <td>21.187500</td>\n","    </tr>\n","    <tr>\n","      <th>386</th>\n","      <td>2016</td>\n","      <td>ATL</td>\n","      <td>59.125000</td>\n","      <td>33.750000</td>\n","    </tr>\n","    <tr>\n","      <th>421</th>\n","      <td>2017</td>\n","      <td>ATL</td>\n","      <td>41.750000</td>\n","      <td>22.062500</td>\n","    </tr>\n","    <tr>\n","      <th>449</th>\n","      <td>2018</td>\n","      <td>ATL</td>\n","      <td>52.312500</td>\n","      <td>25.875000</td>\n","    </tr>\n","    <tr>\n","      <th>491</th>\n","      <td>2019</td>\n","      <td>ATL</td>\n","      <td>48.750000</td>\n","      <td>23.812500</td>\n","    </tr>\n","    <tr>\n","      <th>514</th>\n","      <td>2020</td>\n","      <td>ATL</td>\n","      <td>50.625000</td>\n","      <td>24.750000</td>\n","    </tr>\n","    <tr>\n","      <th>546</th>\n","      <td>2021</td>\n","      <td>ATL</td>\n","      <td>45.411765</td>\n","      <td>18.411765</td>\n","    </tr>\n","    <tr>\n","      <th>578</th>\n","      <td>2022</td>\n","      <td>ATL</td>\n","      <td>44.176471</td>\n","      <td>21.470588</td>\n","    </tr>\n","    <tr>\n","      <th>610</th>\n","      <td>2023</td>\n","      <td>ATL</td>\n","      <td>40.823529</td>\n","      <td>18.882353</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>2004</td>\n","      <td>BAL</td>\n","      <td>36.562500</td>\n","      <td>19.812500</td>\n","    </tr>\n","    <tr>\n","      <th>60</th>\n","      <td>2005</td>\n","      <td>BAL</td>\n","      <td>35.250000</td>\n","      <td>16.562500</td>\n","    </tr>\n","    <tr>\n","      <th>81</th>\n","      <td>2006</td>\n","      <td>BAL</td>\n","      <td>34.625000</td>\n","      <td>22.062500</td>\n","    </tr>\n","    <tr>\n","      <th>125</th>\n","      <td>2007</td>\n","      <td>BAL</td>\n","      <td>41.187500</td>\n","      <td>17.187500</td>\n","    </tr>\n","    <tr>\n","      <th>132</th>\n","      <td>2008</td>\n","      <td>BAL</td>\n","      <td>39.312500</td>\n","      <td>24.062500</td>\n","    </tr>\n","    <tr>\n","      <th>164</th>\n","      <td>2009</td>\n","      <td>BAL</td>\n","      <td>40.750000</td>\n","      <td>24.437500</td>\n","    </tr>\n","    <tr>\n","      <th>221</th>\n","      <td>2010</td>\n","      <td>BAL</td>\n","      <td>39.187500</td>\n","      <td>22.312500</td>\n","    </tr>\n","    <tr>\n","      <th>226</th>\n","      <td>2011</td>\n","      <td>BAL</td>\n","      <td>40.250000</td>\n","      <td>23.625000</td>\n","    </tr>\n","    <tr>\n","      <th>284</th>\n","      <td>2012</td>\n","      <td>BAL</td>\n","      <td>46.375000</td>\n","      <td>24.875000</td>\n","    </tr>\n","    <tr>\n","      <th>289</th>\n","      <td>2013</td>\n","      <td>BAL</td>\n","      <td>42.000000</td>\n","      <td>20.000000</td>\n","    </tr>\n","    <tr>\n","      <th>324</th>\n","      <td>2014</td>\n","      <td>BAL</td>\n","      <td>44.437500</td>\n","      <td>25.562500</td>\n","    </tr>\n","    <tr>\n","      <th>373</th>\n","      <td>2015</td>\n","      <td>BAL</td>\n","      <td>45.562500</td>\n","      <td>20.500000</td>\n","    </tr>\n","    <tr>\n","      <th>388</th>\n","      <td>2016</td>\n","      <td>BAL</td>\n","      <td>41.500000</td>\n","      <td>21.437500</td>\n","    </tr>\n","    <tr>\n","      <th>423</th>\n","      <td>2017</td>\n","      <td>BAL</td>\n","      <td>43.625000</td>\n","      <td>24.687500</td>\n","    </tr>\n","    <tr>\n","      <th>450</th>\n","      <td>2018</td>\n","      <td>BAL</td>\n","      <td>42.250000</td>\n","      <td>24.312500</td>\n","    </tr>\n","    <tr>\n","      <th>489</th>\n","      <td>2019</td>\n","      <td>BAL</td>\n","      <td>50.812500</td>\n","      <td>33.187500</td>\n","    </tr>\n","    <tr>\n","      <th>516</th>\n","      <td>2020</td>\n","      <td>BAL</td>\n","      <td>48.187500</td>\n","      <td>29.250000</td>\n","    </tr>\n","    <tr>\n","      <th>575</th>\n","      <td>2021</td>\n","      <td>BAL</td>\n","      <td>45.823529</td>\n","      <td>22.764706</td>\n","    </tr>\n","    <tr>\n","      <th>593</th>\n","      <td>2022</td>\n","      <td>BAL</td>\n","      <td>39.117647</td>\n","      <td>20.588235</td>\n","    </tr>\n","    <tr>\n","      <th>612</th>\n","      <td>2023</td>\n","      <td>BAL</td>\n","      <td>44.882353</td>\n","      <td>28.411765</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2004</td>\n","      <td>BUF</td>\n","      <td>42.437500</td>\n","      <td>24.687500</td>\n","    </tr>\n","    <tr>\n","      <th>34</th>\n","      <td>2005</td>\n","      <td>BUF</td>\n","      <td>39.875000</td>\n","      <td>16.937500</td>\n","    </tr>\n","    <tr>\n","      <th>77</th>\n","      <td>2006</td>\n","      <td>BUF</td>\n","      <td>38.187500</td>\n","      <td>18.750000</td>\n","    </tr>\n","    <tr>\n","      <th>98</th>\n","      <td>2007</td>\n","      <td>BUF</td>\n","      <td>37.875000</td>\n","      <td>15.750000</td>\n","    </tr>\n","    <tr>\n","      <th>134</th>\n","      <td>2008</td>\n","      <td>BUF</td>\n","      <td>42.375000</td>\n","      <td>21.000000</td>\n","    </tr>\n","    <tr>\n","      <th>189</th>\n","      <td>2009</td>\n","      <td>BUF</td>\n","      <td>36.500000</td>\n","      <td>16.125000</td>\n","    </tr>\n","    <tr>\n","      <th>194</th>\n","      <td>2010</td>\n","      <td>BUF</td>\n","      <td>44.250000</td>\n","      <td>17.687500</td>\n","    </tr>\n","    <tr>\n","      <th>237</th>\n","      <td>2011</td>\n","      <td>BUF</td>\n","      <td>50.375000</td>\n","      <td>23.250000</td>\n","    </tr>\n","    <tr>\n","      <th>273</th>\n","      <td>2012</td>\n","      <td>BUF</td>\n","      <td>48.687500</td>\n","      <td>21.500000</td>\n","    </tr>\n","    <tr>\n","      <th>290</th>\n","      <td>2013</td>\n","      <td>BUF</td>\n","      <td>45.437500</td>\n","      <td>21.187500</td>\n","    </tr>\n","    <tr>\n","      <th>327</th>\n","      <td>2014</td>\n","      <td>BUF</td>\n","      <td>39.500000</td>\n","      <td>21.437500</td>\n","    </tr>\n","    <tr>\n","      <th>354</th>\n","      <td>2015</td>\n","      <td>BUF</td>\n","      <td>46.125000</td>\n","      <td>23.687500</td>\n","    </tr>\n","    <tr>\n","      <th>389</th>\n","      <td>2016</td>\n","      <td>BUF</td>\n","      <td>48.562500</td>\n","      <td>24.937500</td>\n","    </tr>\n","    <tr>\n","      <th>418</th>\n","      <td>2017</td>\n","      <td>BUF</td>\n","      <td>41.312500</td>\n","      <td>18.875000</td>\n","    </tr>\n","    <tr>\n","      <th>451</th>\n","      <td>2018</td>\n","      <td>BUF</td>\n","      <td>40.187500</td>\n","      <td>16.812500</td>\n","    </tr>\n","    <tr>\n","      <th>493</th>\n","      <td>2019</td>\n","      <td>BUF</td>\n","      <td>35.812500</td>\n","      <td>19.625000</td>\n","    </tr>\n","    <tr>\n","      <th>518</th>\n","      <td>2020</td>\n","      <td>BUF</td>\n","      <td>54.750000</td>\n","      <td>31.312500</td>\n","    </tr>\n","    <tr>\n","      <th>548</th>\n","      <td>2021</td>\n","      <td>BUF</td>\n","      <td>45.411765</td>\n","      <td>28.411765</td>\n","    </tr>\n","    <tr>\n","      <th>577</th>\n","      <td>2022</td>\n","      <td>BUF</td>\n","      <td>46.312500</td>\n","      <td>28.437500</td>\n","    </tr>\n","    <tr>\n","      <th>639</th>\n","      <td>2023</td>\n","      <td>BUF</td>\n","      <td>44.823529</td>\n","      <td>26.529412</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>2004</td>\n","      <td>CAR</td>\n","      <td>43.375000</td>\n","      <td>22.187500</td>\n","    </tr>\n","    <tr>\n","      <th>36</th>\n","      <td>2005</td>\n","      <td>CAR</td>\n","      <td>40.625000</td>\n","      <td>24.437500</td>\n","    </tr>\n","    <tr>\n","      <th>66</th>\n","      <td>2006</td>\n","      <td>CAR</td>\n","      <td>35.937500</td>\n","      <td>16.875000</td>\n","    </tr>\n","    <tr>\n","      <th>113</th>\n","      <td>2007</td>\n","      <td>CAR</td>\n","      <td>38.375000</td>\n","      <td>16.687500</td>\n","    </tr>\n","    <tr>\n","      <th>151</th>\n","      <td>2008</td>\n","      <td>CAR</td>\n","      <td>46.437500</td>\n","      <td>25.875000</td>\n","    </tr>\n","    <tr>\n","      <th>166</th>\n","      <td>2009</td>\n","      <td>CAR</td>\n","      <td>38.937500</td>\n","      <td>19.687500</td>\n","    </tr>\n","    <tr>\n","      <th>205</th>\n","      <td>2010</td>\n","      <td>CAR</td>\n","      <td>37.750000</td>\n","      <td>12.250000</td>\n","    </tr>\n","    <tr>\n","      <th>243</th>\n","      <td>2011</td>\n","      <td>CAR</td>\n","      <td>52.187500</td>\n","      <td>25.375000</td>\n","    </tr>\n","    <tr>\n","      <th>281</th>\n","      <td>2012</td>\n","      <td>CAR</td>\n","      <td>45.000000</td>\n","      <td>22.312500</td>\n","    </tr>\n","    <tr>\n","      <th>292</th>\n","      <td>2013</td>\n","      <td>CAR</td>\n","      <td>37.937500</td>\n","      <td>22.875000</td>\n","    </tr>\n","    <tr>\n","      <th>345</th>\n","      <td>2014</td>\n","      <td>CAR</td>\n","      <td>44.562500</td>\n","      <td>21.187500</td>\n","    </tr>\n","    <tr>\n","      <th>361</th>\n","      <td>2015</td>\n","      <td>CAR</td>\n","      <td>50.500000</td>\n","      <td>31.250000</td>\n","    </tr>\n","    <tr>\n","      <th>385</th>\n","      <td>2016</td>\n","      <td>CAR</td>\n","      <td>48.187500</td>\n","      <td>23.062500</td>\n","    </tr>\n","    <tr>\n","      <th>439</th>\n","      <td>2017</td>\n","      <td>CAR</td>\n","      <td>43.125000</td>\n","      <td>22.687500</td>\n","    </tr>\n","    <tr>\n","      <th>470</th>\n","      <td>2018</td>\n","      <td>CAR</td>\n","      <td>47.375000</td>\n","      <td>23.500000</td>\n","    </tr>\n","    <tr>\n","      <th>482</th>\n","      <td>2019</td>\n","      <td>CAR</td>\n","      <td>50.625000</td>\n","      <td>21.250000</td>\n","    </tr>\n","    <tr>\n","      <th>520</th>\n","      <td>2020</td>\n","      <td>CAR</td>\n","      <td>47.000000</td>\n","      <td>21.875000</td>\n","    </tr>\n","    <tr>\n","      <th>550</th>\n","      <td>2021</td>\n","      <td>CAR</td>\n","      <td>41.647059</td>\n","      <td>17.882353</td>\n","    </tr>\n","    <tr>\n","      <th>580</th>\n","      <td>2022</td>\n","      <td>CAR</td>\n","      <td>42.411765</td>\n","      <td>20.411765</td>\n","    </tr>\n","    <tr>\n","      <th>611</th>\n","      <td>2023</td>\n","      <td>CAR</td>\n","      <td>38.352941</td>\n","      <td>13.882353</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c14a32e8-702a-474a-a30b-eaa8bd184ba8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c14a32e8-702a-474a-a30b-eaa8bd184ba8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c14a32e8-702a-474a-a30b-eaa8bd184ba8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-1df34d5d-061f-4d8e-a7a6-f292095bff3b\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1df34d5d-061f-4d8e-a7a6-f292095bff3b')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-1df34d5d-061f-4d8e-a7a6-f292095bff3b button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display(winDetails\",\n  \"rows\": 100,\n  \"fields\": [\n    {\n      \"column\": \"season\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 2004,\n        \"max\": 2023,\n        \"num_unique_values\": 20,\n        \"samples\": [\n          2004,\n          2021,\n          2019\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"team\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"ATL\",\n          \"CAR\",\n          \"BAL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"average_total_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.754751578010412,\n        \"min\": 34.625,\n        \"max\": 59.125,\n        \"num_unique_values\": 88,\n        \"samples\": [\n          46.4375,\n          37.875,\n          44.875\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"average_points_scored\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.156623553975312,\n        \"min\": 12.25,\n        \"max\": 33.75,\n        \"num_unique_values\": 82,\n        \"samples\": [\n          23.8125,\n          17.75,\n          18.25\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"markdown","source":["#### Team Elo"],"metadata":{"id":"NkFOkHS4KhzS"}},{"cell_type":"code","source":["# Elo parameters\n","BASE_ELO = 1500\n","K = 20\n","HOME_ADVANTAGE = 65  # Elo points\n","\n","def expected_score(team_elo, opponent_elo):\n","    return 1 / (1 + 10 ** ((opponent_elo - team_elo) / 400))\n","\n","def update_elo(team_elo, opponent_elo, actual_score, k=K):\n","    expected = expected_score(team_elo, opponent_elo)\n","    return team_elo + k * (actual_score - expected)\n","\n","def get_game_results(years, mapping):\n","\n","    # Data Pull\n","    games = nfl.import_schedules(years)[['game_id','gameday','week','season','away_team','home_team','home_score','away_score']]\n","\n","    # Team Mappings\n","    games['away_team'] = games['away_team'].map(mapping)\n","    games['home_team'] = games['home_team'].map(mapping)\n","\n","    # Sorting Values\n","    games['gameday'] = pd.to_datetime(games['gameday'])\n","    games = games.sort_values('gameday')\n","\n","    return games\n","\n","def calculate_elo(games):\n","    elo_ratings = defaultdict(lambda: BASE_ELO)\n","    elo_history = []\n","\n","    current_season = None\n","\n","    for _, game in games.iterrows():\n","\n","        season = game['season']\n","        week = game['week']\n","\n","        # Parity reset at the start of a new season\n","        if season != current_season and week == 1:\n","            current_season = season\n","            for team in elo_ratings:\n","                elo_ratings[team] = elo_ratings[team] + (BASE_ELO - elo_ratings[team]) / 3\n","\n","        # Game stats\n","        home = game['home_team']\n","        away = game['away_team']\n","        home_score = game['home_score']\n","        away_score = game['away_score']\n","\n","        # Current elo rating\n","        home_elo = elo_ratings[home]\n","        away_elo = elo_ratings[away]\n","\n","        # Add home field advantage\n","        home_elo_with_adv = home_elo + HOME_ADVANTAGE\n","\n","        # Determine outcomes\n","        if home_score > away_score:\n","            home_result = 1\n","            away_result = 0\n","        elif home_score < away_score:\n","            home_result = 0\n","            away_result = 1\n","        else:\n","            home_result = away_result = 0.5  # Tie\n","\n","        # Update ratings\n","        new_home_elo = update_elo(home_elo_with_adv, away_elo, home_result)\n","        new_away_elo = update_elo(away_elo, home_elo_with_adv, away_result)\n","\n","        # Remove home field adjustment\n","        elo_ratings[home] = new_home_elo - HOME_ADVANTAGE\n","        elo_ratings[away] = new_away_elo\n","\n","        # Store results\n","        elo_history.append({\n","            'date': game['gameday'],\n","            'season': game['season'],\n","            'week': game['week'],\n","            'team': home,\n","            'opponent': away,\n","            'elo': elo_ratings[home]\n","        })\n","        elo_history.append({\n","            'date': game['gameday'],\n","            'season': game['season'],\n","            'week': game['week'],\n","            'team': away,\n","            'opponent': home,\n","            'elo': elo_ratings[away]\n","        })\n","\n","    return pd.DataFrame(elo_history)\n","\n","def eloSeasonAggregation(df):\n","\n","  # Sort by date\n","  df = df.sort_values('date')\n","\n","  # Aggregate to find highest point, lowest point, and last\n","  dfAgg = df.groupby(['team','season'], as_index = False).agg({'elo':['max','min','last']})\n","\n","  return dfAgg"],"metadata":{"id":"gt_7AfD2Kjfi","executionInfo":{"status":"ok","timestamp":1747761169462,"user_tz":300,"elapsed":48,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}}},"execution_count":59,"outputs":[]},{"cell_type":"code","source":["games = get_game_results(np.arange(1999,2025,1).tolist(), team_map)\n","elo_history = calculate_elo(games)\n","elo_season = eloSeasonAggregation(elo_history)"],"metadata":{"id":"QWM9I7gJNJO8","executionInfo":{"status":"ok","timestamp":1747761172204,"user_tz":300,"elapsed":1336,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}}},"execution_count":60,"outputs":[]},{"cell_type":"markdown","source":["#### Combine Scoring Metrics and Elo"],"metadata":{"id":"wmGdJ8Z7srxN"}},{"cell_type":"code","source":["teamScoringMetrics = pd.merge(winDetails, elo_season, left_on = ['season','team'], right_on = ['season','team'], how = 'inner')"],"metadata":{"id":"-4jmvfRXsqkz"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Rookie Predictor Datasets"],"metadata":{"id":"r2Tf2ak9Iar9"}},{"cell_type":"markdown","source":["### WR Draft Dataset"],"metadata":{"id":"m6fcp4oL7-Gx"}},{"cell_type":"code","source":["# Join the draftee dataset to the dataset of their upcoming teammates previous season stats\n","wrDraftDf = pd.merge(draftee_df.loc[draftee_df.position == 'WR',:], top_3_wr_per_team_season, left_on=['team','season'], right_on=['team','season'], how='inner')\n","\n","# Join the draftee + competition dataset to the pass tendency dataset\n","wrDraftDf = pd.merge(wrDraftDf, passAgg, left_on=['team','season'], right_on=['team','season'], how='inner')\n","\n","# Create a quality check dataframe to make sure all draft players are included\n","wrDraftDfQc = pd.merge(draftee_df.loc[draftee_df.position == 'WR',:], top_3_wr_per_team_season, left_on=['team','season'], right_on=['team','season'], how='left')\n","\n","# Aggregate their teammates stats to get an understanding of the level of competition in their team\n","wrDraftDfProd = wrDraftDf.groupby(['cfb_player_id','gsis_id','season','pick','team','college','age','ht','wt','passAttempts','passYards','passTDs','passAirYds'], as_index= False).agg(\n","\n","        teamTotRec=('receptions','sum'),\n","        teamTotYds=('receiving_yards','sum'),\n","        teamTotTD=('receiving_tds','sum'),\n","        teamMaxRec=('receptions','max'),\n","        teamMaxYds=('receiving_yards','max'),\n","        teamMaxTD=('receiving_tds','max')\n","\n",").sort_values(by = ['season','pick'])\n","\n","# Conduct Quality Check\n","if len(wrDraftDfQc) != len(wrDraftDf):\n","  print('lost some rows')\n","  display(pd.concat([wrDraftDfQc,wrDraftDf]).drop_duplicates(keep=False))\n","\n","# Create Joining Key\n","wrDraftDfProd['Key'] = wrDraftDfProd['gsis_id'].astype(str) + wrDraftDfProd['season'].astype(str)"],"metadata":{"id":"Edaxf1mh7raE"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### TE Draft Dataset"],"metadata":{"id":"A2gi0uuwFMXZ"}},{"cell_type":"code","source":["# Join the draftee dataset to the dataset of their upcoming teammates previous season stats\n","teDraftDf = pd.merge(draftee_df.loc[draftee_df.position == 'TE',:], top_2_te_per_team_season, left_on=['team','season'], right_on=['team','season'], how='inner')\n","\n","# Join the draftee + competition dataset to the pass tendency dataset\n","teDraftDf = pd.merge(teDraftDf, passAgg, left_on=['team','season'], right_on=['team','season'], how='inner')\n","\n","# Create a quality check dataframe to make sure all draft players are included\n","teDraftDfQc = pd.merge(draftee_df.loc[draftee_df.position == 'TE',:], top_2_te_per_team_season, left_on=['team','season'], right_on=['team','season'], how='left')\n","\n","# Aggregate their teammates stats to get an understanding of the level of competition in their team\n","teDraftDfProd = teDraftDf.groupby(['cfb_player_id','gsis_id','season','pick','team','college','age','ht','wt','passAttempts','passYards','passTDs','passAirYds'], as_index= False).agg(\n","        teamTotRec=('receptions','sum'),\n","        teamTotYds=('receiving_yards','sum'),\n","        teamTotTD=('receiving_tds','sum'),\n","        teamMaxRec=('receptions','max'),\n","        teamMaxYds=('receiving_yards','max'),\n","        teamMaxTD=('receiving_tds','max')\n",").sort_values(by = ['season','pick'])\n","\n","# Conduct Quality Check\n","if len(teDraftDfQc) != len(teDraftDf):\n","  print('lost some rows')\n","\n","# Create Joining Key\n","teDraftDfProd['Key'] = teDraftDfProd['gsis_id'].astype(str) + teDraftDfProd['season'].astype(str)"],"metadata":{"id":"xEW5Ra3YFLqL"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### RB Draft Dataset"],"metadata":{"id":"iUOGl9AGFT5k"}},{"cell_type":"code","source":["# Join the draftee dataset to the dataset of their upcoming teammates previous season stats\n","rbDraftDf = pd.merge(draftee_df.loc[draftee_df.position == 'RB',:], top_3_rb_per_team_season, left_on=['team','season'], right_on=['team','season'], how='inner')\n","\n","# Join the draftee + competition dataset to the pass tendency dataset\n","rbDraftDf = pd.merge(rbDraftDf, passAgg, left_on=['team','season'], right_on=['team','season'], how='inner')\n","\n","# Create a quality check dataframe to make sure all draft players are included\n","rbDraftDfQc = pd.merge(draftee_df.loc[draftee_df.position == 'RB',:], top_3_rb_per_team_season, left_on=['team','season'], right_on=['team','season'], how='left')\n","\n","# Aggregate their teammates stats to get an understanding of the level of competition in their team\n","rbDraftDfProd = rbDraftDf.groupby(['cfb_player_id','gsis_id','season','pick','team','college','age','ht','wt','passAttempts','passYards','passTDs','passAirYds'], as_index= False).agg(\n","        teamTotRec=('receptions','sum'),\n","        teamTotRecYds=('receiving_yards','sum'),\n","        teamTotRecTD=('receiving_tds','sum'),\n","        teamMaxRec=('receptions','max'),\n","        teamMaxRecYds=('receiving_yards','max'),\n","        teamMaxRecTD=('receiving_tds','max'),\n","        teamTotCar=('carries','sum'),\n","        teamTotRushYds=('rushing_yards','sum'),\n","        teamTotRushTD=('rushing_tds','sum'),\n","        teamMaxCar=('receptions','max'),\n","        teamMaxRushYds=('receiving_yards','max'),\n","        teamMaxRushTD=('receiving_tds','max')\n",").sort_values(by = ['season','pick'])\n","\n","# Conduct Quality Check\n","if len(rbDraftDfQc) != len(rbDraftDf):\n","  print('lost some rows')\n","\n","# Create Joining Key\n","rbDraftDfProd['Key'] = rbDraftDfProd['gsis_id'].astype(str) + rbDraftDfProd['season'].astype(str)"],"metadata":{"id":"ePcG8gYnFTyl"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Rookie Target Field"],"metadata":{"id":"bW9UlS5DNKaO"}},{"cell_type":"code","source":["# Load weekly stats for the season\n","weekly_stats = nfl.import_weekly_data(years)\n","weekly_stats = weekly_stats.loc[weekly_stats.season_type == 'REG',:]\n","\n","seasonalPprPoints = weekly_stats.groupby(['player_id','season'], as_index = False).agg({'fantasy_points_ppr': 'sum','week':pd.Series.nunique})\n","\n","# Create Joining Key\n","seasonalPprPoints['Key'] = seasonalPprPoints['player_id'].astype(str) + seasonalPprPoints['season'].astype(str)\n","seasonalPprPoints.drop(columns = ['player_id','season'], inplace = True)\n","seasonalPprPoints.rename(columns = {'fantasy_points_ppr':'pprPoints','week':'weeks'}, inplace = True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TKDxffIENTgt","executionInfo":{"status":"ok","timestamp":1746999952580,"user_tz":300,"elapsed":8776,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"outputId":"7612a6a2-5ea3-47e9-fea7-6df1e4cc1c14"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Downcasting floats.\n"]}]},{"cell_type":"markdown","source":["### RB Dataframe"],"metadata":{"id":"0Bq8ctIkd3Na"}},{"cell_type":"code","source":["rbDraftDfProd = rbDraftDfProd.merge(seasonalPprPoints, on='Key', how='inner')\n","rbDraftDfProd.to_csv('rbDraftDfProd.csv',index = False)"],"metadata":{"id":"epMCIkOnSaun"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["rbDraftDfProd.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":313},"id":"Q_eoaan1_fJa","executionInfo":{"status":"ok","timestamp":1746999952687,"user_tz":300,"elapsed":74,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"outputId":"b354acd9-f269-4120-d02a-0e290c30e5a9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      cfb_player_id     gsis_id  season  pick team     college   age    ht  \\\n","0    ronnie-brown-1  00-0023437    2005     2  MIA      Auburn  23.0   6-0   \n","1   cedric-benson-1  00-0023439    2005     4  CHI       Texas  22.0  5-10   \n","2      frank-gore-1  00-0023500    2005    65  SFO  Miami (FL)  22.0   5-9   \n","3  darren-sproles-1  00-0023564    2005   130  LAC  Kansas St.  22.0   5-6   \n","4     reggie-bush-1  00-0024217    2006     2  NOR         USC  21.0  5-11   \n","\n","      wt  passAttempts  passYards  passTDs  passAirYds  teamTotRec  \\\n","0  233.0           586     3391.0       19         0.0          15   \n","1  222.0           470     2641.0        9         0.0         114   \n","2  217.0           561     3455.0       16         0.0          51   \n","3  187.0           449     3506.0       29         0.0          57   \n","4  201.0           553     3604.0       15         0.0          52   \n","\n","   teamTotRecYds  teamTotRecTD  teamMaxRec  teamMaxRecYds  teamMaxRecTD  \\\n","0           92.0             0          13           75.0             0   \n","1          884.0             0          56          427.0             0   \n","2          366.0             0          35          212.0             0   \n","3          449.0             1          53          441.0             1   \n","4          398.0             0          35          281.0             0   \n","\n","   teamTotCar  teamTotRushYds  teamTotRushTD  teamMaxCar  teamMaxRushYds  \\\n","0         175           787.0              6          13            75.0   \n","1         486          1915.0             14          56           427.0   \n","2         340          1184.0              9          35           212.0   \n","3         359          1439.0             17          53           441.0   \n","4         188           698.0              3          35           281.0   \n","\n","   teamMaxRushTD             Key   pprPoints  weeks  \n","0              0  00-00234372005  167.900009     15  \n","1              0  00-00234392005   26.500000      9  \n","2              0  00-00235002005  102.900002     14  \n","3              1  00-00235642005    9.000000      7  \n","4              0  00-00242172006  267.600006     16  "],"text/html":["\n","  <div id=\"df-51e8abf0-2b41-4c7d-ae22-effe6bf4b11b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>cfb_player_id</th>\n","      <th>gsis_id</th>\n","      <th>season</th>\n","      <th>pick</th>\n","      <th>team</th>\n","      <th>college</th>\n","      <th>age</th>\n","      <th>ht</th>\n","      <th>wt</th>\n","      <th>passAttempts</th>\n","      <th>passYards</th>\n","      <th>passTDs</th>\n","      <th>passAirYds</th>\n","      <th>teamTotRec</th>\n","      <th>teamTotRecYds</th>\n","      <th>teamTotRecTD</th>\n","      <th>teamMaxRec</th>\n","      <th>teamMaxRecYds</th>\n","      <th>teamMaxRecTD</th>\n","      <th>teamTotCar</th>\n","      <th>teamTotRushYds</th>\n","      <th>teamTotRushTD</th>\n","      <th>teamMaxCar</th>\n","      <th>teamMaxRushYds</th>\n","      <th>teamMaxRushTD</th>\n","      <th>Key</th>\n","      <th>pprPoints</th>\n","      <th>weeks</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ronnie-brown-1</td>\n","      <td>00-0023437</td>\n","      <td>2005</td>\n","      <td>2</td>\n","      <td>MIA</td>\n","      <td>Auburn</td>\n","      <td>23.0</td>\n","      <td>6-0</td>\n","      <td>233.0</td>\n","      <td>586</td>\n","      <td>3391.0</td>\n","      <td>19</td>\n","      <td>0.0</td>\n","      <td>15</td>\n","      <td>92.0</td>\n","      <td>0</td>\n","      <td>13</td>\n","      <td>75.0</td>\n","      <td>0</td>\n","      <td>175</td>\n","      <td>787.0</td>\n","      <td>6</td>\n","      <td>13</td>\n","      <td>75.0</td>\n","      <td>0</td>\n","      <td>00-00234372005</td>\n","      <td>167.900009</td>\n","      <td>15</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>cedric-benson-1</td>\n","      <td>00-0023439</td>\n","      <td>2005</td>\n","      <td>4</td>\n","      <td>CHI</td>\n","      <td>Texas</td>\n","      <td>22.0</td>\n","      <td>5-10</td>\n","      <td>222.0</td>\n","      <td>470</td>\n","      <td>2641.0</td>\n","      <td>9</td>\n","      <td>0.0</td>\n","      <td>114</td>\n","      <td>884.0</td>\n","      <td>0</td>\n","      <td>56</td>\n","      <td>427.0</td>\n","      <td>0</td>\n","      <td>486</td>\n","      <td>1915.0</td>\n","      <td>14</td>\n","      <td>56</td>\n","      <td>427.0</td>\n","      <td>0</td>\n","      <td>00-00234392005</td>\n","      <td>26.500000</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>frank-gore-1</td>\n","      <td>00-0023500</td>\n","      <td>2005</td>\n","      <td>65</td>\n","      <td>SFO</td>\n","      <td>Miami (FL)</td>\n","      <td>22.0</td>\n","      <td>5-9</td>\n","      <td>217.0</td>\n","      <td>561</td>\n","      <td>3455.0</td>\n","      <td>16</td>\n","      <td>0.0</td>\n","      <td>51</td>\n","      <td>366.0</td>\n","      <td>0</td>\n","      <td>35</td>\n","      <td>212.0</td>\n","      <td>0</td>\n","      <td>340</td>\n","      <td>1184.0</td>\n","      <td>9</td>\n","      <td>35</td>\n","      <td>212.0</td>\n","      <td>0</td>\n","      <td>00-00235002005</td>\n","      <td>102.900002</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>darren-sproles-1</td>\n","      <td>00-0023564</td>\n","      <td>2005</td>\n","      <td>130</td>\n","      <td>LAC</td>\n","      <td>Kansas St.</td>\n","      <td>22.0</td>\n","      <td>5-6</td>\n","      <td>187.0</td>\n","      <td>449</td>\n","      <td>3506.0</td>\n","      <td>29</td>\n","      <td>0.0</td>\n","      <td>57</td>\n","      <td>449.0</td>\n","      <td>1</td>\n","      <td>53</td>\n","      <td>441.0</td>\n","      <td>1</td>\n","      <td>359</td>\n","      <td>1439.0</td>\n","      <td>17</td>\n","      <td>53</td>\n","      <td>441.0</td>\n","      <td>1</td>\n","      <td>00-00235642005</td>\n","      <td>9.000000</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>reggie-bush-1</td>\n","      <td>00-0024217</td>\n","      <td>2006</td>\n","      <td>2</td>\n","      <td>NOR</td>\n","      <td>USC</td>\n","      <td>21.0</td>\n","      <td>5-11</td>\n","      <td>201.0</td>\n","      <td>553</td>\n","      <td>3604.0</td>\n","      <td>15</td>\n","      <td>0.0</td>\n","      <td>52</td>\n","      <td>398.0</td>\n","      <td>0</td>\n","      <td>35</td>\n","      <td>281.0</td>\n","      <td>0</td>\n","      <td>188</td>\n","      <td>698.0</td>\n","      <td>3</td>\n","      <td>35</td>\n","      <td>281.0</td>\n","      <td>0</td>\n","      <td>00-00242172006</td>\n","      <td>267.600006</td>\n","      <td>16</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-51e8abf0-2b41-4c7d-ae22-effe6bf4b11b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-51e8abf0-2b41-4c7d-ae22-effe6bf4b11b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-51e8abf0-2b41-4c7d-ae22-effe6bf4b11b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-859db968-aa2f-4f74-981c-355e5b2b7fa4\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-859db968-aa2f-4f74-981c-355e5b2b7fa4')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-859db968-aa2f-4f74-981c-355e5b2b7fa4 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"rbDraftDfProd"}},"metadata":{},"execution_count":251}]},{"cell_type":"markdown","source":["### WR Dataframe"],"metadata":{"id":"wiMdZ5Pnd-6W"}},{"cell_type":"code","source":["wrDraftDfProd = wrDraftDfProd.merge(seasonalPprPoints, on='Key', how='inner')\n","wrDraftDfProd.to_csv('wrDraftDfProd.csv',index = False)"],"metadata":{"id":"WrRc2w08d9qg"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### TE Dataframe"],"metadata":{"id":"6q0PnhUceFNP"}},{"cell_type":"code","source":["teDraftDfProd = teDraftDfProd.merge(seasonalPprPoints, on='Key', how='inner')\n","teDraftDfProd.to_csv('teDraftDfProd.csv',index = False)"],"metadata":{"id":"n7EFLtqzeFso"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Live Roster"],"metadata":{"id":"nPyPwQ3HxYDV"}},{"cell_type":"code","source":["# Example: Get roster for the Kansas City Chiefs from ESPN\n","team_id = 11  # ESPN team ID for the Chiefs\n","url = f\"https://site.api.espn.com/apis/site/v2/sports/football/nfl/teams/{team_id}/roster\"\n","\n","response = requests.get(url)\n","data = response.json()\n","\n","# Convert player info to a DataFrame\n","players = pd.json_normalize(data['athletes'][0]['items'])\n","print(players[['displayName', 'position.name', 'jersey']])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Lh1cpi1ScTbe","executionInfo":{"status":"ok","timestamp":1746999874748,"user_tz":300,"elapsed":152,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"outputId":"e226ec18-2bc3-421b-8a0f-19181cf580b3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["               displayName     position.name jersey\n","0             Salvon Ahmed      Running Back     36\n","1                Ajou Ajou     Wide Receiver    NaN\n","2              Mo Alie-Cox         Tight End     81\n","3               Jason Bean       Quarterback      8\n","4       Ulysses Bentley IV      Running Back    NaN\n","5          Tanor Bortolini             Guard     60\n","6               Josh Downs     Wide Receiver      1\n","7             Ashton Dulin     Wide Receiver     16\n","8         Marshall Foerner  Offensive Tackle    NaN\n","9           Blake Freeland  Offensive Tackle     73\n","10           Wesley French            Center     62\n","11              DJ Giddens      Running Back    NaN\n","12          Matt Goncalves  Offensive Tackle     71\n","13           Tyler Goodson      Running Back     31\n","14           Anthony Gould     Wide Receiver      6\n","15          Khalil Herbert      Running Back    NaN\n","16            Daniel Jones       Quarterback    NaN\n","17           Tyler Kahmann     Wide Receiver    NaN\n","18           Riley Leonard       Quarterback    NaN\n","19            Will Mallory         Tight End     86\n","20         Maximilian Mang         Tight End    NaN\n","21             Sean McKeon         Tight End     49\n","22         Adonai Mitchell     Wide Receiver     10\n","23         D.J. Montgomery     Wide Receiver      2\n","24          Quenton Nelson             Guard     56\n","25           Drew Ogletree         Tight End     85\n","26  Albert Okwuegbunam Jr.         Tight End     84\n","27            Coleman Owen     Wide Receiver    NaN\n","28           Landon Parker     Wide Receiver    NaN\n","29             Alec Pierce     Wide Receiver     14\n","30            Danny Pinter            Center     63\n","31     Michael Pittman Jr.     Wide Receiver     11\n","32        Bernhard Raimann  Offensive Tackle     79\n","33      Anthony Richardson       Quarterback      5\n","34              Josh Sills             Guard     66\n","35            Braden Smith  Offensive Tackle     72\n","36           Blayne Taylor     Wide Receiver    NaN\n","37         Jonathan Taylor      Running Back     28\n","38             Luke Tenuta  Offensive Tackle     76\n","39            Jalen Travis  Offensive Tackle    NaN\n","40        Laquon Treadwell     Wide Receiver     17\n","41           Dalton Tucker             Guard     68\n","42            Tyler Warren         Tight End    NaN\n","43             Jack Wilson  Offensive Tackle    NaN\n","44            Jelani Woods         Tight End     80\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"V1H7oVXXlYyL"},"execution_count":null,"outputs":[]}]}