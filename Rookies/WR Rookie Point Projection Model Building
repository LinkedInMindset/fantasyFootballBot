{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPQx2rX9Ncqyx6c4buCHf8e"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## Loading Libraries"],"metadata":{"id":"mXywQ_SJifm6"}},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x4gnFvHViaxA","executionInfo":{"status":"ok","timestamp":1747163242411,"user_tz":300,"elapsed":379,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"outputId":"8544f51e-7582-4bc4-af2d-e2e20f282659"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n","/content/gdrive/My Drive/Football/Draft Tool/Rookie Projection Training Data\n"]}],"source":["import pandas as pd\n","import numpy as np\n","\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.linear_model import LinearRegression\n","from sklearn.preprocessing import StandardScaler\n","\n","import xgboost as xgb\n","import lightgbm as lgb\n","\n","import torch\n","import torch.nn as nn\n","from torch.utils.data import TensorDataset, DataLoader\n","\n","import shap\n","from sklearn.metrics import r2_score\n","\n","from google.colab import drive\n","drive.mount('/content/gdrive')\n","%cd /content/gdrive/My Drive/Football/Draft Tool/Rookie Projection Training Data\n","\n","pd.set_option('display.max_columns', None, 'display.max_rows', None)\n","pd.options.mode.chained_assignment = None  # default='warn'"]},{"cell_type":"markdown","source":["## Data Cleaning Function"],"metadata":{"id":"Jc5CrExbjdF3"}},{"cell_type":"code","source":["def clean_data(df):\n","\n","  '''This function takes in a dataframe and returns a cleaned dataframe'''\n","\n","  # Convert ht (height) to inches\n","  def ht_to_inches(ht):\n","    try:\n","      feet, inches = map(int, ht.split('-'))\n","      return feet * 12 + inches\n","    except:\n","      return np.nan  # Handle cases where ht is not in the expected format\n","\n","  df['ht'] = df['ht'].apply(ht_to_inches)\n","  df = df.rename(columns={'ht': 'htInches'})\n","\n","  # Standardize PPR Points\n","  df['pprPointsPerWeek'] = df['pprPoints']/df['weeks']\n","\n","  # Convert college name to a category\n","  df['college'] = df['college'].astype('category')\n","\n","  return df"],"metadata":{"id":"mwUyBr6Hpoka","executionInfo":{"status":"ok","timestamp":1747162953803,"user_tz":300,"elapsed":8,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}}},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":["# WR Dataframe"],"metadata":{"id":"xyzm210VqfVg"}},{"cell_type":"markdown","source":["### Load and Clean Data"],"metadata":{"id":"dCtPja5zqi_Z"}},{"cell_type":"code","source":["dfWr = pd.read_csv(r'wrDraftDfProd.csv')\n","\n","# Apply Cleaning Function\n","dfWr = clean_data(dfWr)"],"metadata":{"id":"nBzwp6k9iijk","executionInfo":{"status":"ok","timestamp":1747162959103,"user_tz":300,"elapsed":421,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["dfWr.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"ti53f67Vq3RE","executionInfo":{"status":"ok","timestamp":1747162959190,"user_tz":300,"elapsed":85,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"outputId":"2bd8dc42-8889-421b-f93c-06c5488bb52a"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       cfb_player_id     gsis_id  season  pick team           college   age  \\\n","0  braylon-edwards-1  00-0023438    2005     3  CLE          Michigan  22.0   \n","1      roddy-white-1  00-0023462    2005    27  ATL    Ala-Birmingham  23.0   \n","2  santonio-holmes-1  00-0024240    2006    25  PIT          Ohio St.  22.0   \n","3    greg-jennings-1  00-0024267    2006    52  GNB  Western Michigan  22.0   \n","4      jason-avant-1  00-0024324    2006   109  PHI          Michigan  23.0   \n","\n","   htInches     wt  passAttempts  passYards  passTDs  passAirYds  teamTotRec  \\\n","0        75  211.0           439     3076.0       21         0.0         126   \n","1        73  207.0           392     2667.0       15         0.0          87   \n","2        71  188.0           378     3104.0       21         0.0          95   \n","3        71  197.0           625     3960.0       20         0.0         135   \n","4        72  212.0           620     3903.0       21         0.0         161   \n","\n","   teamTotYds  teamTotTD  teamMaxRec  teamMaxYds  teamMaxTD             Key  \\\n","0      1786.0          6          58       812.0          4  00-00234382005   \n","1      1209.0          5          34       581.0          2  00-00234622005   \n","2      1426.0         11          69       975.0         11  00-00242402006   \n","3      1934.0          9          86      1221.0          5  00-00242672006   \n","4      2077.0         12          70       945.0          7  00-00243242006   \n","\n","   pprPoints  weeks  pprPointsPerWeek  \n","0      101.2     10         10.120000  \n","1       90.6     12          7.550000  \n","2      150.7     16          9.418750  \n","3      126.2     14          9.014286  \n","4       17.8      3          5.933333  "],"text/html":["\n","  <div id=\"df-c83b54bb-9b29-4eff-9ead-186b036b4003\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>cfb_player_id</th>\n","      <th>gsis_id</th>\n","      <th>season</th>\n","      <th>pick</th>\n","      <th>team</th>\n","      <th>college</th>\n","      <th>age</th>\n","      <th>htInches</th>\n","      <th>wt</th>\n","      <th>passAttempts</th>\n","      <th>passYards</th>\n","      <th>passTDs</th>\n","      <th>passAirYds</th>\n","      <th>teamTotRec</th>\n","      <th>teamTotYds</th>\n","      <th>teamTotTD</th>\n","      <th>teamMaxRec</th>\n","      <th>teamMaxYds</th>\n","      <th>teamMaxTD</th>\n","      <th>Key</th>\n","      <th>pprPoints</th>\n","      <th>weeks</th>\n","      <th>pprPointsPerWeek</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>braylon-edwards-1</td>\n","      <td>00-0023438</td>\n","      <td>2005</td>\n","      <td>3</td>\n","      <td>CLE</td>\n","      <td>Michigan</td>\n","      <td>22.0</td>\n","      <td>75</td>\n","      <td>211.0</td>\n","      <td>439</td>\n","      <td>3076.0</td>\n","      <td>21</td>\n","      <td>0.0</td>\n","      <td>126</td>\n","      <td>1786.0</td>\n","      <td>6</td>\n","      <td>58</td>\n","      <td>812.0</td>\n","      <td>4</td>\n","      <td>00-00234382005</td>\n","      <td>101.2</td>\n","      <td>10</td>\n","      <td>10.120000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>roddy-white-1</td>\n","      <td>00-0023462</td>\n","      <td>2005</td>\n","      <td>27</td>\n","      <td>ATL</td>\n","      <td>Ala-Birmingham</td>\n","      <td>23.0</td>\n","      <td>73</td>\n","      <td>207.0</td>\n","      <td>392</td>\n","      <td>2667.0</td>\n","      <td>15</td>\n","      <td>0.0</td>\n","      <td>87</td>\n","      <td>1209.0</td>\n","      <td>5</td>\n","      <td>34</td>\n","      <td>581.0</td>\n","      <td>2</td>\n","      <td>00-00234622005</td>\n","      <td>90.6</td>\n","      <td>12</td>\n","      <td>7.550000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>santonio-holmes-1</td>\n","      <td>00-0024240</td>\n","      <td>2006</td>\n","      <td>25</td>\n","      <td>PIT</td>\n","      <td>Ohio St.</td>\n","      <td>22.0</td>\n","      <td>71</td>\n","      <td>188.0</td>\n","      <td>378</td>\n","      <td>3104.0</td>\n","      <td>21</td>\n","      <td>0.0</td>\n","      <td>95</td>\n","      <td>1426.0</td>\n","      <td>11</td>\n","      <td>69</td>\n","      <td>975.0</td>\n","      <td>11</td>\n","      <td>00-00242402006</td>\n","      <td>150.7</td>\n","      <td>16</td>\n","      <td>9.418750</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>greg-jennings-1</td>\n","      <td>00-0024267</td>\n","      <td>2006</td>\n","      <td>52</td>\n","      <td>GNB</td>\n","      <td>Western Michigan</td>\n","      <td>22.0</td>\n","      <td>71</td>\n","      <td>197.0</td>\n","      <td>625</td>\n","      <td>3960.0</td>\n","      <td>20</td>\n","      <td>0.0</td>\n","      <td>135</td>\n","      <td>1934.0</td>\n","      <td>9</td>\n","      <td>86</td>\n","      <td>1221.0</td>\n","      <td>5</td>\n","      <td>00-00242672006</td>\n","      <td>126.2</td>\n","      <td>14</td>\n","      <td>9.014286</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>jason-avant-1</td>\n","      <td>00-0024324</td>\n","      <td>2006</td>\n","      <td>109</td>\n","      <td>PHI</td>\n","      <td>Michigan</td>\n","      <td>23.0</td>\n","      <td>72</td>\n","      <td>212.0</td>\n","      <td>620</td>\n","      <td>3903.0</td>\n","      <td>21</td>\n","      <td>0.0</td>\n","      <td>161</td>\n","      <td>2077.0</td>\n","      <td>12</td>\n","      <td>70</td>\n","      <td>945.0</td>\n","      <td>7</td>\n","      <td>00-00243242006</td>\n","      <td>17.8</td>\n","      <td>3</td>\n","      <td>5.933333</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c83b54bb-9b29-4eff-9ead-186b036b4003')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c83b54bb-9b29-4eff-9ead-186b036b4003 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c83b54bb-9b29-4eff-9ead-186b036b4003');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-476068f7-4979-404b-8f8b-75f0523fea03\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-476068f7-4979-404b-8f8b-75f0523fea03')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-476068f7-4979-404b-8f8b-75f0523fea03 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"dfWr"}},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","source":["### Baseline Model"],"metadata":{"id":"jvgvSdXRChno"}},{"cell_type":"code","source":["# Define features (X) and target (y)\n","features = ['pick', 'age', 'htInches', 'wt','passAttempts','passYards','passTDs','passAirYds', 'teamTotRec', 'teamTotYds', 'teamTotTD', 'teamMaxRec', 'teamMaxYds', 'teamMaxTD']\n","target = 'pprPointsPerWeek'\n","\n","X = dfWr[features]\n","y = dfWr[target]\n","\n","# Create a boolean mask to identify 2023 and 2024 data for testing\n","test_mask = dfWr['season'].isin([2021,2022,2023])\n","\n","# Split the data into training and testing sets based on the year\n","X_train = X[~test_mask]\n","X_test = X[test_mask]\n","y_train = y[~test_mask]\n","y_test = y[test_mask]\n","\n","\n","# Scale the data\n","scaler = StandardScaler()\n","X_train_scaled = scaler.fit_transform(X_train)\n","X_test_scaled = scaler.transform(X_test)\n","\n","# Initialize and train the linear regression model\n","model = LinearRegression()\n","model.fit(X_train_scaled, y_train)\n","\n","# Make predictions on the test set\n","y_pred = model.predict(X_test_scaled)\n","\n","# Evaluate the model (example: using R-squared)\n","r2 = r2_score(y_test, y_pred)\n","rmse = np.sqrt(np.mean((y_test - y_pred)**2))\n","print(f\"R-squared: {r2}\")\n","print(f\"RMSE: {rmse}\")\n","\n","# View the Predictions compared to the true values\n","zipped_data = pd.DataFrame(list(zip(y_pred, y_test, dfWr['cfb_player_id'][test_mask])), columns = ('predicted','true','player'))\n","display(zipped_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"RowYqAILjpOY","executionInfo":{"status":"ok","timestamp":1747075331764,"user_tz":300,"elapsed":123,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"outputId":"3df0eeab-c20f-4b4d-f1f6-6a3096da19ad"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["R-squared: 0.15700859720558835\n","RMSE: 3.9768945592625053\n"]},{"output_type":"display_data","data":{"text/plain":["    predicted       true                  player\n","0    9.568108  17.917647          jamarr-chase-1\n","1    9.129953   9.151111        kadarius-toney-1\n","2    9.249738   8.625000        rashod-bateman-1\n","3    9.126121   7.935714         rondale-moore-1\n","4    8.277472   3.537500       dwayne-eskridge-1\n","5    7.730020   2.733333   terrace-marshall-jr-1\n","6    7.087880   3.122222           dyami-brown-1\n","7    7.590745   2.400000         amari-rodgers-1\n","8    5.543659   5.971429          nico-collins-1\n","9    7.326658   2.783333      anthony-schwartz-1\n","10   5.223245   5.300000       dez-fitzpatrick-1\n","11   6.555864  14.206250      amon-ra-st-brown-1\n","12   4.538860   1.628571         jaelon-darden-1\n","13   6.182575   1.075000         tylan-wallace-1\n","14   3.967659   9.533333  ihmir-smith-marsette-1\n","15   3.608993   1.200000           frank-darby-1\n","16   3.031627   0.160000          racey-mcmath-1\n","17   3.651828   4.400000         seth-williams-1\n","18   3.475866   1.433333          dazz-newsome-1\n","19   1.900846   3.471429         ben-skowronek-1\n","20   9.407123  10.505882          drake-london-1\n","21   8.682656  12.688235        garrett-wilson-2\n","22   8.546374  13.213333           chris-olave-1\n","23   9.631606   2.516667      jameson-williams-1\n","24   9.374055  10.883333          jahan-dotson-1\n","25   9.862603   8.009091         treylon-burks-1\n","26   8.110955   8.600000      wandale-robinson-1\n","27   6.742564   5.525000       tyquan-thornton-1\n","28   9.542166   9.794118        george-pickens-1\n","29   9.599899   7.018750           alec-pierce-2\n","30   8.226592   3.528571            skyy-moore-1\n","31   6.514727   4.222222        velus-jones-jr-1\n","32   6.800536   1.600000         jalen-tolbert-1\n","33   6.882214   3.242857            david-bell-6\n","34   6.215411   0.580000            danny-gray-1\n","35   6.702398   1.300000         erik-ezukanma-1\n","36   5.536832   7.815385           romeo-doubs-1\n","37   5.202643   3.410000         khalil-shakir-1\n","38   4.613800   3.950000          kyle-philips-4\n","39   5.440940   6.580000          jalen-nailor-1\n","40   8.605513   8.811765    jaxon-smith-njigba-1\n","41   8.500097   5.529412      quentin-johnston-1\n","42   8.831044  12.900001           zay-flowers-1\n","43   9.695175  13.017647        jordan-addison-1\n","44   8.752301   5.653333        jonathan-mingo-1\n","45   7.449189  13.575000           jayden-reed-1\n","46   7.034698  13.281250           rashee-rice-1\n","47   6.318723   4.980000           marvin-mims-1\n","48   6.423141  16.500000        nathaniel-dell-1\n","49   7.153822   4.638462           jalin-hyatt-1\n","50   7.429742   4.018182        cedric-tillman-1\n","51   7.459593   9.241176            josh-downs-2\n","52   7.006469   8.807692        michael-wilson-3\n","53   5.853568   5.523077            tre-tucker-1\n","54   4.634777   2.692857          derius-davis-1\n","55   4.256420   4.140000         charlie-jones-7\n","56   5.462866   2.761538           tyler-scott-3\n","57   5.133433   7.984000      dontayvion-wicks-1\n","58   3.768976  17.558824            puka-nacua-1\n","59   5.015953   6.533333     parker-washington-1\n","60   4.655783   1.300000        kayshon-boutte-1\n","61   4.279882   5.629412           trey-palmer-1\n","62   4.154701   7.575000              at-perry-1\n","63   4.082565   4.033333        elijah-higgins-1\n","64   3.446225   1.990909     xavier-hutchinson-1\n","65   3.381146   7.657143       demario-douglas-1\n","66   1.848831   0.600000         antoine-green-1\n","67   2.785996   4.133334          jalen-brooks-2\n","68   0.636892   3.850000           ronnie-bell-3"],"text/html":["\n","  <div id=\"df-86f51c9a-1f45-4b8e-9d4a-e221e42a1430\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>predicted</th>\n","      <th>true</th>\n","      <th>player</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>9.568108</td>\n","      <td>17.917647</td>\n","      <td>jamarr-chase-1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>9.129953</td>\n","      <td>9.151111</td>\n","      <td>kadarius-toney-1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>9.249738</td>\n","      <td>8.625000</td>\n","      <td>rashod-bateman-1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>9.126121</td>\n","      <td>7.935714</td>\n","      <td>rondale-moore-1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>8.277472</td>\n","      <td>3.537500</td>\n","      <td>dwayne-eskridge-1</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>7.730020</td>\n","      <td>2.733333</td>\n","      <td>terrace-marshall-jr-1</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>7.087880</td>\n","      <td>3.122222</td>\n","      <td>dyami-brown-1</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>7.590745</td>\n","      <td>2.400000</td>\n","      <td>amari-rodgers-1</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>5.543659</td>\n","      <td>5.971429</td>\n","      <td>nico-collins-1</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>7.326658</td>\n","      <td>2.783333</td>\n","      <td>anthony-schwartz-1</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>5.223245</td>\n","      <td>5.300000</td>\n","      <td>dez-fitzpatrick-1</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>6.555864</td>\n","      <td>14.206250</td>\n","      <td>amon-ra-st-brown-1</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>4.538860</td>\n","      <td>1.628571</td>\n","      <td>jaelon-darden-1</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>6.182575</td>\n","      <td>1.075000</td>\n","      <td>tylan-wallace-1</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>3.967659</td>\n","      <td>9.533333</td>\n","      <td>ihmir-smith-marsette-1</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>3.608993</td>\n","      <td>1.200000</td>\n","      <td>frank-darby-1</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>3.031627</td>\n","      <td>0.160000</td>\n","      <td>racey-mcmath-1</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>3.651828</td>\n","      <td>4.400000</td>\n","      <td>seth-williams-1</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>3.475866</td>\n","      <td>1.433333</td>\n","      <td>dazz-newsome-1</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>1.900846</td>\n","      <td>3.471429</td>\n","      <td>ben-skowronek-1</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>9.407123</td>\n","      <td>10.505882</td>\n","      <td>drake-london-1</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>8.682656</td>\n","      <td>12.688235</td>\n","      <td>garrett-wilson-2</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>8.546374</td>\n","      <td>13.213333</td>\n","      <td>chris-olave-1</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>9.631606</td>\n","      <td>2.516667</td>\n","      <td>jameson-williams-1</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>9.374055</td>\n","      <td>10.883333</td>\n","      <td>jahan-dotson-1</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>9.862603</td>\n","      <td>8.009091</td>\n","      <td>treylon-burks-1</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>8.110955</td>\n","      <td>8.600000</td>\n","      <td>wandale-robinson-1</td>\n","    </tr>\n","    <tr>\n","      <th>27</th>\n","      <td>6.742564</td>\n","      <td>5.525000</td>\n","      <td>tyquan-thornton-1</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>9.542166</td>\n","      <td>9.794118</td>\n","      <td>george-pickens-1</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>9.599899</td>\n","      <td>7.018750</td>\n","      <td>alec-pierce-2</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>8.226592</td>\n","      <td>3.528571</td>\n","      <td>skyy-moore-1</td>\n","    </tr>\n","    <tr>\n","      <th>31</th>\n","      <td>6.514727</td>\n","      <td>4.222222</td>\n","      <td>velus-jones-jr-1</td>\n","    </tr>\n","    <tr>\n","      <th>32</th>\n","      <td>6.800536</td>\n","      <td>1.600000</td>\n","      <td>jalen-tolbert-1</td>\n","    </tr>\n","    <tr>\n","      <th>33</th>\n","      <td>6.882214</td>\n","      <td>3.242857</td>\n","      <td>david-bell-6</td>\n","    </tr>\n","    <tr>\n","      <th>34</th>\n","      <td>6.215411</td>\n","      <td>0.580000</td>\n","      <td>danny-gray-1</td>\n","    </tr>\n","    <tr>\n","      <th>35</th>\n","      <td>6.702398</td>\n","      <td>1.300000</td>\n","      <td>erik-ezukanma-1</td>\n","    </tr>\n","    <tr>\n","      <th>36</th>\n","      <td>5.536832</td>\n","      <td>7.815385</td>\n","      <td>romeo-doubs-1</td>\n","    </tr>\n","    <tr>\n","      <th>37</th>\n","      <td>5.202643</td>\n","      <td>3.410000</td>\n","      <td>khalil-shakir-1</td>\n","    </tr>\n","    <tr>\n","      <th>38</th>\n","      <td>4.613800</td>\n","      <td>3.950000</td>\n","      <td>kyle-philips-4</td>\n","    </tr>\n","    <tr>\n","      <th>39</th>\n","      <td>5.440940</td>\n","      <td>6.580000</td>\n","      <td>jalen-nailor-1</td>\n","    </tr>\n","    <tr>\n","      <th>40</th>\n","      <td>8.605513</td>\n","      <td>8.811765</td>\n","      <td>jaxon-smith-njigba-1</td>\n","    </tr>\n","    <tr>\n","      <th>41</th>\n","      <td>8.500097</td>\n","      <td>5.529412</td>\n","      <td>quentin-johnston-1</td>\n","    </tr>\n","    <tr>\n","      <th>42</th>\n","      <td>8.831044</td>\n","      <td>12.900001</td>\n","      <td>zay-flowers-1</td>\n","    </tr>\n","    <tr>\n","      <th>43</th>\n","      <td>9.695175</td>\n","      <td>13.017647</td>\n","      <td>jordan-addison-1</td>\n","    </tr>\n","    <tr>\n","      <th>44</th>\n","      <td>8.752301</td>\n","      <td>5.653333</td>\n","      <td>jonathan-mingo-1</td>\n","    </tr>\n","    <tr>\n","      <th>45</th>\n","      <td>7.449189</td>\n","      <td>13.575000</td>\n","      <td>jayden-reed-1</td>\n","    </tr>\n","    <tr>\n","      <th>46</th>\n","      <td>7.034698</td>\n","      <td>13.281250</td>\n","      <td>rashee-rice-1</td>\n","    </tr>\n","    <tr>\n","      <th>47</th>\n","      <td>6.318723</td>\n","      <td>4.980000</td>\n","      <td>marvin-mims-1</td>\n","    </tr>\n","    <tr>\n","      <th>48</th>\n","      <td>6.423141</td>\n","      <td>16.500000</td>\n","      <td>nathaniel-dell-1</td>\n","    </tr>\n","    <tr>\n","      <th>49</th>\n","      <td>7.153822</td>\n","      <td>4.638462</td>\n","      <td>jalin-hyatt-1</td>\n","    </tr>\n","    <tr>\n","      <th>50</th>\n","      <td>7.429742</td>\n","      <td>4.018182</td>\n","      <td>cedric-tillman-1</td>\n","    </tr>\n","    <tr>\n","      <th>51</th>\n","      <td>7.459593</td>\n","      <td>9.241176</td>\n","      <td>josh-downs-2</td>\n","    </tr>\n","    <tr>\n","      <th>52</th>\n","      <td>7.006469</td>\n","      <td>8.807692</td>\n","      <td>michael-wilson-3</td>\n","    </tr>\n","    <tr>\n","      <th>53</th>\n","      <td>5.853568</td>\n","      <td>5.523077</td>\n","      <td>tre-tucker-1</td>\n","    </tr>\n","    <tr>\n","      <th>54</th>\n","      <td>4.634777</td>\n","      <td>2.692857</td>\n","      <td>derius-davis-1</td>\n","    </tr>\n","    <tr>\n","      <th>55</th>\n","      <td>4.256420</td>\n","      <td>4.140000</td>\n","      <td>charlie-jones-7</td>\n","    </tr>\n","    <tr>\n","      <th>56</th>\n","      <td>5.462866</td>\n","      <td>2.761538</td>\n","      <td>tyler-scott-3</td>\n","    </tr>\n","    <tr>\n","      <th>57</th>\n","      <td>5.133433</td>\n","      <td>7.984000</td>\n","      <td>dontayvion-wicks-1</td>\n","    </tr>\n","    <tr>\n","      <th>58</th>\n","      <td>3.768976</td>\n","      <td>17.558824</td>\n","      <td>puka-nacua-1</td>\n","    </tr>\n","    <tr>\n","      <th>59</th>\n","      <td>5.015953</td>\n","      <td>6.533333</td>\n","      <td>parker-washington-1</td>\n","    </tr>\n","    <tr>\n","      <th>60</th>\n","      <td>4.655783</td>\n","      <td>1.300000</td>\n","      <td>kayshon-boutte-1</td>\n","    </tr>\n","    <tr>\n","      <th>61</th>\n","      <td>4.279882</td>\n","      <td>5.629412</td>\n","      <td>trey-palmer-1</td>\n","    </tr>\n","    <tr>\n","      <th>62</th>\n","      <td>4.154701</td>\n","      <td>7.575000</td>\n","      <td>at-perry-1</td>\n","    </tr>\n","    <tr>\n","      <th>63</th>\n","      <td>4.082565</td>\n","      <td>4.033333</td>\n","      <td>elijah-higgins-1</td>\n","    </tr>\n","    <tr>\n","      <th>64</th>\n","      <td>3.446225</td>\n","      <td>1.990909</td>\n","      <td>xavier-hutchinson-1</td>\n","    </tr>\n","    <tr>\n","      <th>65</th>\n","      <td>3.381146</td>\n","      <td>7.657143</td>\n","      <td>demario-douglas-1</td>\n","    </tr>\n","    <tr>\n","      <th>66</th>\n","      <td>1.848831</td>\n","      <td>0.600000</td>\n","      <td>antoine-green-1</td>\n","    </tr>\n","    <tr>\n","      <th>67</th>\n","      <td>2.785996</td>\n","      <td>4.133334</td>\n","      <td>jalen-brooks-2</td>\n","    </tr>\n","    <tr>\n","      <th>68</th>\n","      <td>0.636892</td>\n","      <td>3.850000</td>\n","      <td>ronnie-bell-3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-86f51c9a-1f45-4b8e-9d4a-e221e42a1430')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-86f51c9a-1f45-4b8e-9d4a-e221e42a1430 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-86f51c9a-1f45-4b8e-9d4a-e221e42a1430');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-dd7b4117-6326-4c82-96f1-e01587479233\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-dd7b4117-6326-4c82-96f1-e01587479233')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-dd7b4117-6326-4c82-96f1-e01587479233 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_182e07d8-5bc4-44f5-92e7-592d38f7ca68\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('zipped_data')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_182e07d8-5bc4-44f5-92e7-592d38f7ca68 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('zipped_data');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"zipped_data","summary":"{\n  \"name\": \"zipped_data\",\n  \"rows\": 69,\n  \"fields\": [\n    {\n      \"column\": \"predicted\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.267926324218508,\n        \"min\": 0.6368916707288239,\n        \"max\": 9.86260305647698,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          8.546373897056496,\n          9.568107597810888,\n          6.318723031276134\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"true\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.363174604210367,\n        \"min\": 0.15999999,\n        \"max\": 17.91764705882353,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          13.213333333333333,\n          17.91764705882353,\n          4.98\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"player\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 69,\n        \"samples\": [\n          \"chris-olave-1\",\n          \"jamarr-chase-1\",\n          \"marvin-mims-1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"markdown","source":["#### Feature Importance"],"metadata":{"id":"YJ6NRjH_E6lj"}},{"cell_type":"code","source":["# prompt: perform feature importance evaluation on model\n","\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","# Get feature importances\n","importances = model.coef_\n","\n","# Create a DataFrame for visualization\n","feature_importances = pd.DataFrame({'feature': features, 'importance': importances})\n","feature_importances = feature_importances.sort_values('importance', ascending=False)\n","\n","# Plotting feature importances\n","plt.figure(figsize=(10, 6))\n","sns.barplot(x='importance', y='feature', data=feature_importances)\n","plt.title('Feature Importances')\n","plt.xlabel('Importance')\n","plt.ylabel('Feature')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"ADqn0JahrECX","executionInfo":{"status":"ok","timestamp":1747073642982,"user_tz":300,"elapsed":370,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"outputId":"d45d0f30-9a96-490d-c17e-684521a1677d"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["## XGBoost"],"metadata":{"id":"X9qB-1gHsmZx"}},{"cell_type":"markdown","source":["#### Standard"],"metadata":{"id":"Wd1X_LIWaYo0"}},{"cell_type":"code","source":["# Define features (X) and target (y)\n","features = ['pick', 'age', 'htInches', 'wt','passAttempts','passYards','passTDs','passAirYds', 'teamTotRec', 'teamTotYds', 'teamTotTD', 'teamMaxRec', 'teamMaxYds', 'teamMaxTD']#,'college']\n","target = 'pprPointsPerWeek'\n","\n","X = dfWr[features]\n","y = dfWr[target]\n","\n","# Create a boolean mask to identify 2023 and 2024 data for testing\n","test_mask = dfWr['season'].isin([2023])\n","\n","# Split the data into training and testing sets based on the year\n","X_train = X[~test_mask]\n","X_test = X[test_mask]\n","y_train = y[~test_mask]\n","y_test = y[test_mask]\n","\n","# Initialize XGBoost regressor cross validation run\n","\n","model = xgb.XGBRegressor(\n","    objective='reg:squarederror',\n","    booster = 'gbtree',\n","    max_depth=3,\n","    learning_rate=0.1,\n","    n_estimators=100,\n","    random_state=42,\n","    reg_alpha=1,\n","    gamma=1\n",")\n","\n","# Train the model\n","model.fit(X_train, y_train)\n","\n","# Predict on test set\n","y_pred = model.predict(X_test)\n","\n","# Evaluate model\n","r2_XGBoost = r2_score(y_test, y_pred)\n","rmse = np.sqrt(np.mean((y_test - y_pred)**2))\n","print(f\"r-squared: {r2_XGBoost:.2f}\")\n","print(f\"RMSE: {rmse:.2f}\")\n","\n","zipped_data = pd.DataFrame(list(zip(y_pred, y_test, dfWr['cfb_player_id'][test_mask])), columns = ('predicted','true','player'))\n","display(zipped_data.head())\n","\n","# Create a TreeExplainer\n","explainer = shap.TreeExplainer(model)\n","\n","# Compute SHAP values\n","shap_values = explainer.shap_values(X_test)\n","\n","shap_values = explainer.shap_values(X_test)\n","shap.summary_plot(shap_values, X_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":999},"id":"plXnkSsOtDne","executionInfo":{"status":"ok","timestamp":1747088733431,"user_tz":300,"elapsed":1585,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"outputId":"3a6e80e2-e924-4785-9c09-5c5522a20ebb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["r-squared: 0.19\n","RMSE: 3.97\n"]},{"output_type":"display_data","data":{"text/plain":["   predicted       true                player\n","0   7.775856   8.811765  jaxon-smith-njigba-1\n","1   7.334951   5.529412    quentin-johnston-1\n","2  10.701186  12.900001         zay-flowers-1\n","3   9.094383  13.017647      jordan-addison-1\n","4   6.572940   5.653333      jonathan-mingo-1"],"text/html":["\n","  <div id=\"df-a97250a4-b269-4a7a-992e-00acb38f8129\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>predicted</th>\n","      <th>true</th>\n","      <th>player</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>7.775856</td>\n","      <td>8.811765</td>\n","      <td>jaxon-smith-njigba-1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>7.334951</td>\n","      <td>5.529412</td>\n","      <td>quentin-johnston-1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>10.701186</td>\n","      <td>12.900001</td>\n","      <td>zay-flowers-1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>9.094383</td>\n","      <td>13.017647</td>\n","      <td>jordan-addison-1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>6.572940</td>\n","      <td>5.653333</td>\n","      <td>jonathan-mingo-1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a97250a4-b269-4a7a-992e-00acb38f8129')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a97250a4-b269-4a7a-992e-00acb38f8129 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a97250a4-b269-4a7a-992e-00acb38f8129');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-26cdf545-78f1-4e81-abf7-f79c346a1d27\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-26cdf545-78f1-4e81-abf7-f79c346a1d27')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-26cdf545-78f1-4e81-abf7-f79c346a1d27 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"shap\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"predicted\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          7.334950923919678,\n          6.572940349578857,\n          10.701186180114746\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"true\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.690043343596222,\n        \"min\": 5.529411764705882,\n        \"max\": 13.01764705882353,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          5.529411764705882,\n          5.653333333333333,\n          12.900000625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"player\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"quentin-johnston-1\",\n          \"jonathan-mingo-1\",\n          \"zay-flowers-1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"stream","name":"stderr","text":["<ipython-input-31-13b7cb81fade>:52: FutureWarning: The NumPy global RNG was seeded by calling `np.random.seed`. In a future version this function will no longer use the global RNG. Pass `rng` explicitly to opt-in to the new behaviour and silence this warning.\n","  shap.summary_plot(shap_values, X_test)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x710 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["#### Quantile Regression"],"metadata":{"id":"1hmpF8T2dAU0"}},{"cell_type":"code","source":["def quantile_loss(df, test_mask):\n","\n","    \"\"\"Train a quantile regression model.\"\"\"\n","    \"\"\"https://xgboost.readthedocs.io/en/stable/python/examples/quantile_regression.html\"\"\"\n","\n","    X = dfWr[features]\n","    y = dfWr[target]\n","\n","    # Split the data into training and testing sets based on the year\n","    X_train = X[~test_mask]\n","    X_test = X[test_mask]\n","    y_train = y[~test_mask]\n","    y_test = y[test_mask]\n","\n","    # Train on 0.05 and 0.95 quantiles. The model is similar to multi-class and\n","    # multi-target models.\n","    alpha = np.array([0.05, 0.5, 0.95])\n","    evals_result: Dict[str, Dict] = {}\n","\n","    # We will be using the `hist` tree method, quantile DMatrix can be used to preserve\n","    # memory (which has nothing to do with quantile regression itself, see its document\n","    # for details).\n","    # Do not use the `exact` tree method for quantile regression, otherwise the\n","    # performance might drop.\n","    Xy = xgb.QuantileDMatrix(X_train, y_train)\n","    # use Xy as a reference\n","    Xy_test = xgb.QuantileDMatrix(X_test, y_test, ref=Xy)\n","\n","    booster = xgb.train(\n","        {\n","            # Use the quantile objective function.\n","            \"objective\": \"reg:quantileerror\",\n","            \"quantile_alpha\": alpha,\n","            # Let's try not to overfit.\n","            \"learning_rate\": 0.08,\n","            \"n_estimators\": 100,\n","            \"max_depth\": 3,\n","            \"reg_alpha\": 1,\n","            \"booster\": \"gbtree\",\n","            \"gamma\":0.1\n","        },\n","        Xy,\n","        num_boost_round=64,\n","        early_stopping_rounds=2,\n","        # The evaluation result is a weighted average across multiple quantiles.\n","        evals=[(Xy, \"Train\"), (Xy_test, \"Test\")],\n","        evals_result=evals_result,\n","    )\n","\n","    scores = booster.inplace_predict(X_test)\n","    # dim 1 is the quantiles\n","    assert scores.shape[0] == X_test.shape[0]\n","    assert scores.shape[1] == alpha.shape[0]\n","\n","    y_lower = scores[:, 0]  # alpha=0.05\n","    y_med = scores[:, 1]  # alpha=0.5, median\n","    y_upper = scores[:, 2]  # alpha=0.95\n","\n","    # Train a mse model for comparison\n","    booster = xgb.train(\n","        {\n","            # Use the quantile objective function.\n","            \"objective\": \"reg:squarederror\",\n","            \"quantile_alpha\": alpha,\n","            # Let's try not to overfit.\n","            \"learning_rate\": 0.08,\n","            \"n_estimators\": 100,\n","            \"max_depth\": 3,\n","            \"reg_alpha\": 1,\n","            \"booster\": \"gbtree\"\n","        },\n","        Xy,\n","        num_boost_round=64,\n","        early_stopping_rounds=2,\n","        evals=[(Xy, \"Train\"), (Xy_test, \"Test\")],\n","        evals_result=evals_result,\n","    )\n","\n","    return y_upper, y_med, y_lower, scores, y_test"],"metadata":{"id":"6yaGYBradAeI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Create a boolean mask to identify 2023 and 2024 data for testing\n","test_mask = dfWr['season'].isin([2023])\n","\n","upper, med, lower, standard, true = quantile_loss(dfWr, test_mask)\n","\n","zipped_data = pd.DataFrame(list(zip(upper, med, lower, true, standard,dfWr['cfb_player_id'][test_mask])), columns = ('upper','med','lower','true','standard','player'))\n","display(zipped_data.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":882},"id":"vVT-y7nteH3t","executionInfo":{"status":"ok","timestamp":1747087801993,"user_tz":300,"elapsed":1081,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"outputId":"4ca372d9-9695-4998-fba4-f4fe4eb58616"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0]\tTrain-quantile:1.30366\tTest-quantile:2.02806\n","[1]\tTrain-quantile:1.15712\tTest-quantile:1.84366\n","[2]\tTrain-quantile:1.04013\tTest-quantile:1.68878\n","[3]\tTrain-quantile:0.94809\tTest-quantile:1.58669\n","[4]\tTrain-quantile:0.88050\tTest-quantile:1.48383\n","[5]\tTrain-quantile:0.81922\tTest-quantile:1.42877\n","[6]\tTrain-quantile:0.77970\tTest-quantile:1.38425\n","[7]\tTrain-quantile:0.74352\tTest-quantile:1.36565\n","[8]\tTrain-quantile:0.71643\tTest-quantile:1.33091\n","[9]\tTrain-quantile:0.69354\tTest-quantile:1.31616\n","[10]\tTrain-quantile:0.67060\tTest-quantile:1.31174\n","[11]\tTrain-quantile:0.65430\tTest-quantile:1.24671\n","[12]\tTrain-quantile:0.63887\tTest-quantile:1.22833\n","[13]\tTrain-quantile:0.62525\tTest-quantile:1.22134\n","[14]\tTrain-quantile:0.61369\tTest-quantile:1.21583\n","[15]\tTrain-quantile:0.60372\tTest-quantile:1.20976\n","[16]\tTrain-quantile:0.59471\tTest-quantile:1.21287\n","[17]\tTrain-quantile:0.58663\tTest-quantile:1.20892\n","[18]\tTrain-quantile:0.58011\tTest-quantile:1.18901\n","[19]\tTrain-quantile:0.57372\tTest-quantile:1.19129\n","[20]\tTrain-quantile:0.56547\tTest-quantile:1.19123\n","[0]\tTrain-rmse:4.06716\tTest-rmse:4.35623\n","[1]\tTrain-rmse:3.97097\tTest-rmse:4.29212\n","[2]\tTrain-rmse:3.88649\tTest-rmse:4.27147\n","[3]\tTrain-rmse:3.81272\tTest-rmse:4.24085\n","[4]\tTrain-rmse:3.73589\tTest-rmse:4.18951\n","[5]\tTrain-rmse:3.67247\tTest-rmse:4.17845\n","[6]\tTrain-rmse:3.60967\tTest-rmse:4.14691\n","[7]\tTrain-rmse:3.55478\tTest-rmse:4.13968\n","[8]\tTrain-rmse:3.49936\tTest-rmse:4.10870\n","[9]\tTrain-rmse:3.45848\tTest-rmse:4.10342\n","[10]\tTrain-rmse:3.41396\tTest-rmse:4.09972\n","[11]\tTrain-rmse:3.37882\tTest-rmse:4.09336\n","[12]\tTrain-rmse:3.34104\tTest-rmse:4.09604\n","[13]\tTrain-rmse:3.30690\tTest-rmse:4.08069\n","[14]\tTrain-rmse:3.27626\tTest-rmse:4.08811\n","[15]\tTrain-rmse:3.23853\tTest-rmse:4.09677\n"]},{"output_type":"display_data","data":{"text/plain":["       upper       med     lower       true                          standard  \\\n","0  13.614499  9.403683  3.734893   8.811765  [3.7348926, 9.403683, 13.614499]   \n","1  12.980460  8.813925  2.886209   5.529412    [2.886209, 8.813925, 12.98046]   \n","2  12.098707  9.385679  3.635317  12.900001  [3.6353166, 9.385679, 12.098707]   \n","3  12.401984  7.868732  4.945590  13.017647   [4.94559, 7.8687325, 12.401984]   \n","4  13.117706  7.739063  4.176102   5.653333  [4.176102, 7.7390633, 13.117706]   \n","\n","                 player  \n","0  jaxon-smith-njigba-1  \n","1    quentin-johnston-1  \n","2         zay-flowers-1  \n","3      jordan-addison-1  \n","4      jonathan-mingo-1  "],"text/html":["\n","  <div id=\"df-28e4338b-b2d8-456b-8974-5eb732f98818\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>upper</th>\n","      <th>med</th>\n","      <th>lower</th>\n","      <th>true</th>\n","      <th>standard</th>\n","      <th>player</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>13.614499</td>\n","      <td>9.403683</td>\n","      <td>3.734893</td>\n","      <td>8.811765</td>\n","      <td>[3.7348926, 9.403683, 13.614499]</td>\n","      <td>jaxon-smith-njigba-1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>12.980460</td>\n","      <td>8.813925</td>\n","      <td>2.886209</td>\n","      <td>5.529412</td>\n","      <td>[2.886209, 8.813925, 12.98046]</td>\n","      <td>quentin-johnston-1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>12.098707</td>\n","      <td>9.385679</td>\n","      <td>3.635317</td>\n","      <td>12.900001</td>\n","      <td>[3.6353166, 9.385679, 12.098707]</td>\n","      <td>zay-flowers-1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>12.401984</td>\n","      <td>7.868732</td>\n","      <td>4.945590</td>\n","      <td>13.017647</td>\n","      <td>[4.94559, 7.8687325, 12.401984]</td>\n","      <td>jordan-addison-1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>13.117706</td>\n","      <td>7.739063</td>\n","      <td>4.176102</td>\n","      <td>5.653333</td>\n","      <td>[4.176102, 7.7390633, 13.117706]</td>\n","      <td>jonathan-mingo-1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-28e4338b-b2d8-456b-8974-5eb732f98818')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-28e4338b-b2d8-456b-8974-5eb732f98818 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-28e4338b-b2d8-456b-8974-5eb732f98818');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-6e09e7f0-794a-4010-9483-7febfa6e889a\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6e09e7f0-794a-4010-9483-7febfa6e889a')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-6e09e7f0-794a-4010-9483-7febfa6e889a button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display(zipped_data\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"upper\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          12.980460166931152,\n          13.117706298828125,\n          12.09870719909668\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"med\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          8.813924789428711,\n          7.739063262939453,\n          9.385679244995117\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lower\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2.886209011077881,\n          4.176102161407471,\n          3.6353166103363037\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"true\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.690043343596222,\n        \"min\": 5.529411764705882,\n        \"max\": 13.01764705882353,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          5.529411764705882,\n          5.653333333333333,\n          12.900000625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"standard\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"player\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"quentin-johnston-1\",\n          \"jonathan-mingo-1\",\n          \"zay-flowers-1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"markdown","source":["## Light GBM"],"metadata":{"id":"8-oaWSAjR_-Q"}},{"cell_type":"markdown","source":["#### Standard"],"metadata":{"id":"kjUg7z9bY3fi"}},{"cell_type":"code","source":["# Define feature columns and target\n","features = [\n","    'pick', 'age', 'htInches', 'wt',\n","    'passAttempts', 'passYards', 'passTDs', 'passAirYds',\n","    'teamTotRec', 'teamTotYds', 'teamTotTD',\n","    'teamMaxRec', 'teamMaxYds', 'teamMaxTD'\n","]\n","target = 'pprPointsPerWeek'\n","\n","# Split into dependent and independent variables\n","X = dfWr[features]\n","y = dfWr[target]\n","\n","# Create a boolean mask to identify 2023 and 2024 data for testing\n","test_mask = dfWr['season'].isin([2021,2022,2023])\n","\n","# Split the data into training and testing sets based on the year\n","X_train = X[~test_mask]\n","X_test = X[test_mask]\n","y_train = y[~test_mask]\n","y_test = y[test_mask]\n","\n","# Create LightGBM dataset\n","train_data = lgb.Dataset(X_train, label=y_train)\n","test_data = lgb.Dataset(X_test, label=y_test)\n","\n","# Set up LightGBM parameters\n","params = {\n","    'objective': 'regression',\n","    'metric': 'rmse',\n","    'boosting_type': 'gbdt',\n","    'learning_rate': 0.01,\n","    'num_leaves': 10,\n","    'verbose': -1\n","}\n","\n","# Train model\n","model = lgb.train(params, train_data, valid_sets=[test_data])\n","\n","# Predict on test set\n","y_pred = model.predict(X_test, num_iteration=model.best_iteration)\n","\n","# Evaluate\n","r2_lgb = r2_score(y_test, y_pred)\n","rmse = np.sqrt(np.mean((y_test - y_pred)**2))\n","print(f\"r-squared: {r2_lgb:.2f}\")\n","print(f\"RMSE: {rmse:.2f}\")\n","\n","zipped_data = pd.DataFrame(list(zip(y_pred, y_test, dfWr['cfb_player_id'][test_mask])), columns = ('predicted','true','player'))\n","display(zipped_data)\n","\n","# Create a TreeExplainer\n","explainer = shap.TreeExplainer(model)\n","\n","# Compute SHAP values\n","shap_values = explainer.shap_values(X_test)\n","\n","shap_values = explainer.shap_values(X_test)\n","shap.summary_plot(shap_values, X_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"r-V2XQIRR_eT","executionInfo":{"status":"ok","timestamp":1747084951036,"user_tz":300,"elapsed":3042,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"outputId":"8cc49f86-b095-43a3-eed5-9a30eed64eb4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["r-squared: 0.18\n","RMSE: 3.92\n"]},{"output_type":"display_data","data":{"text/plain":["    predicted       true                  player\n","0    9.006492  17.917647          jamarr-chase-1\n","1    7.344340   9.151111        kadarius-toney-1\n","2    8.660217   8.625000        rashod-bateman-1\n","3    8.473843   7.935714         rondale-moore-1\n","4    6.109447   3.537500       dwayne-eskridge-1\n","5    6.482084   2.733333   terrace-marshall-jr-1\n","6    5.813006   3.122222           dyami-brown-1\n","7    5.912012   2.400000         amari-rodgers-1\n","8    5.404277   5.971429          nico-collins-1\n","9    6.114776   2.783333      anthony-schwartz-1\n","10   6.029599   5.300000       dez-fitzpatrick-1\n","11   5.961304  14.206250      amon-ra-st-brown-1\n","12   5.510673   1.628571         jaelon-darden-1\n","13   5.528048   1.075000         tylan-wallace-1\n","14   5.663010   9.533333  ihmir-smith-marsette-1\n","15   5.418172   1.200000           frank-darby-1\n","16   5.044754   0.160000          racey-mcmath-1\n","17   5.276642   4.400000         seth-williams-1\n","18   5.028775   1.433333          dazz-newsome-1\n","19   5.005475   3.471429         ben-skowronek-1\n","20   7.775896  10.505882          drake-london-1\n","21   7.530907  12.688235        garrett-wilson-2\n","22   8.540427  13.213333           chris-olave-1\n","23   9.511575   2.516667      jameson-williams-1\n","24   9.185635  10.883333          jahan-dotson-1\n","25   8.109814   8.009091         treylon-burks-1\n","26   7.100071   8.600000      wandale-robinson-1\n","27   7.524263   5.525000       tyquan-thornton-1\n","28   7.523643   9.794118        george-pickens-1\n","29   8.501307   7.018750           alec-pierce-2\n","30   7.758358   3.528571            skyy-moore-1\n","31   7.020230   4.222222        velus-jones-jr-1\n","32   6.029569   1.600000         jalen-tolbert-1\n","33   7.398324   3.242857            david-bell-6\n","34   5.868744   0.580000            danny-gray-1\n","35   5.190837   1.300000         erik-ezukanma-1\n","36   5.588307   7.815385           romeo-doubs-1\n","37   5.322887   3.410000         khalil-shakir-1\n","38   5.819197   3.950000          kyle-philips-4\n","39   5.322887   6.580000          jalen-nailor-1\n","40   8.901832   8.811765    jaxon-smith-njigba-1\n","41   7.665338   5.529412      quentin-johnston-1\n","42   7.612841  12.900001           zay-flowers-1\n","43   9.451480  13.017647        jordan-addison-1\n","44   8.367276   5.653333        jonathan-mingo-1\n","45   6.770047  13.575000           jayden-reed-1\n","46   6.880518  13.281250           rashee-rice-1\n","47   7.431855   4.980000           marvin-mims-1\n","48   7.267825  16.500000        nathaniel-dell-1\n","49   7.141707   4.638462           jalin-hyatt-1\n","50   6.753291   4.018182        cedric-tillman-1\n","51   5.689497   9.241176            josh-downs-2\n","52   6.466247   8.807692        michael-wilson-3\n","53   5.905656   5.523077            tre-tucker-1\n","54   5.983860   2.692857          derius-davis-1\n","55   5.693411   4.140000         charlie-jones-7\n","56   5.512439   2.761538           tyler-scott-3\n","57   5.816484   7.984000      dontayvion-wicks-1\n","58   5.041105  17.558824            puka-nacua-1\n","59   5.762312   6.533333     parker-washington-1\n","60   5.647601   1.300000        kayshon-boutte-1\n","61   5.341116   5.629412           trey-palmer-1\n","62   5.453475   7.575000              at-perry-1\n","63   5.322887   4.033333        elijah-higgins-1\n","64   5.145878   1.990909     xavier-hutchinson-1\n","65   5.473514   7.657143       demario-douglas-1\n","66   4.965145   0.600000         antoine-green-1\n","67   5.490598   4.133334          jalen-brooks-2\n","68   4.722879   3.850000           ronnie-bell-3"],"text/html":["\n","  <div id=\"df-5eda261c-2d05-44ef-bb7a-456d91e9c733\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>predicted</th>\n","      <th>true</th>\n","      <th>player</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>9.006492</td>\n","      <td>17.917647</td>\n","      <td>jamarr-chase-1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>7.344340</td>\n","      <td>9.151111</td>\n","      <td>kadarius-toney-1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>8.660217</td>\n","      <td>8.625000</td>\n","      <td>rashod-bateman-1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>8.473843</td>\n","      <td>7.935714</td>\n","      <td>rondale-moore-1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>6.109447</td>\n","      <td>3.537500</td>\n","      <td>dwayne-eskridge-1</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>6.482084</td>\n","      <td>2.733333</td>\n","      <td>terrace-marshall-jr-1</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>5.813006</td>\n","      <td>3.122222</td>\n","      <td>dyami-brown-1</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>5.912012</td>\n","      <td>2.400000</td>\n","      <td>amari-rodgers-1</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>5.404277</td>\n","      <td>5.971429</td>\n","      <td>nico-collins-1</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>6.114776</td>\n","      <td>2.783333</td>\n","      <td>anthony-schwartz-1</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>6.029599</td>\n","      <td>5.300000</td>\n","      <td>dez-fitzpatrick-1</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>5.961304</td>\n","      <td>14.206250</td>\n","      <td>amon-ra-st-brown-1</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>5.510673</td>\n","      <td>1.628571</td>\n","      <td>jaelon-darden-1</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>5.528048</td>\n","      <td>1.075000</td>\n","      <td>tylan-wallace-1</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>5.663010</td>\n","      <td>9.533333</td>\n","      <td>ihmir-smith-marsette-1</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>5.418172</td>\n","      <td>1.200000</td>\n","      <td>frank-darby-1</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>5.044754</td>\n","      <td>0.160000</td>\n","      <td>racey-mcmath-1</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>5.276642</td>\n","      <td>4.400000</td>\n","      <td>seth-williams-1</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>5.028775</td>\n","      <td>1.433333</td>\n","      <td>dazz-newsome-1</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>5.005475</td>\n","      <td>3.471429</td>\n","      <td>ben-skowronek-1</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>7.775896</td>\n","      <td>10.505882</td>\n","      <td>drake-london-1</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>7.530907</td>\n","      <td>12.688235</td>\n","      <td>garrett-wilson-2</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>8.540427</td>\n","      <td>13.213333</td>\n","      <td>chris-olave-1</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>9.511575</td>\n","      <td>2.516667</td>\n","      <td>jameson-williams-1</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>9.185635</td>\n","      <td>10.883333</td>\n","      <td>jahan-dotson-1</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>8.109814</td>\n","      <td>8.009091</td>\n","      <td>treylon-burks-1</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>7.100071</td>\n","      <td>8.600000</td>\n","      <td>wandale-robinson-1</td>\n","    </tr>\n","    <tr>\n","      <th>27</th>\n","      <td>7.524263</td>\n","      <td>5.525000</td>\n","      <td>tyquan-thornton-1</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>7.523643</td>\n","      <td>9.794118</td>\n","      <td>george-pickens-1</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>8.501307</td>\n","      <td>7.018750</td>\n","      <td>alec-pierce-2</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>7.758358</td>\n","      <td>3.528571</td>\n","      <td>skyy-moore-1</td>\n","    </tr>\n","    <tr>\n","      <th>31</th>\n","      <td>7.020230</td>\n","      <td>4.222222</td>\n","      <td>velus-jones-jr-1</td>\n","    </tr>\n","    <tr>\n","      <th>32</th>\n","      <td>6.029569</td>\n","      <td>1.600000</td>\n","      <td>jalen-tolbert-1</td>\n","    </tr>\n","    <tr>\n","      <th>33</th>\n","      <td>7.398324</td>\n","      <td>3.242857</td>\n","      <td>david-bell-6</td>\n","    </tr>\n","    <tr>\n","      <th>34</th>\n","      <td>5.868744</td>\n","      <td>0.580000</td>\n","      <td>danny-gray-1</td>\n","    </tr>\n","    <tr>\n","      <th>35</th>\n","      <td>5.190837</td>\n","      <td>1.300000</td>\n","      <td>erik-ezukanma-1</td>\n","    </tr>\n","    <tr>\n","      <th>36</th>\n","      <td>5.588307</td>\n","      <td>7.815385</td>\n","      <td>romeo-doubs-1</td>\n","    </tr>\n","    <tr>\n","      <th>37</th>\n","      <td>5.322887</td>\n","      <td>3.410000</td>\n","      <td>khalil-shakir-1</td>\n","    </tr>\n","    <tr>\n","      <th>38</th>\n","      <td>5.819197</td>\n","      <td>3.950000</td>\n","      <td>kyle-philips-4</td>\n","    </tr>\n","    <tr>\n","      <th>39</th>\n","      <td>5.322887</td>\n","      <td>6.580000</td>\n","      <td>jalen-nailor-1</td>\n","    </tr>\n","    <tr>\n","      <th>40</th>\n","      <td>8.901832</td>\n","      <td>8.811765</td>\n","      <td>jaxon-smith-njigba-1</td>\n","    </tr>\n","    <tr>\n","      <th>41</th>\n","      <td>7.665338</td>\n","      <td>5.529412</td>\n","      <td>quentin-johnston-1</td>\n","    </tr>\n","    <tr>\n","      <th>42</th>\n","      <td>7.612841</td>\n","      <td>12.900001</td>\n","      <td>zay-flowers-1</td>\n","    </tr>\n","    <tr>\n","      <th>43</th>\n","      <td>9.451480</td>\n","      <td>13.017647</td>\n","      <td>jordan-addison-1</td>\n","    </tr>\n","    <tr>\n","      <th>44</th>\n","      <td>8.367276</td>\n","      <td>5.653333</td>\n","      <td>jonathan-mingo-1</td>\n","    </tr>\n","    <tr>\n","      <th>45</th>\n","      <td>6.770047</td>\n","      <td>13.575000</td>\n","      <td>jayden-reed-1</td>\n","    </tr>\n","    <tr>\n","      <th>46</th>\n","      <td>6.880518</td>\n","      <td>13.281250</td>\n","      <td>rashee-rice-1</td>\n","    </tr>\n","    <tr>\n","      <th>47</th>\n","      <td>7.431855</td>\n","      <td>4.980000</td>\n","      <td>marvin-mims-1</td>\n","    </tr>\n","    <tr>\n","      <th>48</th>\n","      <td>7.267825</td>\n","      <td>16.500000</td>\n","      <td>nathaniel-dell-1</td>\n","    </tr>\n","    <tr>\n","      <th>49</th>\n","      <td>7.141707</td>\n","      <td>4.638462</td>\n","      <td>jalin-hyatt-1</td>\n","    </tr>\n","    <tr>\n","      <th>50</th>\n","      <td>6.753291</td>\n","      <td>4.018182</td>\n","      <td>cedric-tillman-1</td>\n","    </tr>\n","    <tr>\n","      <th>51</th>\n","      <td>5.689497</td>\n","      <td>9.241176</td>\n","      <td>josh-downs-2</td>\n","    </tr>\n","    <tr>\n","      <th>52</th>\n","      <td>6.466247</td>\n","      <td>8.807692</td>\n","      <td>michael-wilson-3</td>\n","    </tr>\n","    <tr>\n","      <th>53</th>\n","      <td>5.905656</td>\n","      <td>5.523077</td>\n","      <td>tre-tucker-1</td>\n","    </tr>\n","    <tr>\n","      <th>54</th>\n","      <td>5.983860</td>\n","      <td>2.692857</td>\n","      <td>derius-davis-1</td>\n","    </tr>\n","    <tr>\n","      <th>55</th>\n","      <td>5.693411</td>\n","      <td>4.140000</td>\n","      <td>charlie-jones-7</td>\n","    </tr>\n","    <tr>\n","      <th>56</th>\n","      <td>5.512439</td>\n","      <td>2.761538</td>\n","      <td>tyler-scott-3</td>\n","    </tr>\n","    <tr>\n","      <th>57</th>\n","      <td>5.816484</td>\n","      <td>7.984000</td>\n","      <td>dontayvion-wicks-1</td>\n","    </tr>\n","    <tr>\n","      <th>58</th>\n","      <td>5.041105</td>\n","      <td>17.558824</td>\n","      <td>puka-nacua-1</td>\n","    </tr>\n","    <tr>\n","      <th>59</th>\n","      <td>5.762312</td>\n","      <td>6.533333</td>\n","      <td>parker-washington-1</td>\n","    </tr>\n","    <tr>\n","      <th>60</th>\n","      <td>5.647601</td>\n","      <td>1.300000</td>\n","      <td>kayshon-boutte-1</td>\n","    </tr>\n","    <tr>\n","      <th>61</th>\n","      <td>5.341116</td>\n","      <td>5.629412</td>\n","      <td>trey-palmer-1</td>\n","    </tr>\n","    <tr>\n","      <th>62</th>\n","      <td>5.453475</td>\n","      <td>7.575000</td>\n","      <td>at-perry-1</td>\n","    </tr>\n","    <tr>\n","      <th>63</th>\n","      <td>5.322887</td>\n","      <td>4.033333</td>\n","      <td>elijah-higgins-1</td>\n","    </tr>\n","    <tr>\n","      <th>64</th>\n","      <td>5.145878</td>\n","      <td>1.990909</td>\n","      <td>xavier-hutchinson-1</td>\n","    </tr>\n","    <tr>\n","      <th>65</th>\n","      <td>5.473514</td>\n","      <td>7.657143</td>\n","      <td>demario-douglas-1</td>\n","    </tr>\n","    <tr>\n","      <th>66</th>\n","      <td>4.965145</td>\n","      <td>0.600000</td>\n","      <td>antoine-green-1</td>\n","    </tr>\n","    <tr>\n","      <th>67</th>\n","      <td>5.490598</td>\n","      <td>4.133334</td>\n","      <td>jalen-brooks-2</td>\n","    </tr>\n","    <tr>\n","      <th>68</th>\n","      <td>4.722879</td>\n","      <td>3.850000</td>\n","      <td>ronnie-bell-3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5eda261c-2d05-44ef-bb7a-456d91e9c733')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5eda261c-2d05-44ef-bb7a-456d91e9c733 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5eda261c-2d05-44ef-bb7a-456d91e9c733');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-4422c51c-3146-4ffa-b676-73b5fa5460b3\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4422c51c-3146-4ffa-b676-73b5fa5460b3')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-4422c51c-3146-4ffa-b676-73b5fa5460b3 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_c644879e-bc2f-4580-98c0-bed43b301f75\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('zipped_data')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_c644879e-bc2f-4580-98c0-bed43b301f75 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('zipped_data');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"zipped_data","summary":"{\n  \"name\": \"zipped_data\",\n  \"rows\": 69,\n  \"fields\": [\n    {\n      \"column\": \"predicted\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.2955727256975895,\n        \"min\": 4.722878689677759,\n        \"max\": 9.511575082752113,\n        \"num_unique_values\": 67,\n        \"samples\": [\n          5.588306985543692,\n          5.044754063798479,\n          6.109447179103729\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"true\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.363174604210367,\n        \"min\": 0.15999999,\n        \"max\": 17.91764705882353,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          13.213333333333333,\n          17.91764705882353,\n          4.98\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"player\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 69,\n        \"samples\": [\n          \"chris-olave-1\",\n          \"jamarr-chase-1\",\n          \"marvin-mims-1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x710 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["#### Quantile Regression"],"metadata":{"id":"Q8dXPyVXY6W8"}},{"cell_type":"code","source":["# Define feature columns and target\n","features = [\n","    'pick', 'age', 'htInches', 'wt',\n","    'passAttempts', 'passYards', 'passTDs', 'passAirYds',\n","    'teamTotRec', 'teamTotYds', 'teamTotTD',\n","    'teamMaxRec', 'teamMaxYds', 'teamMaxTD'\n","]\n","target = 'pprPointsPerWeek'\n","\n","# Split into dependent and independent variables\n","X = dfWr[features]\n","y = dfWr[target]\n","\n","# Create a boolean mask to identify 2023 and 2024 data for testing\n","test_mask = dfWr['season'].isin([2021,2022,2023])\n","\n","# Split the data into training and testing sets based on the year\n","X_train = X[~test_mask]\n","X_test = X[test_mask]\n","y_train = y[~test_mask]\n","y_test = y[test_mask]\n","\n","# Create LightGBM dataset\n","train_data = lgb.Dataset(X_train, label=y_train)\n","test_data = lgb.Dataset(X_test, label=y_test)\n","\n","# Quantile levels\n","quantiles = [0.1, 0.5, 0.9]\n","models = {}\n","\n","for q in quantiles:\n","    params = {\n","        'objective': 'quantile',\n","        'alpha': q,\n","        'metric': 'quantile',\n","        'learning_rate': 0.05,\n","        'num_leaves': 31,\n","        'verbose': -1\n","    }\n","\n","    models[q] = lgb.train(\n","        params,\n","        lgb.Dataset(X_train, label=y_train),\n","        num_boost_round=100,\n","        valid_sets=[lgb.Dataset(X_test, label=y_test)]\n","    )"],"metadata":{"id":"wDtSMKvyY8-u"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["preds = {q: models[q].predict(X_test) for q in quantiles}\n","\n","pred_df = pd.DataFrame({\n","    'p10': preds[0.1],\n","    'p50': preds[0.5],\n","    'p90': preds[0.9],\n","    'true': y_test.reset_index(drop=True),\n","    'player': dfWr['cfb_player_id'][test_mask].reset_index(drop=True)\n","})\n","\n","display(pred_df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"yno4an7lZTna","executionInfo":{"status":"ok","timestamp":1747085424438,"user_tz":300,"elapsed":81,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"outputId":"b77036ac-b3cd-40fb-e327-002f58b9a04e"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["         p10        p50        p90       true                  player\n","0   5.430028  11.372669  13.344246  17.917647          jamarr-chase-1\n","1   3.282039   8.275217  11.264234   9.151111        kadarius-toney-1\n","2   2.692096   8.779327  11.871798   8.625000        rashod-bateman-1\n","3   5.304392   8.310055  11.914520   7.935714         rondale-moore-1\n","4   3.035401   6.206902   9.893139   3.537500       dwayne-eskridge-1\n","5   4.189470   5.600552   9.931711   2.733333   terrace-marshall-jr-1\n","6   2.257851   6.039941   9.604217   3.122222           dyami-brown-1\n","7   2.861846   4.873810   9.438075   2.400000         amari-rodgers-1\n","8   2.187807   3.905931   9.854877   5.971429          nico-collins-1\n","9   2.893679   4.458262  10.793064   2.783333      anthony-schwartz-1\n","10  1.975623   4.779189   9.035207   5.300000       dez-fitzpatrick-1\n","11  2.491857   5.127617  10.062276  14.206250      amon-ra-st-brown-1\n","12  1.079338   5.353181   7.890275   1.628571         jaelon-darden-1\n","13  1.260406   3.856743   8.624296   1.075000         tylan-wallace-1\n","14  2.589508   5.047272   9.259497   9.533333  ihmir-smith-marsette-1\n","15  2.640345   4.288457   7.891831   1.200000           frank-darby-1\n","16  0.615370   3.458604   8.243389   0.160000          racey-mcmath-1\n","17  0.379925   4.245337   7.800098   4.400000         seth-williams-1\n","18  2.644787   3.793316   8.610356   1.433333          dazz-newsome-1\n","19  0.449530   3.431449   9.322883   3.471429         ben-skowronek-1\n","20  3.698053   9.631727  12.700686  10.505882          drake-london-1\n","21  3.288021   7.850413  11.604483  12.688235        garrett-wilson-2\n","22  4.449275   8.745807  11.341491  13.213333           chris-olave-1\n","23  4.909830  10.634584  13.298176   2.516667      jameson-williams-1\n","24  4.483345   9.939171  12.090211  10.883333          jahan-dotson-1\n","25  4.465230   9.413033  12.092280   8.009091         treylon-burks-1\n","26  4.654057   7.421115  10.907305   8.600000      wandale-robinson-1\n","27  3.949969   8.129494  12.055235   5.525000       tyquan-thornton-1\n","28  5.328402   8.910610  11.137667   9.794118        george-pickens-1\n","29  6.317544   8.266712  11.811368   7.018750           alec-pierce-2\n","30  3.510532   7.765071  10.356941   3.528571            skyy-moore-1\n","31  3.915892   6.944527  10.200608   4.222222        velus-jones-jr-1\n","32  2.528296   6.598960   9.214330   1.600000         jalen-tolbert-1\n","33  2.761116   7.699635  10.358018   3.242857            david-bell-6\n","34  2.496738   5.630710   9.497232   0.580000            danny-gray-1\n","35  2.510120   4.557018   8.237381   1.300000         erik-ezukanma-1\n","36  1.217555   4.978848   8.729906   7.815385           romeo-doubs-1\n","37  2.395942   3.752375   8.247541   3.410000         khalil-shakir-1\n","38  1.891822   4.013473   8.850083   3.950000          kyle-philips-4\n","39  2.413001   3.639890   8.108196   6.580000          jalen-nailor-1\n","40  3.685274   8.455201  12.390324   8.811765    jaxon-smith-njigba-1\n","41  3.914713   8.040033  12.495824   5.529412      quentin-johnston-1\n","42  3.064491   9.680576  12.478832  12.900001           zay-flowers-1\n","43  4.518016   9.541958  13.051027  13.017647        jordan-addison-1\n","44  4.750751   7.351422  10.861709   5.653333        jonathan-mingo-1\n","45  4.845724   6.759847  11.200877  13.575000           jayden-reed-1\n","46  3.981476   6.496921  10.279943  13.281250           rashee-rice-1\n","47  2.270760   7.743515  10.808721   4.980000           marvin-mims-1\n","48  4.760425   6.221002  10.421777  16.500000        nathaniel-dell-1\n","49  4.087636   5.532175  10.463920   4.638462           jalin-hyatt-1\n","50  3.728145   4.949925  12.221334   4.018182        cedric-tillman-1\n","51  2.421474   6.612237  10.556190   9.241176            josh-downs-2\n","52  3.528401   5.474535   9.954686   8.807692        michael-wilson-3\n","53  2.158822   5.173244   9.520861   5.523077            tre-tucker-1\n","54  2.008189   6.377972   8.832784   2.692857          derius-davis-1\n","55  2.024923   5.391004   8.549318   4.140000         charlie-jones-7\n","56  1.678805   5.019379   8.813829   2.761538           tyler-scott-3\n","57  1.828483   4.077230   8.488729   7.984000      dontayvion-wicks-1\n","58  1.614503   3.483345   9.264655  17.558824            puka-nacua-1\n","59  1.738923   6.544678  10.314126   6.533333     parker-washington-1\n","60  1.954594   5.128981  10.656463   1.300000        kayshon-boutte-1\n","61  1.899602   5.167285   8.492929   5.629412           trey-palmer-1\n","62  1.606134   5.292381   8.174727   7.575000              at-perry-1\n","63  1.853350   3.233988   9.137728   4.033333        elijah-higgins-1\n","64  2.318427   3.993275   8.573425   1.990909     xavier-hutchinson-1\n","65  2.248329   4.293675  10.059489   7.657143       demario-douglas-1\n","66  1.876980   3.654477   8.398695   0.600000         antoine-green-1\n","67  2.357000   3.777696   8.630855   4.133334          jalen-brooks-2\n","68  1.705756   3.068061   9.068749   3.850000           ronnie-bell-3"],"text/html":["\n","  <div id=\"df-cda36a07-0361-4635-85e9-d72896850a8c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>p10</th>\n","      <th>p50</th>\n","      <th>p90</th>\n","      <th>true</th>\n","      <th>player</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.430028</td>\n","      <td>11.372669</td>\n","      <td>13.344246</td>\n","      <td>17.917647</td>\n","      <td>jamarr-chase-1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>3.282039</td>\n","      <td>8.275217</td>\n","      <td>11.264234</td>\n","      <td>9.151111</td>\n","      <td>kadarius-toney-1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2.692096</td>\n","      <td>8.779327</td>\n","      <td>11.871798</td>\n","      <td>8.625000</td>\n","      <td>rashod-bateman-1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>5.304392</td>\n","      <td>8.310055</td>\n","      <td>11.914520</td>\n","      <td>7.935714</td>\n","      <td>rondale-moore-1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3.035401</td>\n","      <td>6.206902</td>\n","      <td>9.893139</td>\n","      <td>3.537500</td>\n","      <td>dwayne-eskridge-1</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>4.189470</td>\n","      <td>5.600552</td>\n","      <td>9.931711</td>\n","      <td>2.733333</td>\n","      <td>terrace-marshall-jr-1</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>2.257851</td>\n","      <td>6.039941</td>\n","      <td>9.604217</td>\n","      <td>3.122222</td>\n","      <td>dyami-brown-1</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>2.861846</td>\n","      <td>4.873810</td>\n","      <td>9.438075</td>\n","      <td>2.400000</td>\n","      <td>amari-rodgers-1</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>2.187807</td>\n","      <td>3.905931</td>\n","      <td>9.854877</td>\n","      <td>5.971429</td>\n","      <td>nico-collins-1</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>2.893679</td>\n","      <td>4.458262</td>\n","      <td>10.793064</td>\n","      <td>2.783333</td>\n","      <td>anthony-schwartz-1</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>1.975623</td>\n","      <td>4.779189</td>\n","      <td>9.035207</td>\n","      <td>5.300000</td>\n","      <td>dez-fitzpatrick-1</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>2.491857</td>\n","      <td>5.127617</td>\n","      <td>10.062276</td>\n","      <td>14.206250</td>\n","      <td>amon-ra-st-brown-1</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>1.079338</td>\n","      <td>5.353181</td>\n","      <td>7.890275</td>\n","      <td>1.628571</td>\n","      <td>jaelon-darden-1</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>1.260406</td>\n","      <td>3.856743</td>\n","      <td>8.624296</td>\n","      <td>1.075000</td>\n","      <td>tylan-wallace-1</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>2.589508</td>\n","      <td>5.047272</td>\n","      <td>9.259497</td>\n","      <td>9.533333</td>\n","      <td>ihmir-smith-marsette-1</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>2.640345</td>\n","      <td>4.288457</td>\n","      <td>7.891831</td>\n","      <td>1.200000</td>\n","      <td>frank-darby-1</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>0.615370</td>\n","      <td>3.458604</td>\n","      <td>8.243389</td>\n","      <td>0.160000</td>\n","      <td>racey-mcmath-1</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>0.379925</td>\n","      <td>4.245337</td>\n","      <td>7.800098</td>\n","      <td>4.400000</td>\n","      <td>seth-williams-1</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>2.644787</td>\n","      <td>3.793316</td>\n","      <td>8.610356</td>\n","      <td>1.433333</td>\n","      <td>dazz-newsome-1</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>0.449530</td>\n","      <td>3.431449</td>\n","      <td>9.322883</td>\n","      <td>3.471429</td>\n","      <td>ben-skowronek-1</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>3.698053</td>\n","      <td>9.631727</td>\n","      <td>12.700686</td>\n","      <td>10.505882</td>\n","      <td>drake-london-1</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>3.288021</td>\n","      <td>7.850413</td>\n","      <td>11.604483</td>\n","      <td>12.688235</td>\n","      <td>garrett-wilson-2</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>4.449275</td>\n","      <td>8.745807</td>\n","      <td>11.341491</td>\n","      <td>13.213333</td>\n","      <td>chris-olave-1</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>4.909830</td>\n","      <td>10.634584</td>\n","      <td>13.298176</td>\n","      <td>2.516667</td>\n","      <td>jameson-williams-1</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>4.483345</td>\n","      <td>9.939171</td>\n","      <td>12.090211</td>\n","      <td>10.883333</td>\n","      <td>jahan-dotson-1</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>4.465230</td>\n","      <td>9.413033</td>\n","      <td>12.092280</td>\n","      <td>8.009091</td>\n","      <td>treylon-burks-1</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>4.654057</td>\n","      <td>7.421115</td>\n","      <td>10.907305</td>\n","      <td>8.600000</td>\n","      <td>wandale-robinson-1</td>\n","    </tr>\n","    <tr>\n","      <th>27</th>\n","      <td>3.949969</td>\n","      <td>8.129494</td>\n","      <td>12.055235</td>\n","      <td>5.525000</td>\n","      <td>tyquan-thornton-1</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>5.328402</td>\n","      <td>8.910610</td>\n","      <td>11.137667</td>\n","      <td>9.794118</td>\n","      <td>george-pickens-1</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>6.317544</td>\n","      <td>8.266712</td>\n","      <td>11.811368</td>\n","      <td>7.018750</td>\n","      <td>alec-pierce-2</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>3.510532</td>\n","      <td>7.765071</td>\n","      <td>10.356941</td>\n","      <td>3.528571</td>\n","      <td>skyy-moore-1</td>\n","    </tr>\n","    <tr>\n","      <th>31</th>\n","      <td>3.915892</td>\n","      <td>6.944527</td>\n","      <td>10.200608</td>\n","      <td>4.222222</td>\n","      <td>velus-jones-jr-1</td>\n","    </tr>\n","    <tr>\n","      <th>32</th>\n","      <td>2.528296</td>\n","      <td>6.598960</td>\n","      <td>9.214330</td>\n","      <td>1.600000</td>\n","      <td>jalen-tolbert-1</td>\n","    </tr>\n","    <tr>\n","      <th>33</th>\n","      <td>2.761116</td>\n","      <td>7.699635</td>\n","      <td>10.358018</td>\n","      <td>3.242857</td>\n","      <td>david-bell-6</td>\n","    </tr>\n","    <tr>\n","      <th>34</th>\n","      <td>2.496738</td>\n","      <td>5.630710</td>\n","      <td>9.497232</td>\n","      <td>0.580000</td>\n","      <td>danny-gray-1</td>\n","    </tr>\n","    <tr>\n","      <th>35</th>\n","      <td>2.510120</td>\n","      <td>4.557018</td>\n","      <td>8.237381</td>\n","      <td>1.300000</td>\n","      <td>erik-ezukanma-1</td>\n","    </tr>\n","    <tr>\n","      <th>36</th>\n","      <td>1.217555</td>\n","      <td>4.978848</td>\n","      <td>8.729906</td>\n","      <td>7.815385</td>\n","      <td>romeo-doubs-1</td>\n","    </tr>\n","    <tr>\n","      <th>37</th>\n","      <td>2.395942</td>\n","      <td>3.752375</td>\n","      <td>8.247541</td>\n","      <td>3.410000</td>\n","      <td>khalil-shakir-1</td>\n","    </tr>\n","    <tr>\n","      <th>38</th>\n","      <td>1.891822</td>\n","      <td>4.013473</td>\n","      <td>8.850083</td>\n","      <td>3.950000</td>\n","      <td>kyle-philips-4</td>\n","    </tr>\n","    <tr>\n","      <th>39</th>\n","      <td>2.413001</td>\n","      <td>3.639890</td>\n","      <td>8.108196</td>\n","      <td>6.580000</td>\n","      <td>jalen-nailor-1</td>\n","    </tr>\n","    <tr>\n","      <th>40</th>\n","      <td>3.685274</td>\n","      <td>8.455201</td>\n","      <td>12.390324</td>\n","      <td>8.811765</td>\n","      <td>jaxon-smith-njigba-1</td>\n","    </tr>\n","    <tr>\n","      <th>41</th>\n","      <td>3.914713</td>\n","      <td>8.040033</td>\n","      <td>12.495824</td>\n","      <td>5.529412</td>\n","      <td>quentin-johnston-1</td>\n","    </tr>\n","    <tr>\n","      <th>42</th>\n","      <td>3.064491</td>\n","      <td>9.680576</td>\n","      <td>12.478832</td>\n","      <td>12.900001</td>\n","      <td>zay-flowers-1</td>\n","    </tr>\n","    <tr>\n","      <th>43</th>\n","      <td>4.518016</td>\n","      <td>9.541958</td>\n","      <td>13.051027</td>\n","      <td>13.017647</td>\n","      <td>jordan-addison-1</td>\n","    </tr>\n","    <tr>\n","      <th>44</th>\n","      <td>4.750751</td>\n","      <td>7.351422</td>\n","      <td>10.861709</td>\n","      <td>5.653333</td>\n","      <td>jonathan-mingo-1</td>\n","    </tr>\n","    <tr>\n","      <th>45</th>\n","      <td>4.845724</td>\n","      <td>6.759847</td>\n","      <td>11.200877</td>\n","      <td>13.575000</td>\n","      <td>jayden-reed-1</td>\n","    </tr>\n","    <tr>\n","      <th>46</th>\n","      <td>3.981476</td>\n","      <td>6.496921</td>\n","      <td>10.279943</td>\n","      <td>13.281250</td>\n","      <td>rashee-rice-1</td>\n","    </tr>\n","    <tr>\n","      <th>47</th>\n","      <td>2.270760</td>\n","      <td>7.743515</td>\n","      <td>10.808721</td>\n","      <td>4.980000</td>\n","      <td>marvin-mims-1</td>\n","    </tr>\n","    <tr>\n","      <th>48</th>\n","      <td>4.760425</td>\n","      <td>6.221002</td>\n","      <td>10.421777</td>\n","      <td>16.500000</td>\n","      <td>nathaniel-dell-1</td>\n","    </tr>\n","    <tr>\n","      <th>49</th>\n","      <td>4.087636</td>\n","      <td>5.532175</td>\n","      <td>10.463920</td>\n","      <td>4.638462</td>\n","      <td>jalin-hyatt-1</td>\n","    </tr>\n","    <tr>\n","      <th>50</th>\n","      <td>3.728145</td>\n","      <td>4.949925</td>\n","      <td>12.221334</td>\n","      <td>4.018182</td>\n","      <td>cedric-tillman-1</td>\n","    </tr>\n","    <tr>\n","      <th>51</th>\n","      <td>2.421474</td>\n","      <td>6.612237</td>\n","      <td>10.556190</td>\n","      <td>9.241176</td>\n","      <td>josh-downs-2</td>\n","    </tr>\n","    <tr>\n","      <th>52</th>\n","      <td>3.528401</td>\n","      <td>5.474535</td>\n","      <td>9.954686</td>\n","      <td>8.807692</td>\n","      <td>michael-wilson-3</td>\n","    </tr>\n","    <tr>\n","      <th>53</th>\n","      <td>2.158822</td>\n","      <td>5.173244</td>\n","      <td>9.520861</td>\n","      <td>5.523077</td>\n","      <td>tre-tucker-1</td>\n","    </tr>\n","    <tr>\n","      <th>54</th>\n","      <td>2.008189</td>\n","      <td>6.377972</td>\n","      <td>8.832784</td>\n","      <td>2.692857</td>\n","      <td>derius-davis-1</td>\n","    </tr>\n","    <tr>\n","      <th>55</th>\n","      <td>2.024923</td>\n","      <td>5.391004</td>\n","      <td>8.549318</td>\n","      <td>4.140000</td>\n","      <td>charlie-jones-7</td>\n","    </tr>\n","    <tr>\n","      <th>56</th>\n","      <td>1.678805</td>\n","      <td>5.019379</td>\n","      <td>8.813829</td>\n","      <td>2.761538</td>\n","      <td>tyler-scott-3</td>\n","    </tr>\n","    <tr>\n","      <th>57</th>\n","      <td>1.828483</td>\n","      <td>4.077230</td>\n","      <td>8.488729</td>\n","      <td>7.984000</td>\n","      <td>dontayvion-wicks-1</td>\n","    </tr>\n","    <tr>\n","      <th>58</th>\n","      <td>1.614503</td>\n","      <td>3.483345</td>\n","      <td>9.264655</td>\n","      <td>17.558824</td>\n","      <td>puka-nacua-1</td>\n","    </tr>\n","    <tr>\n","      <th>59</th>\n","      <td>1.738923</td>\n","      <td>6.544678</td>\n","      <td>10.314126</td>\n","      <td>6.533333</td>\n","      <td>parker-washington-1</td>\n","    </tr>\n","    <tr>\n","      <th>60</th>\n","      <td>1.954594</td>\n","      <td>5.128981</td>\n","      <td>10.656463</td>\n","      <td>1.300000</td>\n","      <td>kayshon-boutte-1</td>\n","    </tr>\n","    <tr>\n","      <th>61</th>\n","      <td>1.899602</td>\n","      <td>5.167285</td>\n","      <td>8.492929</td>\n","      <td>5.629412</td>\n","      <td>trey-palmer-1</td>\n","    </tr>\n","    <tr>\n","      <th>62</th>\n","      <td>1.606134</td>\n","      <td>5.292381</td>\n","      <td>8.174727</td>\n","      <td>7.575000</td>\n","      <td>at-perry-1</td>\n","    </tr>\n","    <tr>\n","      <th>63</th>\n","      <td>1.853350</td>\n","      <td>3.233988</td>\n","      <td>9.137728</td>\n","      <td>4.033333</td>\n","      <td>elijah-higgins-1</td>\n","    </tr>\n","    <tr>\n","      <th>64</th>\n","      <td>2.318427</td>\n","      <td>3.993275</td>\n","      <td>8.573425</td>\n","      <td>1.990909</td>\n","      <td>xavier-hutchinson-1</td>\n","    </tr>\n","    <tr>\n","      <th>65</th>\n","      <td>2.248329</td>\n","      <td>4.293675</td>\n","      <td>10.059489</td>\n","      <td>7.657143</td>\n","      <td>demario-douglas-1</td>\n","    </tr>\n","    <tr>\n","      <th>66</th>\n","      <td>1.876980</td>\n","      <td>3.654477</td>\n","      <td>8.398695</td>\n","      <td>0.600000</td>\n","      <td>antoine-green-1</td>\n","    </tr>\n","    <tr>\n","      <th>67</th>\n","      <td>2.357000</td>\n","      <td>3.777696</td>\n","      <td>8.630855</td>\n","      <td>4.133334</td>\n","      <td>jalen-brooks-2</td>\n","    </tr>\n","    <tr>\n","      <th>68</th>\n","      <td>1.705756</td>\n","      <td>3.068061</td>\n","      <td>9.068749</td>\n","      <td>3.850000</td>\n","      <td>ronnie-bell-3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cda36a07-0361-4635-85e9-d72896850a8c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-cda36a07-0361-4635-85e9-d72896850a8c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-cda36a07-0361-4635-85e9-d72896850a8c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-bf4cb0a1-5eed-4fa2-bf87-3207dab9ad93\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bf4cb0a1-5eed-4fa2-bf87-3207dab9ad93')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-bf4cb0a1-5eed-4fa2-bf87-3207dab9ad93 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_45d848f8-6044-4c7e-beeb-dc1b6f73e342\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('pred_df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_45d848f8-6044-4c7e-beeb-dc1b6f73e342 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('pred_df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"pred_df","summary":"{\n  \"name\": \"pred_df\",\n  \"rows\": 69,\n  \"fields\": [\n    {\n      \"column\": \"p10\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.3010491694220643,\n        \"min\": 0.3799254121498407,\n        \"max\": 6.317543822966323,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          4.449274795177744,\n          5.4300283400972855,\n          2.2707597620459405\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"p50\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.088335879711298,\n        \"min\": 3.0680606073076513,\n        \"max\": 11.372669394995283,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          8.745806610665733,\n          11.372669394995283,\n          7.74351517950617\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"p90\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.5131813432055277,\n        \"min\": 7.800097869850141,\n        \"max\": 13.344245742087388,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          11.341491390686498,\n          13.344245742087388,\n          10.808721442165123\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"true\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.363174604210367,\n        \"min\": 0.15999999,\n        \"max\": 17.91764705882353,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          13.213333333333333,\n          17.91764705882353,\n          4.98\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"player\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 69,\n        \"samples\": [\n          \"chris-olave-1\",\n          \"jamarr-chase-1\",\n          \"marvin-mims-1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"markdown","source":["## NN\n","\n","Insufficient training samples"],"metadata":{"id":"upW7-2-PByNL"}},{"cell_type":"code","source":["# Model Class\n","class RegressionNN(nn.Module):\n","    def __init__(self, input_size):\n","        super(RegressionNN, self).__init__()\n","        self.model = nn.Sequential(\n","            nn.Linear(input_size, 64),\n","            nn.ReLU(),\n","            nn.Linear(64, 32),\n","            nn.ReLU(),\n","            nn.Linear(32, 1)  # Output is a single value for regression\n","        )\n","\n","    def forward(self, x):\n","        return self.model(x)\n"],"metadata":{"id":"GCWBjaXjCDQb","executionInfo":{"status":"ok","timestamp":1747164024437,"user_tz":300,"elapsed":8,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}}},"execution_count":48,"outputs":[]},{"cell_type":"code","source":["# Define features (X) and target (y)\n","features = ['pick', 'age', 'htInches', 'wt','passAttempts','passYards','passTDs','passAirYds', 'teamTotRec', 'teamTotYds', 'teamTotTD', 'teamMaxRec', 'teamMaxYds', 'teamMaxTD']\n","target = 'pprPointsPerWeek'\n","\n","X = dfWr[features].astype(np.float32)\n","y = dfWr[target].astype(np.float32)\n","\n","# Create a boolean mask to identify 2023 and 2024 data for testing\n","test_mask = dfWr['season'].isin([2023])\n","\n","# Split the data into training and testing sets based on the year\n","X_train = X[~test_mask]\n","X_test = X[test_mask]\n","y_train = y[~test_mask]\n","y_test = y[test_mask]\n","\n","# Create dataset and data loader\n","datasetTrain = TensorDataset(torch.tensor(X_train.to_numpy()), torch.tensor(y_train.to_numpy()))\n","train_loader = DataLoader(datasetTrain, batch_size=16, shuffle=True)\n","\n","# Define test dataset\n","datasetTest = TensorDataset(torch.tensor(X_test.to_numpy()), torch.tensor(y_test.to_numpy()))\n","\n","# Example usage\n","model = RegressionNN(input_size=len(features))  # replace with your number of features\n","loss_fn = nn.MSELoss()\n","optimizer = torch.optim.Adam(model.parameters(), lr=0.001)"],"metadata":{"id":"8cqz4bsOB3m7","executionInfo":{"status":"ok","timestamp":1747164119878,"user_tz":300,"elapsed":9,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}}},"execution_count":55,"outputs":[]},{"cell_type":"code","source":["epochs = 200\n","\n","for epoch in range(epochs):\n","    model.train()\n","    running_loss = 0.0\n","\n","    for batch_X, batch_y in train_loader:\n","        optimizer.zero_grad()\n","        preds = model(batch_X)\n","        loss = loss_fn(preds, batch_y)\n","        loss.backward()\n","        optimizer.step()\n","        running_loss += loss.item() * batch_X.size(0)  # sum loss over batch\n","\n","    avg_loss = running_loss / len(train_loader.dataset)\n","    if epoch % 10 == 0:\n","      print(f\"Epoch {epoch+1}/{epochs}, Loss: {avg_loss:.4f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0B8Ufz9YCujf","executionInfo":{"status":"ok","timestamp":1747164126817,"user_tz":300,"elapsed":6716,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"outputId":"d20fdbb4-3933-4df4-e194-6fd47c02b21d"},"execution_count":56,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/torch/nn/modules/loss.py:610: UserWarning: Using a target size (torch.Size([16])) that is different to the input size (torch.Size([16, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n","/usr/local/lib/python3.11/dist-packages/torch/nn/modules/loss.py:610: UserWarning: Using a target size (torch.Size([9])) that is different to the input size (torch.Size([9, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  return F.mse_loss(input, target, reduction=self.reduction)\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/200, Loss: 490.5517\n","Epoch 11/200, Loss: 29.8065\n","Epoch 21/200, Loss: 24.8347\n","Epoch 31/200, Loss: 21.6153\n","Epoch 41/200, Loss: 22.8715\n","Epoch 51/200, Loss: 21.3265\n","Epoch 61/200, Loss: 20.8700\n","Epoch 71/200, Loss: 20.8574\n","Epoch 81/200, Loss: 23.4128\n","Epoch 91/200, Loss: 21.2750\n","Epoch 101/200, Loss: 23.2826\n","Epoch 111/200, Loss: 19.9988\n","Epoch 121/200, Loss: 22.5453\n","Epoch 131/200, Loss: 20.2497\n","Epoch 141/200, Loss: 21.0077\n","Epoch 151/200, Loss: 18.9107\n","Epoch 161/200, Loss: 19.5268\n","Epoch 171/200, Loss: 19.3686\n","Epoch 181/200, Loss: 21.1999\n","Epoch 191/200, Loss: 18.3097\n"]}]},{"cell_type":"code","source":["# prompt: compute predictions on the model using the test dataset\n","\n","import pandas as pd\n","import numpy as np\n","# Make predictions on the test set\n","model.eval()  # Set the model to evaluation mode\n","with torch.no_grad():\n","    test_preds = model(torch.tensor(X_test.to_numpy()))\n","    test_preds = test_preds.numpy().flatten()\n","\n","# Evaluate the model (example: using R-squared)\n","r2_nn = r2_score(y_test, test_preds)\n","rmse = np.sqrt(np.mean((y_test - test_preds)**2))\n","print(f\"R-squared (NN): {r2_nn}\")\n","print(f\"RMSE (NN): {rmse}\")\n","\n","zipped_data_nn = pd.DataFrame(list(zip(test_preds, y_test, dfWr['cfb_player_id'][test_mask])), columns = ('predicted','true','player'))\n","display(zipped_data_nn)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":994},"id":"99v6OM_QE1y2","executionInfo":{"status":"ok","timestamp":1747164129396,"user_tz":300,"elapsed":27,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"outputId":"1c7d9950-5091-4396-b1bf-351ebe362830"},"execution_count":57,"outputs":[{"output_type":"stream","name":"stdout","text":["R-squared (NN): -0.16822731494903564\n","RMSE (NN): 4.773319721221924\n"]},{"output_type":"display_data","data":{"text/plain":["    predicted       true                player\n","0    5.392859   8.811765  jaxon-smith-njigba-1\n","1    7.136298   5.529412    quentin-johnston-1\n","2    5.478370  12.900001         zay-flowers-1\n","3    5.812568  13.017647      jordan-addison-1\n","4    1.858840   5.653333      jonathan-mingo-1\n","5    5.968459  13.575000         jayden-reed-1\n","6    5.849586  13.281250         rashee-rice-1\n","7    6.236945   4.980000         marvin-mims-1\n","8    5.607574  16.500000      nathaniel-dell-1\n","9    5.070472   4.638462         jalin-hyatt-1\n","10   5.979896   4.018182      cedric-tillman-1\n","11   4.570052   9.241177          josh-downs-2\n","12   5.577132   8.807693      michael-wilson-3\n","13   6.247687   5.523077          tre-tucker-1\n","14   6.559730   2.692857        derius-davis-1\n","15   7.615394   4.140000       charlie-jones-7\n","16   5.094314   2.761539         tyler-scott-3\n","17   6.156226   7.984000    dontayvion-wicks-1\n","18   5.926490  17.558823          puka-nacua-1\n","19   5.268241   6.533333   parker-washington-1\n","20   5.455680   1.300000      kayshon-boutte-1\n","21   5.778907   5.629412         trey-palmer-1\n","22   5.986014   7.575000            at-perry-1\n","23   6.727347   4.033333      elijah-higgins-1\n","24   5.891150   1.990909   xavier-hutchinson-1\n","25   5.381446   7.657143     demario-douglas-1\n","26   5.996207   0.600000       antoine-green-1\n","27   5.473639   4.133334        jalen-brooks-2\n","28   5.813125   3.850000         ronnie-bell-3"],"text/html":["\n","  <div id=\"df-8225993d-678e-4bc0-be75-0ba543eb6ef6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>predicted</th>\n","      <th>true</th>\n","      <th>player</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.392859</td>\n","      <td>8.811765</td>\n","      <td>jaxon-smith-njigba-1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>7.136298</td>\n","      <td>5.529412</td>\n","      <td>quentin-johnston-1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>5.478370</td>\n","      <td>12.900001</td>\n","      <td>zay-flowers-1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>5.812568</td>\n","      <td>13.017647</td>\n","      <td>jordan-addison-1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1.858840</td>\n","      <td>5.653333</td>\n","      <td>jonathan-mingo-1</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>5.968459</td>\n","      <td>13.575000</td>\n","      <td>jayden-reed-1</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>5.849586</td>\n","      <td>13.281250</td>\n","      <td>rashee-rice-1</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>6.236945</td>\n","      <td>4.980000</td>\n","      <td>marvin-mims-1</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>5.607574</td>\n","      <td>16.500000</td>\n","      <td>nathaniel-dell-1</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>5.070472</td>\n","      <td>4.638462</td>\n","      <td>jalin-hyatt-1</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>5.979896</td>\n","      <td>4.018182</td>\n","      <td>cedric-tillman-1</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>4.570052</td>\n","      <td>9.241177</td>\n","      <td>josh-downs-2</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>5.577132</td>\n","      <td>8.807693</td>\n","      <td>michael-wilson-3</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>6.247687</td>\n","      <td>5.523077</td>\n","      <td>tre-tucker-1</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>6.559730</td>\n","      <td>2.692857</td>\n","      <td>derius-davis-1</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>7.615394</td>\n","      <td>4.140000</td>\n","      <td>charlie-jones-7</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>5.094314</td>\n","      <td>2.761539</td>\n","      <td>tyler-scott-3</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>6.156226</td>\n","      <td>7.984000</td>\n","      <td>dontayvion-wicks-1</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>5.926490</td>\n","      <td>17.558823</td>\n","      <td>puka-nacua-1</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>5.268241</td>\n","      <td>6.533333</td>\n","      <td>parker-washington-1</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>5.455680</td>\n","      <td>1.300000</td>\n","      <td>kayshon-boutte-1</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>5.778907</td>\n","      <td>5.629412</td>\n","      <td>trey-palmer-1</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>5.986014</td>\n","      <td>7.575000</td>\n","      <td>at-perry-1</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>6.727347</td>\n","      <td>4.033333</td>\n","      <td>elijah-higgins-1</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>5.891150</td>\n","      <td>1.990909</td>\n","      <td>xavier-hutchinson-1</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>5.381446</td>\n","      <td>7.657143</td>\n","      <td>demario-douglas-1</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>5.996207</td>\n","      <td>0.600000</td>\n","      <td>antoine-green-1</td>\n","    </tr>\n","    <tr>\n","      <th>27</th>\n","      <td>5.473639</td>\n","      <td>4.133334</td>\n","      <td>jalen-brooks-2</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>5.813125</td>\n","      <td>3.850000</td>\n","      <td>ronnie-bell-3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8225993d-678e-4bc0-be75-0ba543eb6ef6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8225993d-678e-4bc0-be75-0ba543eb6ef6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8225993d-678e-4bc0-be75-0ba543eb6ef6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-4710a471-61df-4342-b159-9da4b086d232\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4710a471-61df-4342-b159-9da4b086d232')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-4710a471-61df-4342-b159-9da4b086d232 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_5f44aeb6-8a1d-406b-a1b5-057167781a4c\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('zipped_data_nn')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_5f44aeb6-8a1d-406b-a1b5-057167781a4c button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('zipped_data_nn');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"zipped_data_nn","summary":"{\n  \"name\": \"zipped_data_nn\",\n  \"rows\": 29,\n  \"fields\": [\n    {\n      \"column\": \"predicted\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 29,\n        \"samples\": [\n          5.473639488220215,\n          5.094313621520996,\n          5.577132225036621\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"true\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.494452724086624,\n        \"min\": 0.6000000238418579,\n        \"max\": 17.558822631835938,\n        \"num_unique_values\": 29,\n        \"samples\": [\n          4.133333683013916,\n          2.761538505554199,\n          8.807692527770996\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"player\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 29,\n        \"samples\": [\n          \"jalen-brooks-2\",\n          \"tyler-scott-3\",\n          \"michael-wilson-3\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"markdown","source":["## RB Dataframe"],"metadata":{"id":"sAnqSfh9CkG8"}},{"cell_type":"code","source":["dfRb = pd.read_csv(r'rbDraftDfProd.csv')\n","\n","# Apply Cleaning Function\n","dfRb = clean_data(dfRb)"],"metadata":{"id":"pb_qP4kmCm6V"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Define features (X) and target (y)\n","features = ['pick', 'age', 'htInches', 'wt','passAttempts','passYards','passTDs','passAirYds', 'teamTotRec', 'teamTotRecYds', 'teamTotRecTD', 'teamMaxRec', 'teamMaxRecYds', 'teamMaxRecTD','teamTotCar','teamTotRushYds','teamTotRushTD','teamMaxCar','teamMaxRushYds','teamMaxRushTD']\n","target = 'pprPointsPerWeek'\n","\n","X = dfRb[features]\n","y = dfRb[target]\n","\n","# Create a boolean mask to identify 2023 and 2024 data for testing\n","test_mask = dfRb['season'].isin([2020,2021,2022,2023])\n","\n","# Split the data into training and testing sets based on the year\n","X_train = X[~test_mask]\n","X_test = X[test_mask]\n","y_train = y[~test_mask]\n","y_test = y[test_mask]\n","\n","\n","# Scale the data\n","scaler = StandardScaler()\n","X_train_scaled = scaler.fit_transform(X_train)\n","X_test_scaled = scaler.transform(X_test)\n","\n","# Initialize and train the linear regression model\n","model = LinearRegression()\n","model.fit(X_train_scaled, y_train)\n","\n","# Make predictions on the test set\n","y_pred = model.predict(X_test_scaled)\n","\n","# Evaluate the model (example: using R-squared)\n","r2 = r2_score(y_test, y_pred)\n","print(f\"R-squared: {r2}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"elYrbEPFCtsq","executionInfo":{"status":"ok","timestamp":1747013423770,"user_tz":300,"elapsed":16,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"outputId":"673508b2-cb11-4f5a-d144-9571865cf467"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["R-squared: 0.2833430922649598\n"]}]},{"cell_type":"code","source":["# prompt: zip y_pred and y_test and the corresponding cfb_player_id together\n","\n","# Assuming y_pred, y_test, and cfb_player_id are already defined as in the previous code.\n","# If cfb_player_id is not available in the current dataframe or as a separate variable,\n","# you'll need to provide it.  For example:\n","# cfb_player_id = dfWr['cfb_player_id'][test_mask]  # Replace 'cfb_player_id' with the correct column name\n","\n","\n","zipped_data = pd.DataFrame(list(zip(y_pred, y_test, dfRb['cfb_player_id'][test_mask],dfRb['season'][test_mask])), columns = ('predicted','true','player','season'))\n","display(zipped_data)\n","\n","#Example usage\n","#for pred, actual, player_id in zipped_data:\n","#    print(f\"Player ID: {player_id}, Predicted: {pred}, Actual: {actual}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"6stS5ETJC_Mn","executionInfo":{"status":"ok","timestamp":1747013424285,"user_tz":300,"elapsed":46,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"outputId":"1a9c386e-dec3-49f4-e50e-07d0f38461b6"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["    predicted       true                   player  season\n","0   11.569997  13.538462  clyde-edwards-helaire-1    2020\n","1   10.626041  14.600000           dandre-swift-1    2020\n","2    8.364744  16.853333        jonathan-taylor-1    2020\n","3   11.490189   9.254545              cam-akers-1    2020\n","4    5.268764  11.233333             jk-dobbins-1    2020\n","5    6.926367   4.477778              aj-dillon-1    2020\n","6    9.287615  14.442857         antonio-gibson-2    2020\n","7    7.448175   3.883333         keshawn-vaughn-1    2020\n","8    7.926946   7.815385              zack-moss-1    2020\n","9    4.518009   4.025000        darrynton-evans-1    2020\n","10   4.078613   6.246154          joshua-kelley-1    2020\n","11   8.143193   5.833333         lamical-perine-1    2020\n","12   5.904579   2.063636      anthony-mcfarland-2    2020\n","13   4.927639   7.112500          deejay-dallas-1    2020\n","14   2.637402   3.087500          malcolm-perry-1    2020\n","15   8.934583  12.052941       javonte-williams-1    2021\n","16   8.675606   5.660000            trey-sermon-1    2021\n","17   7.003450  11.028571         michael-carter-5    2021\n","18   7.102082   9.575000    rhamondre-stevenson-1    2021\n","19   8.395019   8.600000          chuba-hubbard-1    2021\n","20   4.406042  15.000000        elijah-mitchell-2    2021\n","21   4.983325   1.000000        gary-brightwell-1    2021\n","22   3.667432   5.533333            chris-evans-2    2021\n","23  -1.669625   4.590909        demetric-felton-1    2021\n","24   3.806015   5.635714         khalil-herbert-1    2021\n","25   5.636789   0.250000              jake-funk-1    2021\n","26  -1.535322   0.975000             kylin-hill-1    2021\n","27   1.250280   6.425000       jermar-jefferson-1    2021\n","28   8.760562  16.442857            breece-hall-1    2022\n","29   9.002116  13.500000     kenneth-walker-iii-1    2022\n","30   8.116016   6.606250             james-cook-2    2022\n","31   7.740084   8.818750          rachaad-white-1    2022\n","32   9.861979   1.980000     tyrion-davis-price-1    2022\n","33   7.553333   9.391667      brian-robinson-jr-1    2022\n","34   8.341795  12.800000          dameon-pierce-1    2022\n","35   7.267710   0.636364            zamir-white-1    2022\n","36   4.212579   1.680000         isaiah-spiller-1    2022\n","37   5.446242   3.714286         hassan-haskins-1    2022\n","38   4.570389   9.962500         tyler-allgeier-1    2022\n","39   4.663886   2.040000           snoop-conner-1    2022\n","40   3.902719   0.600000            jerome-ford-1    2022\n","41   6.241191   3.812500         kyren-williams-1    2022\n","42   4.087312   2.000000            ty-chandler-1    2022\n","43   2.449954   2.240000           kevin-harris-5    2022\n","44   6.844215   9.400000            tyler-badie-1    2022\n","45   3.429230   1.810000        keaontay-ingram-1    2022\n","46   3.935250   1.171429          trestan-ebner-1    2022\n","47   3.575646   7.941176          isaih-pacheco-1    2022\n","48   8.092370  14.488235         bijan-robinson-1    2023\n","49  13.203473  16.140000           jahmyr-gibbs-1    2023\n","50   9.299668   6.631250        zach-charbonnet-1    2023\n","51   6.141666   6.185714          kendre-miller-1    2023\n","52   7.303736   9.047059           tyjae-spears-1    2023\n","53   8.979726  17.336364           devon-achane-1    2023\n","54   8.788962   1.907692            tank-bigsby-1    2023\n","55   5.241849   6.806667        roschon-johnson-1    2023\n","56   7.237338   3.050000      israel-abanikanda-1    2023\n","57   6.020411   5.350000            chase-brown-3    2023\n","58   3.158431   2.600000              eric-gray-2    2023\n","59   6.042997   1.700000              evan-hull-2    2023\n","60   1.364301   2.500000           deuce-vaughn-1    2023\n","61   6.508706   0.475000             zach-evans-1    2023"],"text/html":["\n","  <div id=\"df-979d483f-be7b-4e53-910f-1e4d1096df35\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>predicted</th>\n","      <th>true</th>\n","      <th>player</th>\n","      <th>season</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>11.569997</td>\n","      <td>13.538462</td>\n","      <td>clyde-edwards-helaire-1</td>\n","      <td>2020</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>10.626041</td>\n","      <td>14.600000</td>\n","      <td>dandre-swift-1</td>\n","      <td>2020</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>8.364744</td>\n","      <td>16.853333</td>\n","      <td>jonathan-taylor-1</td>\n","      <td>2020</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>11.490189</td>\n","      <td>9.254545</td>\n","      <td>cam-akers-1</td>\n","      <td>2020</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5.268764</td>\n","      <td>11.233333</td>\n","      <td>jk-dobbins-1</td>\n","      <td>2020</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>6.926367</td>\n","      <td>4.477778</td>\n","      <td>aj-dillon-1</td>\n","      <td>2020</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>9.287615</td>\n","      <td>14.442857</td>\n","      <td>antonio-gibson-2</td>\n","      <td>2020</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>7.448175</td>\n","      <td>3.883333</td>\n","      <td>keshawn-vaughn-1</td>\n","      <td>2020</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>7.926946</td>\n","      <td>7.815385</td>\n","      <td>zack-moss-1</td>\n","      <td>2020</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>4.518009</td>\n","      <td>4.025000</td>\n","      <td>darrynton-evans-1</td>\n","      <td>2020</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>4.078613</td>\n","      <td>6.246154</td>\n","      <td>joshua-kelley-1</td>\n","      <td>2020</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>8.143193</td>\n","      <td>5.833333</td>\n","      <td>lamical-perine-1</td>\n","      <td>2020</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>5.904579</td>\n","      <td>2.063636</td>\n","      <td>anthony-mcfarland-2</td>\n","      <td>2020</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>4.927639</td>\n","      <td>7.112500</td>\n","      <td>deejay-dallas-1</td>\n","      <td>2020</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>2.637402</td>\n","      <td>3.087500</td>\n","      <td>malcolm-perry-1</td>\n","      <td>2020</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>8.934583</td>\n","      <td>12.052941</td>\n","      <td>javonte-williams-1</td>\n","      <td>2021</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>8.675606</td>\n","      <td>5.660000</td>\n","      <td>trey-sermon-1</td>\n","      <td>2021</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>7.003450</td>\n","      <td>11.028571</td>\n","      <td>michael-carter-5</td>\n","      <td>2021</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>7.102082</td>\n","      <td>9.575000</td>\n","      <td>rhamondre-stevenson-1</td>\n","      <td>2021</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>8.395019</td>\n","      <td>8.600000</td>\n","      <td>chuba-hubbard-1</td>\n","      <td>2021</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>4.406042</td>\n","      <td>15.000000</td>\n","      <td>elijah-mitchell-2</td>\n","      <td>2021</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>4.983325</td>\n","      <td>1.000000</td>\n","      <td>gary-brightwell-1</td>\n","      <td>2021</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>3.667432</td>\n","      <td>5.533333</td>\n","      <td>chris-evans-2</td>\n","      <td>2021</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>-1.669625</td>\n","      <td>4.590909</td>\n","      <td>demetric-felton-1</td>\n","      <td>2021</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>3.806015</td>\n","      <td>5.635714</td>\n","      <td>khalil-herbert-1</td>\n","      <td>2021</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>5.636789</td>\n","      <td>0.250000</td>\n","      <td>jake-funk-1</td>\n","      <td>2021</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>-1.535322</td>\n","      <td>0.975000</td>\n","      <td>kylin-hill-1</td>\n","      <td>2021</td>\n","    </tr>\n","    <tr>\n","      <th>27</th>\n","      <td>1.250280</td>\n","      <td>6.425000</td>\n","      <td>jermar-jefferson-1</td>\n","      <td>2021</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>8.760562</td>\n","      <td>16.442857</td>\n","      <td>breece-hall-1</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>9.002116</td>\n","      <td>13.500000</td>\n","      <td>kenneth-walker-iii-1</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>8.116016</td>\n","      <td>6.606250</td>\n","      <td>james-cook-2</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>31</th>\n","      <td>7.740084</td>\n","      <td>8.818750</td>\n","      <td>rachaad-white-1</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>32</th>\n","      <td>9.861979</td>\n","      <td>1.980000</td>\n","      <td>tyrion-davis-price-1</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>33</th>\n","      <td>7.553333</td>\n","      <td>9.391667</td>\n","      <td>brian-robinson-jr-1</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>34</th>\n","      <td>8.341795</td>\n","      <td>12.800000</td>\n","      <td>dameon-pierce-1</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>35</th>\n","      <td>7.267710</td>\n","      <td>0.636364</td>\n","      <td>zamir-white-1</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>36</th>\n","      <td>4.212579</td>\n","      <td>1.680000</td>\n","      <td>isaiah-spiller-1</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>37</th>\n","      <td>5.446242</td>\n","      <td>3.714286</td>\n","      <td>hassan-haskins-1</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>38</th>\n","      <td>4.570389</td>\n","      <td>9.962500</td>\n","      <td>tyler-allgeier-1</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>39</th>\n","      <td>4.663886</td>\n","      <td>2.040000</td>\n","      <td>snoop-conner-1</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>40</th>\n","      <td>3.902719</td>\n","      <td>0.600000</td>\n","      <td>jerome-ford-1</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>41</th>\n","      <td>6.241191</td>\n","      <td>3.812500</td>\n","      <td>kyren-williams-1</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>42</th>\n","      <td>4.087312</td>\n","      <td>2.000000</td>\n","      <td>ty-chandler-1</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>43</th>\n","      <td>2.449954</td>\n","      <td>2.240000</td>\n","      <td>kevin-harris-5</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>44</th>\n","      <td>6.844215</td>\n","      <td>9.400000</td>\n","      <td>tyler-badie-1</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>45</th>\n","      <td>3.429230</td>\n","      <td>1.810000</td>\n","      <td>keaontay-ingram-1</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>46</th>\n","      <td>3.935250</td>\n","      <td>1.171429</td>\n","      <td>trestan-ebner-1</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>47</th>\n","      <td>3.575646</td>\n","      <td>7.941176</td>\n","      <td>isaih-pacheco-1</td>\n","      <td>2022</td>\n","    </tr>\n","    <tr>\n","      <th>48</th>\n","      <td>8.092370</td>\n","      <td>14.488235</td>\n","      <td>bijan-robinson-1</td>\n","      <td>2023</td>\n","    </tr>\n","    <tr>\n","      <th>49</th>\n","      <td>13.203473</td>\n","      <td>16.140000</td>\n","      <td>jahmyr-gibbs-1</td>\n","      <td>2023</td>\n","    </tr>\n","    <tr>\n","      <th>50</th>\n","      <td>9.299668</td>\n","      <td>6.631250</td>\n","      <td>zach-charbonnet-1</td>\n","      <td>2023</td>\n","    </tr>\n","    <tr>\n","      <th>51</th>\n","      <td>6.141666</td>\n","      <td>6.185714</td>\n","      <td>kendre-miller-1</td>\n","      <td>2023</td>\n","    </tr>\n","    <tr>\n","      <th>52</th>\n","      <td>7.303736</td>\n","      <td>9.047059</td>\n","      <td>tyjae-spears-1</td>\n","      <td>2023</td>\n","    </tr>\n","    <tr>\n","      <th>53</th>\n","      <td>8.979726</td>\n","      <td>17.336364</td>\n","      <td>devon-achane-1</td>\n","      <td>2023</td>\n","    </tr>\n","    <tr>\n","      <th>54</th>\n","      <td>8.788962</td>\n","      <td>1.907692</td>\n","      <td>tank-bigsby-1</td>\n","      <td>2023</td>\n","    </tr>\n","    <tr>\n","      <th>55</th>\n","      <td>5.241849</td>\n","      <td>6.806667</td>\n","      <td>roschon-johnson-1</td>\n","      <td>2023</td>\n","    </tr>\n","    <tr>\n","      <th>56</th>\n","      <td>7.237338</td>\n","      <td>3.050000</td>\n","      <td>israel-abanikanda-1</td>\n","      <td>2023</td>\n","    </tr>\n","    <tr>\n","      <th>57</th>\n","      <td>6.020411</td>\n","      <td>5.350000</td>\n","      <td>chase-brown-3</td>\n","      <td>2023</td>\n","    </tr>\n","    <tr>\n","      <th>58</th>\n","      <td>3.158431</td>\n","      <td>2.600000</td>\n","      <td>eric-gray-2</td>\n","      <td>2023</td>\n","    </tr>\n","    <tr>\n","      <th>59</th>\n","      <td>6.042997</td>\n","      <td>1.700000</td>\n","      <td>evan-hull-2</td>\n","      <td>2023</td>\n","    </tr>\n","    <tr>\n","      <th>60</th>\n","      <td>1.364301</td>\n","      <td>2.500000</td>\n","      <td>deuce-vaughn-1</td>\n","      <td>2023</td>\n","    </tr>\n","    <tr>\n","      <th>61</th>\n","      <td>6.508706</td>\n","      <td>0.475000</td>\n","      <td>zach-evans-1</td>\n","      <td>2023</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-979d483f-be7b-4e53-910f-1e4d1096df35')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-979d483f-be7b-4e53-910f-1e4d1096df35 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-979d483f-be7b-4e53-910f-1e4d1096df35');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-9d12fdc2-1fb5-43a7-bcc1-1660cc2a3b5e\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9d12fdc2-1fb5-43a7-bcc1-1660cc2a3b5e')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-9d12fdc2-1fb5-43a7-bcc1-1660cc2a3b5e button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_4c835664-77b8-430b-81c2-8dc8b7a07c06\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('zipped_data')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_4c835664-77b8-430b-81c2-8dc8b7a07c06 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('zipped_data');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"zipped_data","summary":"{\n  \"name\": \"zipped_data\",\n  \"rows\": 62,\n  \"fields\": [\n    {\n      \"column\": \"predicted\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.899397221597588,\n        \"min\": -1.6696251345697366,\n        \"max\": 13.203473424675227,\n        \"num_unique_values\": 62,\n        \"samples\": [\n          9.299667809948325,\n          7.23733760268617,\n          11.56999718628633\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"true\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.909387348364598,\n        \"min\": 0.25,\n        \"max\": 17.336363636363636,\n        \"num_unique_values\": 62,\n        \"samples\": [\n          6.63125,\n          3.050000166666667,\n          13.538461538461538\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"player\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 62,\n        \"samples\": [\n          \"zach-charbonnet-1\",\n          \"israel-abanikanda-1\",\n          \"clyde-edwards-helaire-1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"season\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2020,\n        \"max\": 2023,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2021,\n          2023,\n          2020\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"code","source":["# prompt: perform feature importance evaluation on model\n","\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","# Get feature importances\n","importances = model.coef_\n","\n","# Create a DataFrame for visualization\n","feature_importances = pd.DataFrame({'feature': features, 'importance': importances})\n","feature_importances = feature_importances.sort_values('importance', ascending=False)\n","\n","# Plotting feature importances\n","plt.figure(figsize=(10, 6))\n","sns.barplot(x='importance', y='feature', data=feature_importances)\n","plt.title('Feature Importances')\n","plt.xlabel('Importance')\n","plt.ylabel('Feature')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"MGjXMyVvDSuK","executionInfo":{"status":"ok","timestamp":1747013438170,"user_tz":300,"elapsed":366,"user":{"displayName":"Jonathan Sands","userId":"02154376848229760967"}},"outputId":"7858cfcd-94b3-40fe-c5a2-66e7d25adfbb"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":[],"metadata":{"id":"XzZHvY_DsiMp"}},{"cell_type":"code","source":[],"metadata":{"id":"iASzpLPGHYjQ"},"execution_count":null,"outputs":[]}]}